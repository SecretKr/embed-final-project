
India_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008590  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08008730  08008730  00018730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b98  08008b98  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba0  08008ba0  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008ba8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000073c  200001f0  08008d98  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  08008d98  0002092c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000956f  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aab  00000000  00000000  000297d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0002b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000630  00000000  00000000  0002ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002eec  00000000  00000000  0002c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009eaa  00000000  00000000  0002efac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008852a  00000000  00000000  00038e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034f0  00000000  00000000  000c1380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  000c4870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008718 	.word	0x08008718

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08008718 	.word	0x08008718

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <parsePMS5003Data>:
  uint16_t checksum;
};

struct pms5003data data;

void parsePMS5003Data(uint8_t *buffer) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  data.framelen = (buffer[0] << 8) | buffer[1];
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3301      	adds	r3, #1
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b21b      	sxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b21b      	sxth	r3, r3
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b66      	ldr	r3, [pc, #408]	; (800110c <parsePMS5003Data+0x1b8>)
 8000f74:	801a      	strh	r2, [r3, #0]
  data.pm10_standard = (buffer[2] << 8) | buffer[3];
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3303      	adds	r3, #3
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b21b      	sxth	r3, r3
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b5f      	ldr	r3, [pc, #380]	; (800110c <parsePMS5003Data+0x1b8>)
 8000f90:	805a      	strh	r2, [r3, #2]
  data.pm25_standard = (buffer[4] << 8) | buffer[5];
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3304      	adds	r3, #4
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21a      	sxth	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3305      	adds	r3, #5
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b21b      	sxth	r3, r3
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b21b      	sxth	r3, r3
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b58      	ldr	r3, [pc, #352]	; (800110c <parsePMS5003Data+0x1b8>)
 8000fac:	809a      	strh	r2, [r3, #4]
  data.pm100_standard = (buffer[6] << 8) | buffer[7];
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3306      	adds	r3, #6
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3307      	adds	r3, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b51      	ldr	r3, [pc, #324]	; (800110c <parsePMS5003Data+0x1b8>)
 8000fc8:	80da      	strh	r2, [r3, #6]
  data.pm10_env = (buffer[8] << 8) | buffer[9];
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3308      	adds	r3, #8
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3309      	adds	r3, #9
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b4a      	ldr	r3, [pc, #296]	; (800110c <parsePMS5003Data+0x1b8>)
 8000fe4:	811a      	strh	r2, [r3, #8]
  data.pm25_env = (buffer[10] << 8) | buffer[11];
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	330a      	adds	r3, #10
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	b21a      	sxth	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	330b      	adds	r3, #11
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b43      	ldr	r3, [pc, #268]	; (800110c <parsePMS5003Data+0x1b8>)
 8001000:	815a      	strh	r2, [r3, #10]
  data.pm100_env = (buffer[12] << 8) | buffer[13];
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	330c      	adds	r3, #12
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	330d      	adds	r3, #13
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21b      	sxth	r3, r3
 8001018:	b29a      	uxth	r2, r3
 800101a:	4b3c      	ldr	r3, [pc, #240]	; (800110c <parsePMS5003Data+0x1b8>)
 800101c:	819a      	strh	r2, [r3, #12]
  data.particles_03um = (buffer[14] << 8) | buffer[15];
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	330e      	adds	r3, #14
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	021b      	lsls	r3, r3, #8
 8001026:	b21a      	sxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	330f      	adds	r3, #15
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21b      	sxth	r3, r3
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b35      	ldr	r3, [pc, #212]	; (800110c <parsePMS5003Data+0x1b8>)
 8001038:	81da      	strh	r2, [r3, #14]
  data.particles_05um = (buffer[16] << 8) | buffer[17];
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3310      	adds	r3, #16
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	021b      	lsls	r3, r3, #8
 8001042:	b21a      	sxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3311      	adds	r3, #17
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21b      	sxth	r3, r3
 8001050:	b29a      	uxth	r2, r3
 8001052:	4b2e      	ldr	r3, [pc, #184]	; (800110c <parsePMS5003Data+0x1b8>)
 8001054:	821a      	strh	r2, [r3, #16]
  data.particles_10um = (buffer[18] << 8) | buffer[19];
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3312      	adds	r3, #18
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3313      	adds	r3, #19
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b21b      	sxth	r3, r3
 8001068:	4313      	orrs	r3, r2
 800106a:	b21b      	sxth	r3, r3
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <parsePMS5003Data+0x1b8>)
 8001070:	825a      	strh	r2, [r3, #18]
  data.particles_25um = (buffer[20] << 8) | buffer[21];
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3314      	adds	r3, #20
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	b21a      	sxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3315      	adds	r3, #21
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b21b      	sxth	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b21b      	sxth	r3, r3
 8001088:	b29a      	uxth	r2, r3
 800108a:	4b20      	ldr	r3, [pc, #128]	; (800110c <parsePMS5003Data+0x1b8>)
 800108c:	829a      	strh	r2, [r3, #20]
  data.particles_50um = (buffer[22] << 8) | buffer[23];
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3316      	adds	r3, #22
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3317      	adds	r3, #23
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <parsePMS5003Data+0x1b8>)
 80010a8:	82da      	strh	r2, [r3, #22]
  data.particles_100um = (buffer[24] << 8) | buffer[25];
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3318      	adds	r3, #24
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3319      	adds	r3, #25
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21b      	sxth	r3, r3
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	4b12      	ldr	r3, [pc, #72]	; (800110c <parsePMS5003Data+0x1b8>)
 80010c4:	831a      	strh	r2, [r3, #24]
  data.unused = (buffer[26] << 8) | buffer[27];
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	331a      	adds	r3, #26
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	331b      	adds	r3, #27
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b21b      	sxth	r3, r3
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <parsePMS5003Data+0x1b8>)
 80010e0:	835a      	strh	r2, [r3, #26]
  data.checksum = (buffer[30] << 8) | buffer[31];
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	331e      	adds	r3, #30
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	021b      	lsls	r3, r3, #8
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	331f      	adds	r3, #31
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21b      	sxth	r3, r3
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <parsePMS5003Data+0x1b8>)
 80010fc:	839a      	strh	r2, [r3, #28]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200002e4 	.word	0x200002e4

08001110 <readPMSdata>:

uint8_t readPMSdata(UART_HandleTypeDef *huart) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint8_t buffer[32];
  uint16_t sum = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	85fb      	strh	r3, [r7, #46]	; 0x2e

  /* Receive data from UART */
  if (HAL_UART_Receive(huart, buffer, 32, 1000) != HAL_OK) {
 800111c:	f107 010c 	add.w	r1, r7, #12
 8001120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001124:	2220      	movs	r2, #32
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f002 fceb 	bl	8003b02 <HAL_UART_Receive>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <readPMSdata+0x26>
    return 0;
 8001132:	2300      	movs	r3, #0
 8001134:	e021      	b.n	800117a <readPMSdata+0x6a>
  }

  /* Check for start byte */
  if (buffer[0] != 0x42) {
 8001136:	7b3b      	ldrb	r3, [r7, #12]
 8001138:	2b42      	cmp	r3, #66	; 0x42
 800113a:	d001      	beq.n	8001140 <readPMSdata+0x30>
    return 0;
 800113c:	2300      	movs	r3, #0
 800113e:	e01c      	b.n	800117a <readPMSdata+0x6a>
  }

  /* Calculate checksum */
  for (uint8_t i = 0; i < 30; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001146:	e00e      	b.n	8001166 <readPMSdata+0x56>
    sum += buffer[i];
 8001148:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800114c:	3330      	adds	r3, #48	; 0x30
 800114e:	443b      	add	r3, r7
 8001150:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001154:	b29a      	uxth	r2, r3
 8001156:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001158:	4413      	add	r3, r2
 800115a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  for (uint8_t i = 0; i < 30; i++) {
 800115c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001160:	3301      	adds	r3, #1
 8001162:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001166:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800116a:	2b1d      	cmp	r3, #29
 800116c:	d9ec      	bls.n	8001148 <readPMSdata+0x38>
  }*/

  /* Parse received data */
  /* Implement parsePMS5003Data() function if required */
  // Parse the received data
  parsePMS5003Data(buffer);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff feee 	bl	8000f54 <parsePMS5003Data>

  return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	3730      	adds	r7, #48	; 0x30
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <Ringbuf_init+0x3c>)
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <Ringbuf_init+0x40>)
 800118c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <Ringbuf_init+0x44>)
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <Ringbuf_init+0x48>)
 8001192:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <Ringbuf_init+0x4c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	695a      	ldr	r2, [r3, #20]
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <Ringbuf_init+0x4c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <Ringbuf_init+0x4c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <Ringbuf_init+0x4c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0220 	orr.w	r2, r2, #32
 80011b2:	60da      	str	r2, [r3, #12]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000714 	.word	0x20000714
 80011c4:	20000304 	.word	0x20000304
 80011c8:	20000718 	.word	0x20000718
 80011cc:	2000050c 	.word	0x2000050c
 80011d0:	2000020c 	.word	0x2000020c

080011d4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80011e6:	3301      	adds	r3, #1
 80011e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011ec:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d009      	beq.n	800120e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	79f9      	ldrb	r1, [r7, #7]
 8001204:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <Uart_read+0x54>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <Uart_read+0x54>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001232:	429a      	cmp	r2, r3
 8001234:	d102      	bne.n	800123c <Uart_read+0x20>
  {
    return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800123a:	e013      	b.n	8001264 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <Uart_read+0x54>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <Uart_read+0x54>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <Uart_read+0x54>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <Uart_read+0x54>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800125e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8001262:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	20000714 	.word	0x20000714

08001274 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <IsDataAvailable+0x30>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <IsDataAvailable+0x30>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800128a:	b29b      	uxth	r3, r3
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001294:	b29b      	uxth	r3, r3
 8001296:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000714 	.word	0x20000714

080012a8 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <Uart_peek+0x38>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <Uart_peek+0x38>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012bc:	429a      	cmp	r2, r3
 80012be:	d102      	bne.n	80012c6 <Uart_peek+0x1e>
  {
    return -1;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012c4:	e006      	b.n	80012d4 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <Uart_peek+0x38>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <Uart_peek+0x38>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012d2:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000714 	.word	0x20000714

080012e4 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7fe ffc4 	bl	8000280 <strlen>
 80012f8:	4603      	mov	r3, r0
 80012fa:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001300:	e01e      	b.n	8001340 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001302:	4b36      	ldr	r3, [pc, #216]	; (80013dc <Copy_upto+0xf8>)
 8001304:	6819      	ldr	r1, [r3, #0]
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <Copy_upto+0xf8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	6838      	ldr	r0, [r7, #0]
 8001312:	4403      	add	r3, r0
 8001314:	5c8a      	ldrb	r2, [r1, r2]
 8001316:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001318:	4b30      	ldr	r3, [pc, #192]	; (80013dc <Copy_upto+0xf8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <Copy_upto+0xf8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800132a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	3301      	adds	r3, #1
 8001332:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001334:	bf00      	nop
 8001336:	f7ff ff9d 	bl	8001274 <IsDataAvailable>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0fa      	beq.n	8001336 <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001340:	f7ff ffb2 	bl	80012a8 <Uart_peek>
 8001344:	4601      	mov	r1, r0
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4299      	cmp	r1, r3
 8001350:	d1d7      	bne.n	8001302 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001352:	e027      	b.n	80013a4 <Copy_upto+0xc0>
	{
		so_far++;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 800135a:	f7ff ff5f 	bl	800121c <Uart_read>
 800135e:	4601      	mov	r1, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	613a      	str	r2, [r7, #16]
 8001366:	461a      	mov	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	4413      	add	r3, r2
 800136c:	b2ca      	uxtb	r2, r1
 800136e:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d101      	bne.n	800137c <Copy_upto+0x98>
 8001378:	2301      	movs	r3, #1
 800137a:	e02a      	b.n	80013d2 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <Copy_upto+0xfc>)
 800137e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001382:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001384:	bf00      	nop
 8001386:	f7ff ff75 	bl	8001274 <IsDataAvailable>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d103      	bne.n	8001398 <Copy_upto+0xb4>
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <Copy_upto+0xfc>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f6      	bne.n	8001386 <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <Copy_upto+0xfc>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <Copy_upto+0xc0>
 80013a0:	2300      	movs	r3, #0
 80013a2:	e016      	b.n	80013d2 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 80013a4:	f7ff ff80 	bl	80012a8 <Uart_peek>
 80013a8:	4601      	mov	r1, r0
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4299      	cmp	r1, r3
 80013b4:	d0ce      	beq.n	8001354 <Copy_upto+0x70>
	}

	if (so_far != len)
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d002      	beq.n	80013c4 <Copy_upto+0xe0>
	{
		so_far = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
		goto again;
 80013c2:	e79d      	b.n	8001300 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d101      	bne.n	80013d0 <Copy_upto+0xec>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <Copy_upto+0xee>
	else return 0;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000714 	.word	0x20000714
 80013e0:	20000302 	.word	0x20000302

080013e4 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7fe ff45 	bl	8000280 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <Wait_for+0x108>)
 80013fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001400:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8001402:	bf00      	nop
 8001404:	f7ff ff36 	bl	8001274 <IsDataAvailable>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d103      	bne.n	8001416 <Wait_for+0x32>
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <Wait_for+0x108>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f6      	bne.n	8001404 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8001416:	4b35      	ldr	r3, [pc, #212]	; (80014ec <Wait_for+0x108>)
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d119      	bne.n	8001452 <Wait_for+0x6e>
 800141e:	2300      	movs	r3, #0
 8001420:	e060      	b.n	80014e4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <Wait_for+0x10c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800142a:	4b31      	ldr	r3, [pc, #196]	; (80014f0 <Wait_for+0x10c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001432:	429a      	cmp	r2, r3
 8001434:	d00b      	beq.n	800144e <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <Wait_for+0x10c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <Wait_for+0x10c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001448:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800144c:	e001      	b.n	8001452 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 800144e:	2300      	movs	r3, #0
 8001450:	e048      	b.n	80014e4 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001452:	f7ff ff29 	bl	80012a8 <Uart_peek>
 8001456:	4601      	mov	r1, r0
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4299      	cmp	r1, r3
 8001462:	d1de      	bne.n	8001422 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001464:	e027      	b.n	80014b6 <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3301      	adds	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <Wait_for+0x10c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001474:	1c5a      	adds	r2, r3, #1
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <Wait_for+0x10c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800147e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	429a      	cmp	r2, r3
 8001488:	d101      	bne.n	800148e <Wait_for+0xaa>
 800148a:	2301      	movs	r3, #1
 800148c:	e02a      	b.n	80014e4 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <Wait_for+0x108>)
 8001490:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001494:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001496:	bf00      	nop
 8001498:	f7ff feec 	bl	8001274 <IsDataAvailable>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d103      	bne.n	80014aa <Wait_for+0xc6>
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <Wait_for+0x108>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f6      	bne.n	8001498 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <Wait_for+0x108>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <Wait_for+0xd2>
 80014b2:	2300      	movs	r3, #0
 80014b4:	e016      	b.n	80014e4 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80014b6:	f7ff fef7 	bl	80012a8 <Uart_peek>
 80014ba:	4601      	mov	r1, r0
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4299      	cmp	r1, r3
 80014c6:	d0ce      	beq.n	8001466 <Wait_for+0x82>
	}

	if (so_far != len)
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d002      	beq.n	80014d6 <Wait_for+0xf2>
	{
		so_far = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
		goto again;
 80014d4:	e791      	b.n	80013fa <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d101      	bne.n	80014e2 <Wait_for+0xfe>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <Wait_for+0x100>
	else return 0;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000302 	.word	0x20000302
 80014f0:	20000714 	.word	0x20000714

080014f4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	2b00      	cmp	r3, #0
 8001514:	d013      	beq.n	800153e <Uart_isr+0x4a>
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00e      	beq.n	800153e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800152e:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <Uart_isr+0xb4>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fe4c 	bl	80011d4 <store_char>
        return;
 800153c:	e031      	b.n	80015a2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001544:	2b00      	cmp	r3, #0
 8001546:	d02c      	beq.n	80015a2 <Uart_isr+0xae>
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154e:	2b00      	cmp	r3, #0
 8001550:	d027      	beq.n	80015a2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <Uart_isr+0xb8>)
 8001554:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <Uart_isr+0xb8>)
 800155a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800155e:	429a      	cmp	r2, r3
 8001560:	d108      	bne.n	8001574 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68da      	ldr	r2, [r3, #12]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001570:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001572:	e015      	b.n	80015a0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <Uart_isr+0xb8>)
 8001576:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <Uart_isr+0xb8>)
 800157c:	5cd3      	ldrb	r3, [r2, r3]
 800157e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <Uart_isr+0xb8>)
 8001582:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001586:	3301      	adds	r3, #1
 8001588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <Uart_isr+0xb8>)
 800158e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	7bba      	ldrb	r2, [r7, #14]
 800159e:	605a      	str	r2, [r3, #4]
    	return;
 80015a0:	bf00      	nop
    }
}
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000714 	.word	0x20000714
 80015ac:	2000050c 	.word	0x2000050c

080015b0 <decodeGGA>:
int GMT = +7;
int inx =0;
int hr=0,min=0,day=0,mon=0,yr=0;
int daychange=0;

int decodeGGA(char *GGAbuffer, GGASTRUCT *gga){
 80015b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b4:	b08c      	sub	sp, #48	; 0x30
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
	inx =0;
 80015bc:	4b5b      	ldr	r3, [pc, #364]	; (800172c <decodeGGA+0x17c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i=0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(GGAbuffer[inx] != ',') inx++;
 80015c6:	e004      	b.n	80015d2 <decodeGGA+0x22>
 80015c8:	4b58      	ldr	r3, [pc, #352]	; (800172c <decodeGGA+0x17c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	4a57      	ldr	r2, [pc, #348]	; (800172c <decodeGGA+0x17c>)
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	4b56      	ldr	r3, [pc, #344]	; (800172c <decodeGGA+0x17c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b2c      	cmp	r3, #44	; 0x2c
 80015e0:	d1f2      	bne.n	80015c8 <decodeGGA+0x18>
	inx++;
 80015e2:	4b52      	ldr	r3, [pc, #328]	; (800172c <decodeGGA+0x17c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	4a50      	ldr	r2, [pc, #320]	; (800172c <decodeGGA+0x17c>)
 80015ea:	6013      	str	r3, [r2, #0]
	while(GGAbuffer[inx] != ',') inx++;
 80015ec:	e004      	b.n	80015f8 <decodeGGA+0x48>
 80015ee:	4b4f      	ldr	r3, [pc, #316]	; (800172c <decodeGGA+0x17c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a4d      	ldr	r2, [pc, #308]	; (800172c <decodeGGA+0x17c>)
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b4c      	ldr	r3, [pc, #304]	; (800172c <decodeGGA+0x17c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b2c      	cmp	r3, #44	; 0x2c
 8001606:	d1f2      	bne.n	80015ee <decodeGGA+0x3e>
	inx++;
 8001608:	4b48      	ldr	r3, [pc, #288]	; (800172c <decodeGGA+0x17c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3301      	adds	r3, #1
 800160e:	4a47      	ldr	r2, [pc, #284]	; (800172c <decodeGGA+0x17c>)
 8001610:	6013      	str	r3, [r2, #0]
	while(GGAbuffer[inx] != ',') inx++;
 8001612:	e004      	b.n	800161e <decodeGGA+0x6e>
 8001614:	4b45      	ldr	r3, [pc, #276]	; (800172c <decodeGGA+0x17c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a44      	ldr	r2, [pc, #272]	; (800172c <decodeGGA+0x17c>)
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b43      	ldr	r3, [pc, #268]	; (800172c <decodeGGA+0x17c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4413      	add	r3, r2
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b2c      	cmp	r3, #44	; 0x2c
 800162c:	d1f2      	bne.n	8001614 <decodeGGA+0x64>
	inx++;
 800162e:	4b3f      	ldr	r3, [pc, #252]	; (800172c <decodeGGA+0x17c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	4a3d      	ldr	r2, [pc, #244]	; (800172c <decodeGGA+0x17c>)
 8001636:	6013      	str	r3, [r2, #0]
	while(GGAbuffer[inx] != ',') inx++;
 8001638:	e004      	b.n	8001644 <decodeGGA+0x94>
 800163a:	4b3c      	ldr	r3, [pc, #240]	; (800172c <decodeGGA+0x17c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a3a      	ldr	r2, [pc, #232]	; (800172c <decodeGGA+0x17c>)
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <decodeGGA+0x17c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b2c      	cmp	r3, #44	; 0x2c
 8001652:	d1f2      	bne.n	800163a <decodeGGA+0x8a>
	inx++;
 8001654:	4b35      	ldr	r3, [pc, #212]	; (800172c <decodeGGA+0x17c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	4a34      	ldr	r2, [pc, #208]	; (800172c <decodeGGA+0x17c>)
 800165c:	6013      	str	r3, [r2, #0]
	while(GGAbuffer[inx] != ',') inx++;
 800165e:	e004      	b.n	800166a <decodeGGA+0xba>
 8001660:	4b32      	ldr	r3, [pc, #200]	; (800172c <decodeGGA+0x17c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	4a31      	ldr	r2, [pc, #196]	; (800172c <decodeGGA+0x17c>)
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b30      	ldr	r3, [pc, #192]	; (800172c <decodeGGA+0x17c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4413      	add	r3, r2
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b2c      	cmp	r3, #44	; 0x2c
 8001678:	d1f2      	bne.n	8001660 <decodeGGA+0xb0>
	inx++;
 800167a:	4b2c      	ldr	r3, [pc, #176]	; (800172c <decodeGGA+0x17c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a2a      	ldr	r2, [pc, #168]	; (800172c <decodeGGA+0x17c>)
 8001682:	6013      	str	r3, [r2, #0]
	while(GGAbuffer[inx] != ',') inx++;
 8001684:	e004      	b.n	8001690 <decodeGGA+0xe0>
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <decodeGGA+0x17c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	3301      	adds	r3, #1
 800168c:	4a27      	ldr	r2, [pc, #156]	; (800172c <decodeGGA+0x17c>)
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b26      	ldr	r3, [pc, #152]	; (800172c <decodeGGA+0x17c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b2c      	cmp	r3, #44	; 0x2c
 800169e:	d1f2      	bne.n	8001686 <decodeGGA+0xd6>
	inx++;
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <decodeGGA+0x17c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	4a21      	ldr	r2, [pc, #132]	; (800172c <decodeGGA+0x17c>)
 80016a8:	6013      	str	r3, [r2, #0]
	if((GGAbuffer[inx]== '1') || (GGAbuffer[inx]== '2') || (GGAbuffer[inx]== '6')){
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <decodeGGA+0x17c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b31      	cmp	r3, #49	; 0x31
 80016b8:	d00f      	beq.n	80016da <decodeGGA+0x12a>
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <decodeGGA+0x17c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4413      	add	r3, r2
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b32      	cmp	r3, #50	; 0x32
 80016c8:	d007      	beq.n	80016da <decodeGGA+0x12a>
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <decodeGGA+0x17c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b36      	cmp	r3, #54	; 0x36
 80016d8:	d106      	bne.n	80016e8 <decodeGGA+0x138>
		gga->isfixValid =1;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	61da      	str	r2, [r3, #28]
		inx=0;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <decodeGGA+0x17c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
	}else{
		gga->isfixValid=0;
		return 1;
	}
	while(GGAbuffer[inx]!= ',')inx++;
 80016e6:	e009      	b.n	80016fc <decodeGGA+0x14c>
		gga->isfixValid=0;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
		return 1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e355      	b.n	8001d9e <decodeGGA+0x7ee>
	while(GGAbuffer[inx]!= ',')inx++;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <decodeGGA+0x17c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	4a0c      	ldr	r2, [pc, #48]	; (800172c <decodeGGA+0x17c>)
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b0b      	ldr	r3, [pc, #44]	; (800172c <decodeGGA+0x17c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b2c      	cmp	r3, #44	; 0x2c
 800170a:	d1f2      	bne.n	80016f2 <decodeGGA+0x142>

	inx++;   // reach the first number in time
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <decodeGGA+0x17c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	4a06      	ldr	r2, [pc, #24]	; (800172c <decodeGGA+0x17c>)
 8001714:	6013      	str	r3, [r2, #0]
		memset(buffer, '\0', 12);
 8001716:	f107 030c 	add.w	r3, r7, #12
 800171a:	220c      	movs	r2, #12
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f003 ff84 	bl	800562c <memset>
		i=0;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001728:	e016      	b.n	8001758 <decodeGGA+0x1a8>
 800172a:	bf00      	nop
 800172c:	2000071c 	.word	0x2000071c
		{
			buffer[i] = GGAbuffer[inx];
 8001730:	4bad      	ldr	r3, [pc, #692]	; (80019e8 <decodeGGA+0x438>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	7819      	ldrb	r1, [r3, #0]
 800173c:	f107 020c 	add.w	r2, r7, #12
 8001740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001742:	4413      	add	r3, r2
 8001744:	460a      	mov	r2, r1
 8001746:	701a      	strb	r2, [r3, #0]
			i++;
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174a:	3301      	adds	r3, #1
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
			inx++;
 800174e:	4ba6      	ldr	r3, [pc, #664]	; (80019e8 <decodeGGA+0x438>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	4aa4      	ldr	r2, [pc, #656]	; (80019e8 <decodeGGA+0x438>)
 8001756:	6013      	str	r3, [r2, #0]
		while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001758:	4ba3      	ldr	r3, [pc, #652]	; (80019e8 <decodeGGA+0x438>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b2c      	cmp	r3, #44	; 0x2c
 8001766:	d1e3      	bne.n	8001730 <decodeGGA+0x180>
		}

		hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001768:	f107 030c 	add.w	r3, r7, #12
 800176c:	4618      	mov	r0, r3
 800176e:	f003 f985 	bl	8004a7c <atoi>
 8001772:	4603      	mov	r3, r0
 8001774:	4a9d      	ldr	r2, [pc, #628]	; (80019ec <decodeGGA+0x43c>)
 8001776:	fb82 1203 	smull	r1, r2, r2, r3
 800177a:	1312      	asrs	r2, r2, #12
 800177c:	17db      	asrs	r3, r3, #31
 800177e:	1ad2      	subs	r2, r2, r3
 8001780:	4b9b      	ldr	r3, [pc, #620]	; (80019f0 <decodeGGA+0x440>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	499b      	ldr	r1, [pc, #620]	; (80019f4 <decodeGGA+0x444>)
 8001786:	fb81 0103 	smull	r0, r1, r1, r3
 800178a:	1149      	asrs	r1, r1, #5
 800178c:	17db      	asrs	r3, r3, #31
 800178e:	1acb      	subs	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	4a99      	ldr	r2, [pc, #612]	; (80019f8 <decodeGGA+0x448>)
 8001794:	6013      	str	r3, [r2, #0]

		min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	4618      	mov	r0, r3
 800179c:	f003 f96e 	bl	8004a7c <atoi>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4a94      	ldr	r2, [pc, #592]	; (80019f4 <decodeGGA+0x444>)
 80017a4:	fb82 1203 	smull	r1, r2, r2, r3
 80017a8:	1152      	asrs	r2, r2, #5
 80017aa:	17db      	asrs	r3, r3, #31
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	4a91      	ldr	r2, [pc, #580]	; (80019f4 <decodeGGA+0x444>)
 80017b0:	fb82 1203 	smull	r1, r2, r2, r3
 80017b4:	1151      	asrs	r1, r2, #5
 80017b6:	17da      	asrs	r2, r3, #31
 80017b8:	1a8a      	subs	r2, r1, r2
 80017ba:	2164      	movs	r1, #100	; 0x64
 80017bc:	fb01 f202 	mul.w	r2, r1, r2
 80017c0:	1a9a      	subs	r2, r3, r2
 80017c2:	4b8b      	ldr	r3, [pc, #556]	; (80019f0 <decodeGGA+0x440>)
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <decodeGGA+0x444>)
 80017c8:	fb83 0301 	smull	r0, r3, r3, r1
 80017cc:	1158      	asrs	r0, r3, #5
 80017ce:	17cb      	asrs	r3, r1, #31
 80017d0:	1ac3      	subs	r3, r0, r3
 80017d2:	2064      	movs	r0, #100	; 0x64
 80017d4:	fb00 f303 	mul.w	r3, r0, r3
 80017d8:	1acb      	subs	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	4a87      	ldr	r2, [pc, #540]	; (80019fc <decodeGGA+0x44c>)
 80017de:	6013      	str	r3, [r2, #0]

		// adjust time.. This part still needs to be tested
		if (min > 59)
 80017e0:	4b86      	ldr	r3, [pc, #536]	; (80019fc <decodeGGA+0x44c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b3b      	cmp	r3, #59	; 0x3b
 80017e6:	dd09      	ble.n	80017fc <decodeGGA+0x24c>
		{
			min = min-60;
 80017e8:	4b84      	ldr	r3, [pc, #528]	; (80019fc <decodeGGA+0x44c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3b3c      	subs	r3, #60	; 0x3c
 80017ee:	4a83      	ldr	r2, [pc, #524]	; (80019fc <decodeGGA+0x44c>)
 80017f0:	6013      	str	r3, [r2, #0]
			hr++;
 80017f2:	4b81      	ldr	r3, [pc, #516]	; (80019f8 <decodeGGA+0x448>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	4a7f      	ldr	r2, [pc, #508]	; (80019f8 <decodeGGA+0x448>)
 80017fa:	6013      	str	r3, [r2, #0]
		}
		if (hr<0)
 80017fc:	4b7e      	ldr	r3, [pc, #504]	; (80019f8 <decodeGGA+0x448>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	da09      	bge.n	8001818 <decodeGGA+0x268>
		{
			hr=24+hr;
 8001804:	4b7c      	ldr	r3, [pc, #496]	; (80019f8 <decodeGGA+0x448>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3318      	adds	r3, #24
 800180a:	4a7b      	ldr	r2, [pc, #492]	; (80019f8 <decodeGGA+0x448>)
 800180c:	6013      	str	r3, [r2, #0]
			daychange--;
 800180e:	4b7c      	ldr	r3, [pc, #496]	; (8001a00 <decodeGGA+0x450>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	3b01      	subs	r3, #1
 8001814:	4a7a      	ldr	r2, [pc, #488]	; (8001a00 <decodeGGA+0x450>)
 8001816:	6013      	str	r3, [r2, #0]
		}
		if (hr>=24)
 8001818:	4b77      	ldr	r3, [pc, #476]	; (80019f8 <decodeGGA+0x448>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b17      	cmp	r3, #23
 800181e:	dd09      	ble.n	8001834 <decodeGGA+0x284>
		{
			hr=hr-24;
 8001820:	4b75      	ldr	r3, [pc, #468]	; (80019f8 <decodeGGA+0x448>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3b18      	subs	r3, #24
 8001826:	4a74      	ldr	r2, [pc, #464]	; (80019f8 <decodeGGA+0x448>)
 8001828:	6013      	str	r3, [r2, #0]
			daychange++;
 800182a:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <decodeGGA+0x450>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	4a73      	ldr	r2, [pc, #460]	; (8001a00 <decodeGGA+0x450>)
 8001832:	6013      	str	r3, [r2, #0]
		}

		// Store the time in the GGA structure
		gga->tim.hour = hr;
 8001834:	4b70      	ldr	r3, [pc, #448]	; (80019f8 <decodeGGA+0x448>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	611a      	str	r2, [r3, #16]
		gga->tim.min = min;
 800183c:	4b6f      	ldr	r3, [pc, #444]	; (80019fc <decodeGGA+0x44c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	615a      	str	r2, [r3, #20]
		gga->tim.sec = atoi(buffer)%100;
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	4618      	mov	r0, r3
 800184a:	f003 f917 	bl	8004a7c <atoi>
 800184e:	4602      	mov	r2, r0
 8001850:	4b68      	ldr	r3, [pc, #416]	; (80019f4 <decodeGGA+0x444>)
 8001852:	fb83 1302 	smull	r1, r3, r3, r2
 8001856:	1159      	asrs	r1, r3, #5
 8001858:	17d3      	asrs	r3, r2, #31
 800185a:	1acb      	subs	r3, r1, r3
 800185c:	2164      	movs	r1, #100	; 0x64
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	6193      	str	r3, [r2, #24]
		/***************** Get LATITUDE  **********************/
		inx++;   // Reach the first number in the lattitude
 8001868:	4b5f      	ldr	r3, [pc, #380]	; (80019e8 <decodeGGA+0x438>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3301      	adds	r3, #1
 800186e:	4a5e      	ldr	r2, [pc, #376]	; (80019e8 <decodeGGA+0x438>)
 8001870:	6013      	str	r3, [r2, #0]
		memset(buffer, '\0', 12);
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	220c      	movs	r2, #12
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f003 fed6 	bl	800562c <memset>
		i=0;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
		while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001884:	e013      	b.n	80018ae <decodeGGA+0x2fe>
		{
			buffer[i] = GGAbuffer[inx];
 8001886:	4b58      	ldr	r3, [pc, #352]	; (80019e8 <decodeGGA+0x438>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4413      	add	r3, r2
 8001890:	7819      	ldrb	r1, [r3, #0]
 8001892:	f107 020c 	add.w	r2, r7, #12
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	4413      	add	r3, r2
 800189a:	460a      	mov	r2, r1
 800189c:	701a      	strb	r2, [r3, #0]
			i++;
 800189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a0:	3301      	adds	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			inx++;
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <decodeGGA+0x438>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	4a4f      	ldr	r2, [pc, #316]	; (80019e8 <decodeGGA+0x438>)
 80018ac:	6013      	str	r3, [r2, #0]
		while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 80018ae:	4b4e      	ldr	r3, [pc, #312]	; (80019e8 <decodeGGA+0x438>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b2c      	cmp	r3, #44	; 0x2c
 80018bc:	d1e3      	bne.n	8001886 <decodeGGA+0x2d6>
		}
		if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fcdc 	bl	8000280 <strlen>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b05      	cmp	r3, #5
 80018cc:	d801      	bhi.n	80018d2 <decodeGGA+0x322>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e265      	b.n	8001d9e <decodeGGA+0x7ee>
		int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 f8d0 	bl	8004a7c <atoi>
 80018dc:	4603      	mov	r3, r0
 80018de:	84fb      	strh	r3, [r7, #38]	; 0x26
		int j = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
		while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 80018e4:	e002      	b.n	80018ec <decodeGGA+0x33c>
 80018e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e8:	3301      	adds	r3, #1
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ec:	f107 020c 	add.w	r2, r7, #12
 80018f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b2e      	cmp	r3, #46	; 0x2e
 80018f8:	d1f5      	bne.n	80018e6 <decodeGGA+0x336>
		j++;
 80018fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fc:	3301      	adds	r3, #1
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
		int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fcbb 	bl	8000280 <strlen>
 800190a:	4602      	mov	r2, r0
 800190c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	623b      	str	r3, [r7, #32]
		int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001914:	f107 020c 	add.w	r2, r7, #12
 8001918:	4413      	add	r3, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f003 f8ae 	bl	8004a7c <atoi>
 8001920:	61f8      	str	r0, [r7, #28]
		float lat = (int)(num/100) + (((num%100) + (dec/pow(10, declen)))/60);  // 1234.56789 = 12.3456789
 8001922:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001926:	4a33      	ldr	r2, [pc, #204]	; (80019f4 <decodeGGA+0x444>)
 8001928:	fb82 1203 	smull	r1, r2, r2, r3
 800192c:	1152      	asrs	r2, r2, #5
 800192e:	17db      	asrs	r3, r3, #31
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	b21b      	sxth	r3, r3
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fdfd 	bl	8000534 <__aeabi_i2d>
 800193a:	4604      	mov	r4, r0
 800193c:	460d      	mov	r5, r1
 800193e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001942:	4a2c      	ldr	r2, [pc, #176]	; (80019f4 <decodeGGA+0x444>)
 8001944:	fb82 1203 	smull	r1, r2, r2, r3
 8001948:	1151      	asrs	r1, r2, #5
 800194a:	17da      	asrs	r2, r3, #31
 800194c:	1a8a      	subs	r2, r1, r2
 800194e:	2164      	movs	r1, #100	; 0x64
 8001950:	fb01 f202 	mul.w	r2, r1, r2
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	b21b      	sxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fdeb 	bl	8000534 <__aeabi_i2d>
 800195e:	4680      	mov	r8, r0
 8001960:	4689      	mov	r9, r1
 8001962:	69f8      	ldr	r0, [r7, #28]
 8001964:	f7fe fde6 	bl	8000534 <__aeabi_i2d>
 8001968:	4682      	mov	sl, r0
 800196a:	468b      	mov	fp, r1
 800196c:	6a38      	ldr	r0, [r7, #32]
 800196e:	f7fe fde1 	bl	8000534 <__aeabi_i2d>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	ec43 2b11 	vmov	d1, r2, r3
 800197a:	ed9f 0b19 	vldr	d0, [pc, #100]	; 80019e0 <decodeGGA+0x430>
 800197e:	f005 ff91 	bl	80078a4 <pow>
 8001982:	ec53 2b10 	vmov	r2, r3, d0
 8001986:	4650      	mov	r0, sl
 8001988:	4659      	mov	r1, fp
 800198a:	f7fe ff67 	bl	800085c <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4640      	mov	r0, r8
 8001994:	4649      	mov	r1, r9
 8001996:	f7fe fc81 	bl	800029c <__adddf3>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <decodeGGA+0x454>)
 80019a8:	f7fe ff58 	bl	800085c <__aeabi_ddiv>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4620      	mov	r0, r4
 80019b2:	4629      	mov	r1, r5
 80019b4:	f7fe fc72 	bl	800029c <__adddf3>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f8fa 	bl	8000bb8 <__aeabi_d2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	61bb      	str	r3, [r7, #24]
		if(lat > 500) return 2;
 80019c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019cc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001a08 <decodeGGA+0x458>
 80019d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	dd18      	ble.n	8001a0c <decodeGGA+0x45c>
 80019da:	2302      	movs	r3, #2
 80019dc:	e1df      	b.n	8001d9e <decodeGGA+0x7ee>
 80019de:	bf00      	nop
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40240000 	.word	0x40240000
 80019e8:	2000071c 	.word	0x2000071c
 80019ec:	68db8bad 	.word	0x68db8bad
 80019f0:	20000000 	.word	0x20000000
 80019f4:	51eb851f 	.word	0x51eb851f
 80019f8:	20000720 	.word	0x20000720
 80019fc:	20000724 	.word	0x20000724
 8001a00:	20000728 	.word	0x20000728
 8001a04:	404e0000 	.word	0x404e0000
 8001a08:	43fa0000 	.word	0x43fa0000
		gga->location.latitude = lat;  // save the lattitude data into the strucure
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	601a      	str	r2, [r3, #0]
		inx++;
 8001a12:	4bb1      	ldr	r3, [pc, #708]	; (8001cd8 <decodeGGA+0x728>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	4aaf      	ldr	r2, [pc, #700]	; (8001cd8 <decodeGGA+0x728>)
 8001a1a:	6013      	str	r3, [r2, #0]
		gga->location.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001a1c:	4bae      	ldr	r3, [pc, #696]	; (8001cd8 <decodeGGA+0x728>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	711a      	strb	r2, [r3, #4]
		//Grt long
		inx++;
 8001a2c:	4baa      	ldr	r3, [pc, #680]	; (8001cd8 <decodeGGA+0x728>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	4aa9      	ldr	r2, [pc, #676]	; (8001cd8 <decodeGGA+0x728>)
 8001a34:	6013      	str	r3, [r2, #0]
		inx++;
 8001a36:	4ba8      	ldr	r3, [pc, #672]	; (8001cd8 <decodeGGA+0x728>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	4aa6      	ldr	r2, [pc, #664]	; (8001cd8 <decodeGGA+0x728>)
 8001a3e:	6013      	str	r3, [r2, #0]
		memset(buffer, '\0',12);
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	220c      	movs	r2, #12
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fdef 	bl	800562c <memset>
		i=0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(GGAbuffer[inx]!=','){
 8001a52:	e013      	b.n	8001a7c <decodeGGA+0x4cc>
			buffer[i] = GGAbuffer[inx];
 8001a54:	4ba0      	ldr	r3, [pc, #640]	; (8001cd8 <decodeGGA+0x728>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	7819      	ldrb	r1, [r3, #0]
 8001a60:	f107 020c 	add.w	r2, r7, #12
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	4413      	add	r3, r2
 8001a68:	460a      	mov	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]
			i++;
 8001a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a6e:	3301      	adds	r3, #1
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
			inx++;
 8001a72:	4b99      	ldr	r3, [pc, #612]	; (8001cd8 <decodeGGA+0x728>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	4a97      	ldr	r2, [pc, #604]	; (8001cd8 <decodeGGA+0x728>)
 8001a7a:	6013      	str	r3, [r2, #0]
		while(GGAbuffer[inx]!=','){
 8001a7c:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <decodeGGA+0x728>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b2c      	cmp	r3, #44	; 0x2c
 8001a8a:	d1e3      	bne.n	8001a54 <decodeGGA+0x4a4>
		}
		num = (atoi(buffer));
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fff3 	bl	8004a7c <atoi>
 8001a96:	4603      	mov	r3, r0
 8001a98:	84fb      	strh	r3, [r7, #38]	; 0x26
		j=0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
		while(buffer[j]!='.')j++;
 8001a9e:	e002      	b.n	8001aa6 <decodeGGA+0x4f6>
 8001aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa6:	f107 020c 	add.w	r2, r7, #12
 8001aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aac:	4413      	add	r3, r2
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8001ab2:	d1f5      	bne.n	8001aa0 <decodeGGA+0x4f0>
		j++;
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
		declen = (strlen(buffer))-j;
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fbde 	bl	8000280 <strlen>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	623b      	str	r3, [r7, #32]
		dec =  atoi ((char *)buffer+j);
 8001acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ace:	f107 020c 	add.w	r2, r7, #12
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 ffd1 	bl	8004a7c <atoi>
 8001ada:	61f8      	str	r0, [r7, #28]
		lat = (float)((int)(num/100) + (((num%100) + (dec/pow(10, declen)))/60));
 8001adc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001ae0:	4a7e      	ldr	r2, [pc, #504]	; (8001cdc <decodeGGA+0x72c>)
 8001ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae6:	1152      	asrs	r2, r2, #5
 8001ae8:	17db      	asrs	r3, r3, #31
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fd20 	bl	8000534 <__aeabi_i2d>
 8001af4:	4604      	mov	r4, r0
 8001af6:	460d      	mov	r5, r1
 8001af8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001afc:	4a77      	ldr	r2, [pc, #476]	; (8001cdc <decodeGGA+0x72c>)
 8001afe:	fb82 1203 	smull	r1, r2, r2, r3
 8001b02:	1151      	asrs	r1, r2, #5
 8001b04:	17da      	asrs	r2, r3, #31
 8001b06:	1a8a      	subs	r2, r1, r2
 8001b08:	2164      	movs	r1, #100	; 0x64
 8001b0a:	fb01 f202 	mul.w	r2, r1, r2
 8001b0e:	1a9b      	subs	r3, r3, r2
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd0e 	bl	8000534 <__aeabi_i2d>
 8001b18:	4680      	mov	r8, r0
 8001b1a:	4689      	mov	r9, r1
 8001b1c:	69f8      	ldr	r0, [r7, #28]
 8001b1e:	f7fe fd09 	bl	8000534 <__aeabi_i2d>
 8001b22:	4682      	mov	sl, r0
 8001b24:	468b      	mov	fp, r1
 8001b26:	6a38      	ldr	r0, [r7, #32]
 8001b28:	f7fe fd04 	bl	8000534 <__aeabi_i2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	ec43 2b11 	vmov	d1, r2, r3
 8001b34:	ed9f 0b66 	vldr	d0, [pc, #408]	; 8001cd0 <decodeGGA+0x720>
 8001b38:	f005 feb4 	bl	80078a4 <pow>
 8001b3c:	ec53 2b10 	vmov	r2, r3, d0
 8001b40:	4650      	mov	r0, sl
 8001b42:	4659      	mov	r1, fp
 8001b44:	f7fe fe8a 	bl	800085c <__aeabi_ddiv>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4640      	mov	r0, r8
 8001b4e:	4649      	mov	r1, r9
 8001b50:	f7fe fba4 	bl	800029c <__adddf3>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b5f      	ldr	r3, [pc, #380]	; (8001ce0 <decodeGGA+0x730>)
 8001b62:	f7fe fe7b 	bl	800085c <__aeabi_ddiv>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	f7fe fb95 	bl	800029c <__adddf3>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7ff f81d 	bl	8000bb8 <__aeabi_d2f>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	61bb      	str	r3, [r7, #24]
		if(lat > 500) return 2;
 8001b82:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b86:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001ce4 <decodeGGA+0x734>
 8001b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	dd01      	ble.n	8001b98 <decodeGGA+0x5e8>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e102      	b.n	8001d9e <decodeGGA+0x7ee>
		gga->location.longitude=lat;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	609a      	str	r2, [r3, #8]
		inx++;
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <decodeGGA+0x728>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a4c      	ldr	r2, [pc, #304]	; (8001cd8 <decodeGGA+0x728>)
 8001ba6:	6013      	str	r3, [r2, #0]
		gga->location.EW=GGAbuffer[inx];
 8001ba8:	4b4b      	ldr	r3, [pc, #300]	; (8001cd8 <decodeGGA+0x728>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	731a      	strb	r2, [r3, #12]

		inx++;
 8001bb8:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <decodeGGA+0x728>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a46      	ldr	r2, [pc, #280]	; (8001cd8 <decodeGGA+0x728>)
 8001bc0:	6013      	str	r3, [r2, #0]
		inx++;
 8001bc2:	4b45      	ldr	r3, [pc, #276]	; (8001cd8 <decodeGGA+0x728>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	4a43      	ldr	r2, [pc, #268]	; (8001cd8 <decodeGGA+0x728>)
 8001bca:	6013      	str	r3, [r2, #0]
		inx++;
 8001bcc:	4b42      	ldr	r3, [pc, #264]	; (8001cd8 <decodeGGA+0x728>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4a41      	ldr	r2, [pc, #260]	; (8001cd8 <decodeGGA+0x728>)
 8001bd4:	6013      	str	r3, [r2, #0]

		inx++;
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <decodeGGA+0x728>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a3e      	ldr	r2, [pc, #248]	; (8001cd8 <decodeGGA+0x728>)
 8001bde:	6013      	str	r3, [r2, #0]
		memset(buffer, '\0',12);
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	220c      	movs	r2, #12
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fd1f 	bl	800562c <memset>
		i=0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(GGAbuffer[inx]!=','){
 8001bf2:	e013      	b.n	8001c1c <decodeGGA+0x66c>
			buffer[i]= GGAbuffer[inx];
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <decodeGGA+0x728>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	7819      	ldrb	r1, [r3, #0]
 8001c00:	f107 020c 	add.w	r2, r7, #12
 8001c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c06:	4413      	add	r3, r2
 8001c08:	460a      	mov	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
			i++;
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	3301      	adds	r3, #1
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
			inx++;
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <decodeGGA+0x728>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a2f      	ldr	r2, [pc, #188]	; (8001cd8 <decodeGGA+0x728>)
 8001c1a:	6013      	str	r3, [r2, #0]
		while(GGAbuffer[inx]!=','){
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <decodeGGA+0x728>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b2c      	cmp	r3, #44	; 0x2c
 8001c2a:	d1e3      	bne.n	8001bf4 <decodeGGA+0x644>
		}
		gga->numofsat = atoi(buffer);
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 ff23 	bl	8004a7c <atoi>
 8001c36:	4602      	mov	r2, r0
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28

		inx++;
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <decodeGGA+0x728>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <decodeGGA+0x728>)
 8001c44:	6013      	str	r3, [r2, #0]
		while(GGAbuffer[inx] != ',')inx++;
 8001c46:	e004      	b.n	8001c52 <decodeGGA+0x6a2>
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <decodeGGA+0x728>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <decodeGGA+0x728>)
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <decodeGGA+0x728>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b2c      	cmp	r3, #44	; 0x2c
 8001c60:	d1f2      	bne.n	8001c48 <decodeGGA+0x698>

		inx++;
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <decodeGGA+0x728>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <decodeGGA+0x728>)
 8001c6a:	6013      	str	r3, [r2, #0]
		memset(buffer,'\0',12);
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	220c      	movs	r2, #12
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fcd9 	bl	800562c <memset>
		i=0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(GGAbuffer[inx]!=','){
 8001c7e:	e013      	b.n	8001ca8 <decodeGGA+0x6f8>
			buffer[i] = GGAbuffer[inx];
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <decodeGGA+0x728>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	7819      	ldrb	r1, [r3, #0]
 8001c8c:	f107 020c 	add.w	r2, r7, #12
 8001c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c92:	4413      	add	r3, r2
 8001c94:	460a      	mov	r2, r1
 8001c96:	701a      	strb	r2, [r3, #0]
			i++;
 8001c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
			inx++;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <decodeGGA+0x728>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <decodeGGA+0x728>)
 8001ca6:	6013      	str	r3, [r2, #0]
		while(GGAbuffer[inx]!=','){
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <decodeGGA+0x728>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b2c      	cmp	r3, #44	; 0x2c
 8001cb6:	d1e3      	bne.n	8001c80 <decodeGGA+0x6d0>
		}
		num = atoi(buffer);
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fedd 	bl	8004a7c <atoi>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	84fb      	strh	r3, [r7, #38]	; 0x26
		j=0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
		while(buffer[j]!='.')j++;
 8001cca:	e010      	b.n	8001cee <decodeGGA+0x73e>
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	00000000 	.word	0x00000000
 8001cd4:	40240000 	.word	0x40240000
 8001cd8:	2000071c 	.word	0x2000071c
 8001cdc:	51eb851f 	.word	0x51eb851f
 8001ce0:	404e0000 	.word	0x404e0000
 8001ce4:	43fa0000 	.word	0x43fa0000
 8001ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cea:	3301      	adds	r3, #1
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cee:	f107 020c 	add.w	r2, r7, #12
 8001cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8001cfa:	d1f5      	bne.n	8001ce8 <decodeGGA+0x738>
		j++;
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfe:	3301      	adds	r3, #1
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
		declen = (strlen(buffer))-j;
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe faba 	bl	8000280 <strlen>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	623b      	str	r3, [r7, #32]
		dec =  atoi ((char *)buffer+j);
 8001d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d16:	f107 020c 	add.w	r2, r7, #12
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 fead 	bl	8004a7c <atoi>
 8001d22:	61f8      	str	r0, [r7, #28]
		lat = (num)+(dec/pow(10, (declen)));
 8001d24:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc03 	bl	8000534 <__aeabi_i2d>
 8001d2e:	4604      	mov	r4, r0
 8001d30:	460d      	mov	r5, r1
 8001d32:	69f8      	ldr	r0, [r7, #28]
 8001d34:	f7fe fbfe 	bl	8000534 <__aeabi_i2d>
 8001d38:	4680      	mov	r8, r0
 8001d3a:	4689      	mov	r9, r1
 8001d3c:	6a38      	ldr	r0, [r7, #32]
 8001d3e:	f7fe fbf9 	bl	8000534 <__aeabi_i2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	ec43 2b11 	vmov	d1, r2, r3
 8001d4a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001da8 <decodeGGA+0x7f8>
 8001d4e:	f005 fda9 	bl	80078a4 <pow>
 8001d52:	ec53 2b10 	vmov	r2, r3, d0
 8001d56:	4640      	mov	r0, r8
 8001d58:	4649      	mov	r1, r9
 8001d5a:	f7fe fd7f 	bl	800085c <__aeabi_ddiv>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4620      	mov	r0, r4
 8001d64:	4629      	mov	r1, r5
 8001d66:	f7fe fa99 	bl	800029c <__adddf3>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7fe ff21 	bl	8000bb8 <__aeabi_d2f>
 8001d76:	4603      	mov	r3, r0
 8001d78:	61bb      	str	r3, [r7, #24]
		gga->alt.altitude=lat;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	621a      	str	r2, [r3, #32]
		inx++;
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <decodeGGA+0x800>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3301      	adds	r3, #1
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <decodeGGA+0x800>)
 8001d88:	6013      	str	r3, [r2, #0]
		gga->alt.unit= GGAbuffer[inx];
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <decodeGGA+0x800>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4413      	add	r3, r2
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return 0;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3730      	adds	r7, #48	; 0x30
 8001da2:	46bd      	mov	sp, r7
 8001da4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001da8:	00000000 	.word	0x00000000
 8001dac:	40240000 	.word	0x40240000
 8001db0:	2000071c 	.word	0x2000071c

08001db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db4:	b5b0      	push	{r4, r5, r7, lr}
 8001db6:	b0fe      	sub	sp, #504	; 0x1f8
 8001db8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dba:	f000 fd25 	bl	8002808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbe:	f000 f98b 	bl	80020d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc2:	f000 fa6f 	bl	80022a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dc6:	f000 fa19 	bl	80021fc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001dca:	f000 f9ed 	bl	80021a8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001dce:	f000 fa3f 	bl	8002250 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 8001dd2:	f7ff f9d7 	bl	8001184 <Ringbuf_init>
  HAL_Delay(500);
 8001dd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dda:	f000 fd87 	bl	80028ec <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if (Wait_for("GGA") == 1)
 8001dde:	48ad      	ldr	r0, [pc, #692]	; (8002094 <main+0x2e0>)
 8001de0:	f7ff fb00 	bl	80013e4 <Wait_for>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d115      	bne.n	8001e16 <main+0x62>
	  {
		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 8001dea:	4bab      	ldr	r3, [pc, #684]	; (8002098 <main+0x2e4>)
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	601a      	str	r2, [r3, #0]
		  Copy_upto("*", GGA);
 8001df2:	49aa      	ldr	r1, [pc, #680]	; (800209c <main+0x2e8>)
 8001df4:	48aa      	ldr	r0, [pc, #680]	; (80020a0 <main+0x2ec>)
 8001df6:	f7ff fa75 	bl	80012e4 <Copy_upto>
		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 8001dfa:	49aa      	ldr	r1, [pc, #680]	; (80020a4 <main+0x2f0>)
 8001dfc:	48a7      	ldr	r0, [pc, #668]	; (800209c <main+0x2e8>)
 8001dfe:	f7ff fbd7 	bl	80015b0 <decodeGGA>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d103      	bne.n	8001e10 <main+0x5c>
 8001e08:	4ba7      	ldr	r3, [pc, #668]	; (80020a8 <main+0x2f4>)
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e002      	b.n	8001e16 <main+0x62>
		  else flagGGA = 1;  // 1 indicates the data is invalid
 8001e10:	4ba5      	ldr	r3, [pc, #660]	; (80020a8 <main+0x2f4>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
	  }
	  //char printBuffer[200];
	  //sprintf(printBuffer, "latitude: %.6f, longitude: %.6f\r\n", &(&gpsData.ggastruct)->location.latitude, &(&gpsData.ggastruct)->location.longitude);
	  //HAL_UART_Transmit(&huart2, (uint8_t*)printBuffer, strlen(printBuffer), HAL_MAX_DELAY);
	  if ((flagGGA == 2 && data.pm25_standard != 0))
 8001e16:	4ba4      	ldr	r3, [pc, #656]	; (80020a8 <main+0x2f4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d175      	bne.n	8001f0a <main+0x156>
 8001e1e:	4ba3      	ldr	r3, [pc, #652]	; (80020ac <main+0x2f8>)
 8001e20:	889b      	ldrh	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d071      	beq.n	8001f0a <main+0x156>
		  {
			  sprintf(printBuffer, "latitude: %.6f, longitude: %.6f\r\n", gpsData.ggastruct.location.latitude, gpsData.ggastruct.location.longitude);
 8001e26:	4b9f      	ldr	r3, [pc, #636]	; (80020a4 <main+0x2f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fb94 	bl	8000558 <__aeabi_f2d>
 8001e30:	4604      	mov	r4, r0
 8001e32:	460d      	mov	r5, r1
 8001e34:	4b9b      	ldr	r3, [pc, #620]	; (80020a4 <main+0x2f0>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb8d 	bl	8000558 <__aeabi_f2d>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8001e46:	e9cd 2300 	strd	r2, r3, [sp]
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	462b      	mov	r3, r5
 8001e4e:	4998      	ldr	r1, [pc, #608]	; (80020b0 <main+0x2fc>)
 8001e50:	f003 fa7e 	bl	8005350 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)printBuffer, strlen(printBuffer), HAL_MAX_DELAY);
 8001e54:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fa11 	bl	8000280 <strlen>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e6a:	4892      	ldr	r0, [pc, #584]	; (80020b4 <main+0x300>)
 8001e6c:	f001 fdbe 	bl	80039ec <HAL_UART_Transmit>
			  sprintf(printBuffer, "PM1: %d, PM2.5: %d, PM10: %d\r\n", data.pm10_standard, data.pm25_standard, data.pm100_standard);
 8001e70:	4b8e      	ldr	r3, [pc, #568]	; (80020ac <main+0x2f8>)
 8001e72:	885b      	ldrh	r3, [r3, #2]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b8d      	ldr	r3, [pc, #564]	; (80020ac <main+0x2f8>)
 8001e78:	889b      	ldrh	r3, [r3, #4]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4b8b      	ldr	r3, [pc, #556]	; (80020ac <main+0x2f8>)
 8001e7e:	88db      	ldrh	r3, [r3, #6]
 8001e80:	f507 708e 	add.w	r0, r7, #284	; 0x11c
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	460b      	mov	r3, r1
 8001e88:	498b      	ldr	r1, [pc, #556]	; (80020b8 <main+0x304>)
 8001e8a:	f003 fa61 	bl	8005350 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t *)printBuffer, strlen(printBuffer), HAL_MAX_DELAY);
 8001e8e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe f9f4 	bl	8000280 <strlen>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea4:	4883      	ldr	r0, [pc, #524]	; (80020b4 <main+0x300>)
 8001ea6:	f001 fda1 	bl	80039ec <HAL_UART_Transmit>
//
//			  sprintf(printBuffer, "Temp: %.1f, Hum: %.1f\r\n", temp, hum);
//			  HAL_UART_Transmit(&huart2, (uint8_t *)printBuffer, strlen(printBuffer), HAL_MAX_DELAY);

			  //sprintf(sendBuffer, "%.6f,%.6f,%d,%.1f%.1f\r\n	", gpsData.ggastruct.location.latitude, gpsData.ggastruct.location.longitude, data.pm25_standard, temp, hum);
			  sprintf(sendBuffer, "%.6f,%.6f,%d\r\n	", gpsData.ggastruct.location.latitude, gpsData.ggastruct.location.longitude, data.pm25_standard);
 8001eaa:	4b7e      	ldr	r3, [pc, #504]	; (80020a4 <main+0x2f0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb52 	bl	8000558 <__aeabi_f2d>
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	460d      	mov	r5, r1
 8001eb8:	4b7a      	ldr	r3, [pc, #488]	; (80020a4 <main+0x2f0>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb4b 	bl	8000558 <__aeabi_f2d>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4979      	ldr	r1, [pc, #484]	; (80020ac <main+0x2f8>)
 8001ec8:	8889      	ldrh	r1, [r1, #4]
 8001eca:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001ece:	9102      	str	r1, [sp, #8]
 8001ed0:	e9cd 2300 	strd	r2, r3, [sp]
 8001ed4:	4622      	mov	r2, r4
 8001ed6:	462b      	mov	r3, r5
 8001ed8:	4978      	ldr	r1, [pc, #480]	; (80020bc <main+0x308>)
 8001eda:	f003 fa39 	bl	8005350 <siprintf>
			  HAL_UART_Transmit(&huart6, (uint8_t*)sendBuffer, strlen(sendBuffer), HAL_MAX_DELAY);
 8001ede:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe f9cc 	bl	8000280 <strlen>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ef4:	4872      	ldr	r0, [pc, #456]	; (80020c0 <main+0x30c>)
 8001ef6:	f001 fd79 	bl	80039ec <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001efa:	2120      	movs	r1, #32
 8001efc:	4871      	ldr	r0, [pc, #452]	; (80020c4 <main+0x310>)
 8001efe:	f001 f872 	bl	8002fe6 <HAL_GPIO_TogglePin>
			  data.pm25_standard = 0;
 8001f02:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <main+0x2f8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	809a      	strh	r2, [r3, #4]
 8001f08:	e02c      	b.n	8001f64 <main+0x1b0>
		  }

	 else if ((flagGGA == 1))
 8001f0a:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <main+0x2f4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d114      	bne.n	8001f3c <main+0x188>
	 {
		// Instead of clearing the display, it's better if we print spaces.
		// This will avoid the "refreshing" part
		 char x[10];
		 sprintf(x,"GPS data is invalid\r\n");
 8001f12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f16:	496c      	ldr	r1, [pc, #432]	; (80020c8 <main+0x314>)
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fa19 	bl	8005350 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*)x, strlen(x), HAL_MAX_DELAY);
 8001f1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe f9ac 	bl	8000280 <strlen>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f34:	485f      	ldr	r0, [pc, #380]	; (80020b4 <main+0x300>)
 8001f36:	f001 fd59 	bl	80039ec <HAL_UART_Transmit>
 8001f3a:	e013      	b.n	8001f64 <main+0x1b0>
	 }
	 else {
		 char x[10];
		 sprintf(x,"No recent PM2.5 data\r\n");
 8001f3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f40:	4962      	ldr	r1, [pc, #392]	; (80020cc <main+0x318>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 fa04 	bl	8005350 <siprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*)x, strlen(x), HAL_MAX_DELAY);
 8001f48:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe f997 	bl	8000280 <strlen>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5e:	4855      	ldr	r0, [pc, #340]	; (80020b4 <main+0x300>)
 8001f60:	f001 fd44 	bl	80039ec <HAL_UART_Transmit>
	 }
	 if (VCCTimeout <= 0)
 8001f64:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <main+0x2e4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	dc09      	bgt.n	8001f80 <main+0x1cc>
	 {
		VCCTimeout = 5000;  // Reset the timeout
 8001f6c:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <main+0x2e4>)
 8001f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f72:	601a      	str	r2, [r3, #0]
		flagGGA=0;
 8001f74:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <main+0x2f4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
		 char x = '1';
 8001f7a:	2331      	movs	r3, #49	; 0x31
 8001f7c:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7
		 //HAL_UART_Transmit(&huart2, x, strlen(x), HAL_MAX_DELAY);
	 }
	 if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8001f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f84:	4852      	ldr	r0, [pc, #328]	; (80020d0 <main+0x31c>)
 8001f86:	f000 fffd 	bl	8002f84 <HAL_GPIO_ReadPin>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d178      	bne.n	8002082 <main+0x2ce>
		 uint8_t test[] = "13.746180,100.539258,999\r\n";
 8001f90:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001f94:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001f98:	4a4e      	ldr	r2, [pc, #312]	; (80020d4 <main+0x320>)
 8001f9a:	461c      	mov	r4, r3
 8001f9c:	4615      	mov	r5, r2
 8001f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fa6:	c403      	stmia	r4!, {r0, r1}
 8001fa8:	8022      	strh	r2, [r4, #0]
 8001faa:	3402      	adds	r4, #2
 8001fac:	0c13      	lsrs	r3, r2, #16
 8001fae:	7023      	strb	r3, [r4, #0]
		 HAL_UART_Transmit(&huart6, (uint8_t*)test, strlen(test), HAL_MAX_DELAY);
 8001fb0:	f107 0320 	add.w	r3, r7, #32
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe f963 	bl	8000280 <strlen>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	f107 0120 	add.w	r1, r7, #32
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fc6:	483e      	ldr	r0, [pc, #248]	; (80020c0 <main+0x30c>)
 8001fc8:	f001 fd10 	bl	80039ec <HAL_UART_Transmit>
		 HAL_UART_Transmit(&huart2, (uint8_t*)test, strlen(test), HAL_MAX_DELAY);
 8001fcc:	f107 0320 	add.w	r3, r7, #32
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe f955 	bl	8000280 <strlen>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	f107 0120 	add.w	r1, r7, #32
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe2:	4834      	ldr	r0, [pc, #208]	; (80020b4 <main+0x300>)
 8001fe4:	f001 fd02 	bl	80039ec <HAL_UART_Transmit>
		 while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8001fe8:	bf00      	nop
 8001fea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fee:	4838      	ldr	r0, [pc, #224]	; (80020d0 <main+0x31c>)
 8001ff0:	f000 ffc8 	bl	8002f84 <HAL_GPIO_ReadPin>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0f7      	beq.n	8001fea <main+0x236>
	 }

	 while(data.pm25_standard == 0){
 8001ffa:	e042      	b.n	8002082 <main+0x2ce>
		 if (readPMSdata(&huart6))
 8001ffc:	4830      	ldr	r0, [pc, #192]	; (80020c0 <main+0x30c>)
 8001ffe:	f7ff f887 	bl	8001110 <readPMSdata>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <main+0x25c>
		{
		  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8002008:	2120      	movs	r1, #32
 800200a:	482e      	ldr	r0, [pc, #184]	; (80020c4 <main+0x310>)
 800200c:	f000 ffeb 	bl	8002fe6 <HAL_GPIO_TogglePin>
		}
		 if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8002010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002014:	482e      	ldr	r0, [pc, #184]	; (80020d0 <main+0x31c>)
 8002016:	f000 ffb5 	bl	8002f84 <HAL_GPIO_ReadPin>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d130      	bne.n	8002082 <main+0x2ce>
			 uint8_t test[] = "13.746180,100.539258,999\r\n";
 8002020:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002024:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002028:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <main+0x320>)
 800202a:	461c      	mov	r4, r3
 800202c:	4615      	mov	r5, r2
 800202e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002030:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002032:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002036:	c403      	stmia	r4!, {r0, r1}
 8002038:	8022      	strh	r2, [r4, #0]
 800203a:	3402      	adds	r4, #2
 800203c:	0c13      	lsrs	r3, r2, #16
 800203e:	7023      	strb	r3, [r4, #0]
			 HAL_UART_Transmit(&huart6, (uint8_t*)test, strlen(test), HAL_MAX_DELAY);
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe f91c 	bl	8000280 <strlen>
 8002048:	4603      	mov	r3, r0
 800204a:	b29a      	uxth	r2, r3
 800204c:	1d39      	adds	r1, r7, #4
 800204e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002052:	481b      	ldr	r0, [pc, #108]	; (80020c0 <main+0x30c>)
 8002054:	f001 fcca 	bl	80039ec <HAL_UART_Transmit>
			 HAL_UART_Transmit(&huart2, (uint8_t*)test, strlen(test), HAL_MAX_DELAY);
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe f910 	bl	8000280 <strlen>
 8002060:	4603      	mov	r3, r0
 8002062:	b29a      	uxth	r2, r3
 8002064:	1d39      	adds	r1, r7, #4
 8002066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800206a:	4812      	ldr	r0, [pc, #72]	; (80020b4 <main+0x300>)
 800206c:	f001 fcbe 	bl	80039ec <HAL_UART_Transmit>
			 while(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8002070:	bf00      	nop
 8002072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002076:	4816      	ldr	r0, [pc, #88]	; (80020d0 <main+0x31c>)
 8002078:	f000 ff84 	bl	8002f84 <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f7      	beq.n	8002072 <main+0x2be>
	 while(data.pm25_standard == 0){
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <main+0x2f8>)
 8002084:	889b      	ldrh	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0b8      	beq.n	8001ffc <main+0x248>
		 }
	 }


	  HAL_Delay(100);
 800208a:	2064      	movs	r0, #100	; 0x64
 800208c:	f000 fc2e 	bl	80028ec <HAL_Delay>
	  if (Wait_for("GGA") == 1)
 8002090:	e6a5      	b.n	8001dde <main+0x2a>
 8002092:	bf00      	nop
 8002094:	08008730 	.word	0x08008730
 8002098:	20000004 	.word	0x20000004
 800209c:	2000072c 	.word	0x2000072c
 80020a0:	08008734 	.word	0x08008734
 80020a4:	20000790 	.word	0x20000790
 80020a8:	200007d4 	.word	0x200007d4
 80020ac:	200002e4 	.word	0x200002e4
 80020b0:	08008738 	.word	0x08008738
 80020b4:	20000254 	.word	0x20000254
 80020b8:	0800875c 	.word	0x0800875c
 80020bc:	0800877c 	.word	0x0800877c
 80020c0:	2000029c 	.word	0x2000029c
 80020c4:	40020000 	.word	0x40020000
 80020c8:	0800878c 	.word	0x0800878c
 80020cc:	080087a4 	.word	0x080087a4
 80020d0:	40020800 	.word	0x40020800
 80020d4:	080087bc 	.word	0x080087bc

080020d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b094      	sub	sp, #80	; 0x50
 80020dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020de:	f107 0320 	add.w	r3, r7, #32
 80020e2:	2230      	movs	r2, #48	; 0x30
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 faa0 	bl	800562c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <SystemClock_Config+0xc8>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	4a26      	ldr	r2, [pc, #152]	; (80021a0 <SystemClock_Config+0xc8>)
 8002106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800210a:	6413      	str	r3, [r2, #64]	; 0x40
 800210c:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <SystemClock_Config+0xc8>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002118:	2300      	movs	r3, #0
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <SystemClock_Config+0xcc>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a20      	ldr	r2, [pc, #128]	; (80021a4 <SystemClock_Config+0xcc>)
 8002122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <SystemClock_Config+0xcc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002134:	2302      	movs	r3, #2
 8002136:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002138:	2301      	movs	r3, #1
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800213c:	2310      	movs	r3, #16
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002140:	2302      	movs	r3, #2
 8002142:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002144:	2300      	movs	r3, #0
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002148:	2308      	movs	r3, #8
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800214c:	2348      	movs	r3, #72	; 0x48
 800214e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002150:	2302      	movs	r3, #2
 8002152:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002154:	2304      	movs	r3, #4
 8002156:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002158:	f107 0320 	add.w	r3, r7, #32
 800215c:	4618      	mov	r0, r3
 800215e:	f000 ff5d 	bl	800301c <HAL_RCC_OscConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002168:	f000 f922 	bl	80023b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800216c:	230f      	movs	r3, #15
 800216e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002170:	2302      	movs	r3, #2
 8002172:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	2102      	movs	r1, #2
 8002188:	4618      	mov	r0, r3
 800218a:	f001 f9bf 	bl	800350c <HAL_RCC_ClockConfig>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002194:	f000 f90c 	bl	80023b0 <Error_Handler>
  }
}
 8002198:	bf00      	nop
 800219a:	3750      	adds	r7, #80	; 0x50
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40007000 	.word	0x40007000

080021a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_USART1_UART_Init+0x4c>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <MX_USART1_UART_Init+0x50>)
 80021b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <MX_USART1_UART_Init+0x4c>)
 80021b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_USART1_UART_Init+0x4c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_USART1_UART_Init+0x4c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <MX_USART1_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_USART1_UART_Init+0x4c>)
 80021ce:	220c      	movs	r2, #12
 80021d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <MX_USART1_UART_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <MX_USART1_UART_Init+0x4c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_USART1_UART_Init+0x4c>)
 80021e0:	f001 fbb4 	bl	800394c <HAL_UART_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021ea:	f000 f8e1 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000020c 	.word	0x2000020c
 80021f8:	40011000 	.word	0x40011000

080021fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <MX_USART2_UART_Init+0x4c>)
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <MX_USART2_UART_Init+0x50>)
 8002204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <MX_USART2_UART_Init+0x4c>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <MX_USART2_UART_Init+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <MX_USART2_UART_Init+0x4c>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <MX_USART2_UART_Init+0x4c>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <MX_USART2_UART_Init+0x4c>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b08      	ldr	r3, [pc, #32]	; (8002248 <MX_USART2_UART_Init+0x4c>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <MX_USART2_UART_Init+0x4c>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002232:	4805      	ldr	r0, [pc, #20]	; (8002248 <MX_USART2_UART_Init+0x4c>)
 8002234:	f001 fb8a 	bl	800394c <HAL_UART_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800223e:	f000 f8b7 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000254 	.word	0x20000254
 800224c:	40004400 	.word	0x40004400

08002250 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_USART6_UART_Init+0x4c>)
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <MX_USART6_UART_Init+0x50>)
 8002258:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <MX_USART6_UART_Init+0x4c>)
 800225c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002260:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_USART6_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_USART6_UART_Init+0x4c>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <MX_USART6_UART_Init+0x4c>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_USART6_UART_Init+0x4c>)
 8002276:	220c      	movs	r2, #12
 8002278:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <MX_USART6_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_USART6_UART_Init+0x4c>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_USART6_UART_Init+0x4c>)
 8002288:	f001 fb60 	bl	800394c <HAL_UART_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002292:	f000 f88d 	bl	80023b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000029c 	.word	0x2000029c
 80022a0:	40011400 	.word	0x40011400

080022a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <MX_GPIO_Init+0xfc>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a37      	ldr	r2, [pc, #220]	; (80023a0 <MX_GPIO_Init+0xfc>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <MX_GPIO_Init+0xfc>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <MX_GPIO_Init+0xfc>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a30      	ldr	r2, [pc, #192]	; (80023a0 <MX_GPIO_Init+0xfc>)
 80022e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <MX_GPIO_Init+0xfc>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b2a      	ldr	r3, [pc, #168]	; (80023a0 <MX_GPIO_Init+0xfc>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <MX_GPIO_Init+0xfc>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <MX_GPIO_Init+0xfc>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <MX_GPIO_Init+0xfc>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <MX_GPIO_Init+0xfc>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <MX_GPIO_Init+0xfc>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	2120      	movs	r1, #32
 800232e:	481d      	ldr	r0, [pc, #116]	; (80023a4 <MX_GPIO_Init+0x100>)
 8002330:	f000 fe40 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002334:	2200      	movs	r2, #0
 8002336:	f44f 7140 	mov.w	r1, #768	; 0x300
 800233a:	481b      	ldr	r0, [pc, #108]	; (80023a8 <MX_GPIO_Init+0x104>)
 800233c:	f000 fe3a 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002346:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800234a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	4815      	ldr	r0, [pc, #84]	; (80023ac <MX_GPIO_Init+0x108>)
 8002358:	f000 fc90 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800235c:	2320      	movs	r3, #32
 800235e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	480c      	ldr	r0, [pc, #48]	; (80023a4 <MX_GPIO_Init+0x100>)
 8002374:	f000 fc82 	bl	8002c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002378:	f44f 7340 	mov.w	r3, #768	; 0x300
 800237c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237e:	2301      	movs	r3, #1
 8002380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	; (80023a8 <MX_GPIO_Init+0x104>)
 8002392:	f000 fc73 	bl	8002c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800

080023b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b4:	b672      	cpsid	i
}
 80023b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <Error_Handler+0x8>
	...

080023bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_MspInit+0x4c>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <HAL_MspInit+0x4c>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_MspInit+0x4c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_MspInit+0x4c>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_MspInit+0x4c>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023fa:	2007      	movs	r0, #7
 80023fc:	f000 fb6a 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800

0800240c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08e      	sub	sp, #56	; 0x38
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a4f      	ldr	r2, [pc, #316]	; (8002568 <HAL_UART_MspInit+0x15c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d135      	bne.n	800249a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	4b4e      	ldr	r3, [pc, #312]	; (800256c <HAL_UART_MspInit+0x160>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	4a4d      	ldr	r2, [pc, #308]	; (800256c <HAL_UART_MspInit+0x160>)
 8002438:	f043 0310 	orr.w	r3, r3, #16
 800243c:	6453      	str	r3, [r2, #68]	; 0x44
 800243e:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_UART_MspInit+0x160>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	623b      	str	r3, [r7, #32]
 8002448:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_UART_MspInit+0x160>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a46      	ldr	r2, [pc, #280]	; (800256c <HAL_UART_MspInit+0x160>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b44      	ldr	r3, [pc, #272]	; (800256c <HAL_UART_MspInit+0x160>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002466:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2303      	movs	r3, #3
 8002476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002478:	2307      	movs	r3, #7
 800247a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002480:	4619      	mov	r1, r3
 8002482:	483b      	ldr	r0, [pc, #236]	; (8002570 <HAL_UART_MspInit+0x164>)
 8002484:	f000 fbfa 	bl	8002c7c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	2025      	movs	r0, #37	; 0x25
 800248e:	f000 fb2c 	bl	8002aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002492:	2025      	movs	r0, #37	; 0x25
 8002494:	f000 fb45 	bl	8002b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002498:	e062      	b.n	8002560 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART2)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a35      	ldr	r2, [pc, #212]	; (8002574 <HAL_UART_MspInit+0x168>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d12c      	bne.n	80024fe <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	4b30      	ldr	r3, [pc, #192]	; (800256c <HAL_UART_MspInit+0x160>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	4a2f      	ldr	r2, [pc, #188]	; (800256c <HAL_UART_MspInit+0x160>)
 80024ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b2:	6413      	str	r3, [r2, #64]	; 0x40
 80024b4:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_UART_MspInit+0x160>)
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_UART_MspInit+0x160>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	4a28      	ldr	r2, [pc, #160]	; (800256c <HAL_UART_MspInit+0x160>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6313      	str	r3, [r2, #48]	; 0x30
 80024d0:	4b26      	ldr	r3, [pc, #152]	; (800256c <HAL_UART_MspInit+0x160>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024dc:	230c      	movs	r3, #12
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024ec:	2307      	movs	r3, #7
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f4:	4619      	mov	r1, r3
 80024f6:	481e      	ldr	r0, [pc, #120]	; (8002570 <HAL_UART_MspInit+0x164>)
 80024f8:	f000 fbc0 	bl	8002c7c <HAL_GPIO_Init>
}
 80024fc:	e030      	b.n	8002560 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART6)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <HAL_UART_MspInit+0x16c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d12b      	bne.n	8002560 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_UART_MspInit+0x160>)
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	4a16      	ldr	r2, [pc, #88]	; (800256c <HAL_UART_MspInit+0x160>)
 8002512:	f043 0320 	orr.w	r3, r3, #32
 8002516:	6453      	str	r3, [r2, #68]	; 0x44
 8002518:	4b14      	ldr	r3, [pc, #80]	; (800256c <HAL_UART_MspInit+0x160>)
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_UART_MspInit+0x160>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	4a0f      	ldr	r2, [pc, #60]	; (800256c <HAL_UART_MspInit+0x160>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6313      	str	r3, [r2, #48]	; 0x30
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <HAL_UART_MspInit+0x160>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002540:	23c0      	movs	r3, #192	; 0xc0
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002550:	2308      	movs	r3, #8
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002558:	4619      	mov	r1, r3
 800255a:	4808      	ldr	r0, [pc, #32]	; (800257c <HAL_UART_MspInit+0x170>)
 800255c:	f000 fb8e 	bl	8002c7c <HAL_GPIO_Init>
}
 8002560:	bf00      	nop
 8002562:	3738      	adds	r7, #56	; 0x38
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40011000 	.word	0x40011000
 800256c:	40023800 	.word	0x40023800
 8002570:	40020000 	.word	0x40020000
 8002574:	40004400 	.word	0x40004400
 8002578:	40011400 	.word	0x40011400
 800257c:	40020800 	.word	0x40020800

08002580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002584:	e7fe      	b.n	8002584 <NMI_Handler+0x4>

08002586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800258a:	e7fe      	b.n	800258a <HardFault_Handler+0x4>

0800258c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <MemManage_Handler+0x4>

08002592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002596:	e7fe      	b.n	8002596 <BusFault_Handler+0x4>

08002598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800259c:	e7fe      	b.n	800259c <UsageFault_Handler+0x4>

0800259e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0) timeout--;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <SysTick_Handler+0x20>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <SysTick_Handler+0x18>
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SysTick_Handler+0x20>)
 80025d6:	881b      	ldrh	r3, [r3, #0]
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	4b02      	ldr	r3, [pc, #8]	; (80025e8 <SysTick_Handler+0x20>)
 80025de:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025e0:	f000 f964 	bl	80028ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000302 	.word	0x20000302

080025ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 80025f0:	4803      	ldr	r0, [pc, #12]	; (8002600 <USART1_IRQHandler+0x14>)
 80025f2:	f7fe ff7f 	bl	80014f4 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025f6:	4802      	ldr	r0, [pc, #8]	; (8002600 <USART1_IRQHandler+0x14>)
 80025f8:	f001 fb1a 	bl	8003c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2000020c 	.word	0x2000020c

08002604 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return 1;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_kill>:

int _kill(int pid, int sig)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800261e:	f003 f811 	bl	8005644 <__errno>
 8002622:	4603      	mov	r3, r0
 8002624:	2216      	movs	r2, #22
 8002626:	601a      	str	r2, [r3, #0]
  return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_exit>:

void _exit (int status)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800263c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ffe7 	bl	8002614 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002646:	e7fe      	b.n	8002646 <_exit+0x12>

08002648 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	e00a      	b.n	8002670 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800265a:	f3af 8000 	nop.w
 800265e:	4601      	mov	r1, r0
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	60ba      	str	r2, [r7, #8]
 8002666:	b2ca      	uxtb	r2, r1
 8002668:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	3301      	adds	r3, #1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	429a      	cmp	r2, r3
 8002676:	dbf0      	blt.n	800265a <_read+0x12>
  }

  return len;
 8002678:	687b      	ldr	r3, [r7, #4]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b086      	sub	sp, #24
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	e009      	b.n	80026a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	60ba      	str	r2, [r7, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbf1      	blt.n	8002694 <_write+0x12>
  }
  return len;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <_close>:

int _close(int file)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026e2:	605a      	str	r2, [r3, #4]
  return 0;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_isatty>:

int _isatty(int file)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <_sbrk+0x5c>)
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <_sbrk+0x60>)
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <_sbrk+0x64>)
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <_sbrk+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <_sbrk+0x64>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	429a      	cmp	r2, r3
 8002752:	d207      	bcs.n	8002764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002754:	f002 ff76 	bl	8005644 <__errno>
 8002758:	4603      	mov	r3, r0
 800275a:	220c      	movs	r2, #12
 800275c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002762:	e009      	b.n	8002778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <_sbrk+0x64>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <_sbrk+0x64>)
 8002774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20020000 	.word	0x20020000
 8002784:	00000400 	.word	0x00000400
 8002788:	200007d8 	.word	0x200007d8
 800278c:	20000930 	.word	0x20000930

08002790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <SystemInit+0x20>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	4a05      	ldr	r2, [pc, #20]	; (80027b0 <SystemInit+0x20>)
 800279c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack    		 /* set stack pointer */
 80027b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027b8:	f7ff ffea 	bl	8002790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027bc:	480c      	ldr	r0, [pc, #48]	; (80027f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027be:	490d      	ldr	r1, [pc, #52]	; (80027f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027c0:	4a0d      	ldr	r2, [pc, #52]	; (80027f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c4:	e002      	b.n	80027cc <LoopCopyDataInit>

080027c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ca:	3304      	adds	r3, #4

080027cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d0:	d3f9      	bcc.n	80027c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027d4:	4c0a      	ldr	r4, [pc, #40]	; (8002800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d8:	e001      	b.n	80027de <LoopFillZerobss>

080027da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027dc:	3204      	adds	r2, #4

080027de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e0:	d3fb      	bcc.n	80027da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027e2:	f002 ff35 	bl	8005650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e6:	f7ff fae5 	bl	8001db4 <main>
  bx  lr    
 80027ea:	4770      	bx	lr
	  ldr   sp, =_estack    		 /* set stack pointer */
 80027ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80027f8:	08008ba8 	.word	0x08008ba8
  ldr r2, =_sbss
 80027fc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002800:	2000092c 	.word	0x2000092c

08002804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002804:	e7fe      	b.n	8002804 <ADC_IRQHandler>
	...

08002808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <HAL_Init+0x40>)
 8002812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_Init+0x40>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <HAL_Init+0x40>)
 800281e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_Init+0x40>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a07      	ldr	r2, [pc, #28]	; (8002848 <HAL_Init+0x40>)
 800282a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002830:	2003      	movs	r0, #3
 8002832:	f000 f94f 	bl	8002ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002836:	2000      	movs	r0, #0
 8002838:	f000 f808 	bl	800284c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800283c:	f7ff fdbe 	bl	80023bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00

0800284c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_InitTick+0x54>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <HAL_InitTick+0x58>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	4619      	mov	r1, r3
 800285e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002862:	fbb3 f3f1 	udiv	r3, r3, r1
 8002866:	fbb2 f3f3 	udiv	r3, r2, r3
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f967 	bl	8002b3e <HAL_SYSTICK_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e00e      	b.n	8002898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b0f      	cmp	r3, #15
 800287e:	d80a      	bhi.n	8002896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002880:	2200      	movs	r2, #0
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002888:	f000 f92f 	bl	8002aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800288c:	4a06      	ldr	r2, [pc, #24]	; (80028a8 <HAL_InitTick+0x5c>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	e000      	b.n	8002898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
}
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000008 	.word	0x20000008
 80028a4:	20000010 	.word	0x20000010
 80028a8:	2000000c 	.word	0x2000000c

080028ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_IncTick+0x20>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_IncTick+0x24>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	4a04      	ldr	r2, [pc, #16]	; (80028d0 <HAL_IncTick+0x24>)
 80028be:	6013      	str	r3, [r2, #0]
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000010 	.word	0x20000010
 80028d0:	200007dc 	.word	0x200007dc

080028d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return uwTick;
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <HAL_GetTick+0x14>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	200007dc 	.word	0x200007dc

080028ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028f4:	f7ff ffee 	bl	80028d4 <HAL_GetTick>
 80028f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002904:	d005      	beq.n	8002912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <HAL_Delay+0x44>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002912:	bf00      	nop
 8002914:	f7ff ffde 	bl	80028d4 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	429a      	cmp	r2, r3
 8002922:	d8f7      	bhi.n	8002914 <HAL_Delay+0x28>
  {
  }
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000010 	.word	0x20000010

08002934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002950:	4013      	ands	r3, r2
 8002952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800295c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <__NVIC_SetPriorityGrouping+0x44>)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000ed00 	.word	0xe000ed00

0800297c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <__NVIC_GetPriorityGrouping+0x18>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	f003 0307 	and.w	r3, r3, #7
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	db0b      	blt.n	80029c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	f003 021f 	and.w	r2, r3, #31
 80029b0:	4907      	ldr	r1, [pc, #28]	; (80029d0 <__NVIC_EnableIRQ+0x38>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	2001      	movs	r0, #1
 80029ba:	fa00 f202 	lsl.w	r2, r0, r2
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e100 	.word	0xe000e100

080029d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	6039      	str	r1, [r7, #0]
 80029de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	db0a      	blt.n	80029fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	490c      	ldr	r1, [pc, #48]	; (8002a20 <__NVIC_SetPriority+0x4c>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	440b      	add	r3, r1
 80029f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029fc:	e00a      	b.n	8002a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	4908      	ldr	r1, [pc, #32]	; (8002a24 <__NVIC_SetPriority+0x50>)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	440b      	add	r3, r1
 8002a12:	761a      	strb	r2, [r3, #24]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000e100 	.word	0xe000e100
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b089      	sub	sp, #36	; 0x24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f1c3 0307 	rsb	r3, r3, #7
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	bf28      	it	cs
 8002a46:	2304      	movcs	r3, #4
 8002a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2b06      	cmp	r3, #6
 8002a50:	d902      	bls.n	8002a58 <NVIC_EncodePriority+0x30>
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3b03      	subs	r3, #3
 8002a56:	e000      	b.n	8002a5a <NVIC_EncodePriority+0x32>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7a:	43d9      	mvns	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	4313      	orrs	r3, r2
         );
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa0:	d301      	bcc.n	8002aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00f      	b.n	8002ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	; (8002ad0 <SysTick_Config+0x40>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aae:	210f      	movs	r1, #15
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ab4:	f7ff ff8e 	bl	80029d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <SysTick_Config+0x40>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002abe:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <SysTick_Config+0x40>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff ff29 	bl	8002934 <__NVIC_SetPriorityGrouping>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	4603      	mov	r3, r0
 8002af2:	60b9      	str	r1, [r7, #8]
 8002af4:	607a      	str	r2, [r7, #4]
 8002af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002afc:	f7ff ff3e 	bl	800297c <__NVIC_GetPriorityGrouping>
 8002b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7ff ff8e 	bl	8002a28 <NVIC_EncodePriority>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff5d 	bl	80029d4 <__NVIC_SetPriority>
}
 8002b1a:	bf00      	nop
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff31 	bl	8002998 <__NVIC_EnableIRQ>
}
 8002b36:	bf00      	nop
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff ffa2 	bl	8002a90 <SysTick_Config>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b64:	f7ff feb6 	bl	80028d4 <HAL_GetTick>
 8002b68:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d008      	beq.n	8002b88 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2280      	movs	r2, #128	; 0x80
 8002b7a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e052      	b.n	8002c2e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0216 	bic.w	r2, r2, #22
 8002b96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d103      	bne.n	8002bb8 <HAL_DMA_Abort+0x62>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d007      	beq.n	8002bc8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0208 	bic.w	r2, r2, #8
 8002bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bd8:	e013      	b.n	8002c02 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bda:	f7ff fe7b 	bl	80028d4 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d90c      	bls.n	8002c02 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e015      	b.n	8002c2e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e4      	bne.n	8002bda <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	223f      	movs	r2, #63	; 0x3f
 8002c16:	409a      	lsls	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d004      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e00c      	b.n	8002c6e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2205      	movs	r2, #5
 8002c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	e159      	b.n	8002f4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f040 8148 	bne.w	8002f46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d005      	beq.n	8002cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d130      	bne.n	8002d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	2203      	movs	r2, #3
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d04:	2201      	movs	r2, #1
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	f003 0201 	and.w	r2, r3, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d017      	beq.n	8002d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d123      	bne.n	8002dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	220f      	movs	r2, #15
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	08da      	lsrs	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3208      	adds	r2, #8
 8002dba:	69b9      	ldr	r1, [r7, #24]
 8002dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 0203 	and.w	r2, r3, #3
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80a2 	beq.w	8002f46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a56      	ldr	r2, [pc, #344]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <HAL_GPIO_Init+0x2e8>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e1e:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_GPIO_Init+0x2ec>)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a49      	ldr	r2, [pc, #292]	; (8002f6c <HAL_GPIO_Init+0x2f0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_Init+0x202>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a48      	ldr	r2, [pc, #288]	; (8002f70 <HAL_GPIO_Init+0x2f4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_Init+0x1fe>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <HAL_GPIO_Init+0x2f8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00d      	beq.n	8002e76 <HAL_GPIO_Init+0x1fa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a46      	ldr	r2, [pc, #280]	; (8002f78 <HAL_GPIO_Init+0x2fc>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_GPIO_Init+0x1f6>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a45      	ldr	r2, [pc, #276]	; (8002f7c <HAL_GPIO_Init+0x300>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_GPIO_Init+0x1f2>
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	e008      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e006      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e72:	2303      	movs	r3, #3
 8002e74:	e004      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e002      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_GPIO_Init+0x204>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	69fa      	ldr	r2, [r7, #28]
 8002e82:	f002 0203 	and.w	r2, r2, #3
 8002e86:	0092      	lsls	r2, r2, #2
 8002e88:	4093      	lsls	r3, r2
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e90:	4935      	ldr	r1, [pc, #212]	; (8002f68 <HAL_GPIO_Init+0x2ec>)
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e9e:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec2:	4a2f      	ldr	r2, [pc, #188]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ec8:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eec:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ef2:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f16:	4a1a      	ldr	r2, [pc, #104]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f1c:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f40:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <HAL_GPIO_Init+0x304>)
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	f67f aea2 	bls.w	8002c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3724      	adds	r7, #36	; 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	40020000 	.word	0x40020000
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020c00 	.word	0x40020c00
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40013c00 	.word	0x40013c00

08002f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	e001      	b.n	8002fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc4:	787b      	ldrb	r3, [r7, #1]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fd0:	e003      	b.n	8002fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fd2:	887b      	ldrh	r3, [r7, #2]
 8002fd4:	041a      	lsls	r2, r3, #16
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	619a      	str	r2, [r3, #24]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ff8:	887a      	ldrh	r2, [r7, #2]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	041a      	lsls	r2, r3, #16
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	43d9      	mvns	r1, r3
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	400b      	ands	r3, r1
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	619a      	str	r2, [r3, #24]
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e267      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d075      	beq.n	8003126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303a:	4b88      	ldr	r3, [pc, #544]	; (800325c <HAL_RCC_OscConfig+0x240>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b04      	cmp	r3, #4
 8003044:	d00c      	beq.n	8003060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003046:	4b85      	ldr	r3, [pc, #532]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304e:	2b08      	cmp	r3, #8
 8003050:	d112      	bne.n	8003078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003052:	4b82      	ldr	r3, [pc, #520]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800305e:	d10b      	bne.n	8003078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	4b7e      	ldr	r3, [pc, #504]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d05b      	beq.n	8003124 <HAL_RCC_OscConfig+0x108>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d157      	bne.n	8003124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e242      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003080:	d106      	bne.n	8003090 <HAL_RCC_OscConfig+0x74>
 8003082:	4b76      	ldr	r3, [pc, #472]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a75      	ldr	r2, [pc, #468]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e01d      	b.n	80030cc <HAL_RCC_OscConfig+0xb0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x98>
 800309a:	4b70      	ldr	r3, [pc, #448]	; (800325c <HAL_RCC_OscConfig+0x240>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a6f      	ldr	r2, [pc, #444]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b6d      	ldr	r3, [pc, #436]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a6c      	ldr	r2, [pc, #432]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e00b      	b.n	80030cc <HAL_RCC_OscConfig+0xb0>
 80030b4:	4b69      	ldr	r3, [pc, #420]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a68      	ldr	r2, [pc, #416]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b66      	ldr	r3, [pc, #408]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a65      	ldr	r2, [pc, #404]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d013      	beq.n	80030fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d4:	f7ff fbfe 	bl	80028d4 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030dc:	f7ff fbfa 	bl	80028d4 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e207      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ee:	4b5b      	ldr	r3, [pc, #364]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0f0      	beq.n	80030dc <HAL_RCC_OscConfig+0xc0>
 80030fa:	e014      	b.n	8003126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7ff fbea 	bl	80028d4 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003104:	f7ff fbe6 	bl	80028d4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e1f3      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003116:	4b51      	ldr	r3, [pc, #324]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0xe8>
 8003122:	e000      	b.n	8003126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d063      	beq.n	80031fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003132:	4b4a      	ldr	r3, [pc, #296]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00b      	beq.n	8003156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313e:	4b47      	ldr	r3, [pc, #284]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003146:	2b08      	cmp	r3, #8
 8003148:	d11c      	bne.n	8003184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314a:	4b44      	ldr	r3, [pc, #272]	; (800325c <HAL_RCC_OscConfig+0x240>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d116      	bne.n	8003184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	4b41      	ldr	r3, [pc, #260]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_RCC_OscConfig+0x152>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d001      	beq.n	800316e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e1c7      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316e:	4b3b      	ldr	r3, [pc, #236]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4937      	ldr	r1, [pc, #220]	; (800325c <HAL_RCC_OscConfig+0x240>)
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	e03a      	b.n	80031fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d020      	beq.n	80031ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800318c:	4b34      	ldr	r3, [pc, #208]	; (8003260 <HAL_RCC_OscConfig+0x244>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7ff fb9f 	bl	80028d4 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319a:	f7ff fb9b 	bl	80028d4 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e1a8      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4925      	ldr	r1, [pc, #148]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]
 80031cc:	e015      	b.n	80031fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCC_OscConfig+0x244>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7ff fb7e 	bl	80028d4 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031dc:	f7ff fb7a 	bl	80028d4 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e187      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <HAL_RCC_OscConfig+0x240>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d036      	beq.n	8003274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <HAL_RCC_OscConfig+0x248>)
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003214:	f7ff fb5e 	bl	80028d4 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321c:	f7ff fb5a 	bl	80028d4 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e167      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_OscConfig+0x240>)
 8003230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x200>
 800323a:	e01b      	b.n	8003274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800323c:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_RCC_OscConfig+0x248>)
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003242:	f7ff fb47 	bl	80028d4 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003248:	e00e      	b.n	8003268 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324a:	f7ff fb43 	bl	80028d4 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d907      	bls.n	8003268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e150      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
 800325c:	40023800 	.word	0x40023800
 8003260:	42470000 	.word	0x42470000
 8003264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003268:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800326a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ea      	bne.n	800324a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8097 	beq.w	80033b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003286:	4b81      	ldr	r3, [pc, #516]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10f      	bne.n	80032b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	4b7d      	ldr	r3, [pc, #500]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	4a7c      	ldr	r2, [pc, #496]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	; 0x40
 80032a2:	4b7a      	ldr	r3, [pc, #488]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ae:	2301      	movs	r3, #1
 80032b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b2:	4b77      	ldr	r3, [pc, #476]	; (8003490 <HAL_RCC_OscConfig+0x474>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d118      	bne.n	80032f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032be:	4b74      	ldr	r3, [pc, #464]	; (8003490 <HAL_RCC_OscConfig+0x474>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a73      	ldr	r2, [pc, #460]	; (8003490 <HAL_RCC_OscConfig+0x474>)
 80032c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ca:	f7ff fb03 	bl	80028d4 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d2:	f7ff faff 	bl	80028d4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e10c      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e4:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <HAL_RCC_OscConfig+0x474>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d106      	bne.n	8003306 <HAL_RCC_OscConfig+0x2ea>
 80032f8:	4b64      	ldr	r3, [pc, #400]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	4a63      	ldr	r2, [pc, #396]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6713      	str	r3, [r2, #112]	; 0x70
 8003304:	e01c      	b.n	8003340 <HAL_RCC_OscConfig+0x324>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b05      	cmp	r3, #5
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0x30c>
 800330e:	4b5f      	ldr	r3, [pc, #380]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	4a5e      	ldr	r2, [pc, #376]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	6713      	str	r3, [r2, #112]	; 0x70
 800331a:	4b5c      	ldr	r3, [pc, #368]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	4a5b      	ldr	r2, [pc, #364]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6713      	str	r3, [r2, #112]	; 0x70
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0x324>
 8003328:	4b58      	ldr	r3, [pc, #352]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	4a57      	ldr	r2, [pc, #348]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	6713      	str	r3, [r2, #112]	; 0x70
 8003334:	4b55      	ldr	r3, [pc, #340]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a54      	ldr	r2, [pc, #336]	; (800348c <HAL_RCC_OscConfig+0x470>)
 800333a:	f023 0304 	bic.w	r3, r3, #4
 800333e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d015      	beq.n	8003374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7ff fac4 	bl	80028d4 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7ff fac0 	bl	80028d4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0cb      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0ee      	beq.n	8003350 <HAL_RCC_OscConfig+0x334>
 8003372:	e014      	b.n	800339e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003374:	f7ff faae 	bl	80028d4 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7ff faaa 	bl	80028d4 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	; 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e0b5      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003392:	4b3e      	ldr	r3, [pc, #248]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1ee      	bne.n	800337c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339e:	7dfb      	ldrb	r3, [r7, #23]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d105      	bne.n	80033b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a4:	4b39      	ldr	r3, [pc, #228]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	4a38      	ldr	r2, [pc, #224]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80033aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80a1 	beq.w	80034fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ba:	4b34      	ldr	r3, [pc, #208]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d05c      	beq.n	8003480 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d141      	bne.n	8003452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ce:	4b31      	ldr	r3, [pc, #196]	; (8003494 <HAL_RCC_OscConfig+0x478>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7ff fa7e 	bl	80028d4 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033dc:	f7ff fa7a 	bl	80028d4 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e087      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ee:	4b27      	ldr	r3, [pc, #156]	; (800348c <HAL_RCC_OscConfig+0x470>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	019b      	lsls	r3, r3, #6
 800340a:	431a      	orrs	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	3b01      	subs	r3, #1
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	061b      	lsls	r3, r3, #24
 800341e:	491b      	ldr	r1, [pc, #108]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003424:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_RCC_OscConfig+0x478>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342a:	f7ff fa53 	bl	80028d4 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003432:	f7ff fa4f 	bl	80028d4 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e05c      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCC_OscConfig+0x416>
 8003450:	e054      	b.n	80034fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_RCC_OscConfig+0x478>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7ff fa3c 	bl	80028d4 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003460:	f7ff fa38 	bl	80028d4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e045      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCC_OscConfig+0x470>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x444>
 800347e:	e03d      	b.n	80034fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d107      	bne.n	8003498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e038      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
 800348c:	40023800 	.word	0x40023800
 8003490:	40007000 	.word	0x40007000
 8003494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x4ec>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d028      	beq.n	80034f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d121      	bne.n	80034f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034be:	429a      	cmp	r2, r3
 80034c0:	d11a      	bne.n	80034f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d111      	bne.n	80034f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	085b      	lsrs	r3, r3, #1
 80034e0:	3b01      	subs	r3, #1
 80034e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d107      	bne.n	80034f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800

0800350c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0cc      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003520:	4b68      	ldr	r3, [pc, #416]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d90c      	bls.n	8003548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b65      	ldr	r3, [pc, #404]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b63      	ldr	r3, [pc, #396]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0b8      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003560:	4b59      	ldr	r3, [pc, #356]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a58      	ldr	r2, [pc, #352]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800356a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003578:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a52      	ldr	r2, [pc, #328]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003584:	4b50      	ldr	r3, [pc, #320]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	494d      	ldr	r1, [pc, #308]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d044      	beq.n	800362c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b47      	ldr	r3, [pc, #284]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d119      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e07f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d003      	beq.n	80035ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d107      	bne.n	80035da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ca:	4b3f      	ldr	r3, [pc, #252]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e06f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035da:	4b3b      	ldr	r3, [pc, #236]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e067      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ea:	4b37      	ldr	r3, [pc, #220]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f023 0203 	bic.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4934      	ldr	r1, [pc, #208]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035fc:	f7ff f96a 	bl	80028d4 <HAL_GetTick>
 8003600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003602:	e00a      	b.n	800361a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003604:	f7ff f966 	bl	80028d4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e04f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361a:	4b2b      	ldr	r3, [pc, #172]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 020c 	and.w	r2, r3, #12
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	429a      	cmp	r2, r3
 800362a:	d1eb      	bne.n	8003604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d20c      	bcs.n	8003654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363a:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e032      	b.n	80036ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003660:	4b19      	ldr	r3, [pc, #100]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4916      	ldr	r1, [pc, #88]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	4313      	orrs	r3, r2
 8003670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800367e:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	490e      	ldr	r1, [pc, #56]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	4313      	orrs	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003692:	f000 f821 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8003696:	4602      	mov	r2, r0
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	490a      	ldr	r1, [pc, #40]	; (80036cc <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	5ccb      	ldrb	r3, [r1, r3]
 80036a6:	fa22 f303 	lsr.w	r3, r2, r3
 80036aa:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <HAL_RCC_ClockConfig+0x1c8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f8ca 	bl	800284c <HAL_InitTick>

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40023c00 	.word	0x40023c00
 80036c8:	40023800 	.word	0x40023800
 80036cc:	080087d8 	.word	0x080087d8
 80036d0:	20000008 	.word	0x20000008
 80036d4:	2000000c 	.word	0x2000000c

080036d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036dc:	b094      	sub	sp, #80	; 0x50
 80036de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	647b      	str	r3, [r7, #68]	; 0x44
 80036e4:	2300      	movs	r3, #0
 80036e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036e8:	2300      	movs	r3, #0
 80036ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036f0:	4b79      	ldr	r3, [pc, #484]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d00d      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x40>
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	f200 80e1 	bhi.w	80038c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x34>
 8003706:	2b04      	cmp	r3, #4
 8003708:	d003      	beq.n	8003712 <HAL_RCC_GetSysClockFreq+0x3a>
 800370a:	e0db      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800370c:	4b73      	ldr	r3, [pc, #460]	; (80038dc <HAL_RCC_GetSysClockFreq+0x204>)
 800370e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003710:	e0db      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003712:	4b73      	ldr	r3, [pc, #460]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003716:	e0d8      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003718:	4b6f      	ldr	r3, [pc, #444]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003720:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003722:	4b6d      	ldr	r3, [pc, #436]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d063      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800372e:	4b6a      	ldr	r3, [pc, #424]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	099b      	lsrs	r3, r3, #6
 8003734:	2200      	movs	r2, #0
 8003736:	63bb      	str	r3, [r7, #56]	; 0x38
 8003738:	63fa      	str	r2, [r7, #60]	; 0x3c
 800373a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800373c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
 8003742:	2300      	movs	r3, #0
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
 8003746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800374a:	4622      	mov	r2, r4
 800374c:	462b      	mov	r3, r5
 800374e:	f04f 0000 	mov.w	r0, #0
 8003752:	f04f 0100 	mov.w	r1, #0
 8003756:	0159      	lsls	r1, r3, #5
 8003758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800375c:	0150      	lsls	r0, r2, #5
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4621      	mov	r1, r4
 8003764:	1a51      	subs	r1, r2, r1
 8003766:	6139      	str	r1, [r7, #16]
 8003768:	4629      	mov	r1, r5
 800376a:	eb63 0301 	sbc.w	r3, r3, r1
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800377c:	4659      	mov	r1, fp
 800377e:	018b      	lsls	r3, r1, #6
 8003780:	4651      	mov	r1, sl
 8003782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003786:	4651      	mov	r1, sl
 8003788:	018a      	lsls	r2, r1, #6
 800378a:	4651      	mov	r1, sl
 800378c:	ebb2 0801 	subs.w	r8, r2, r1
 8003790:	4659      	mov	r1, fp
 8003792:	eb63 0901 	sbc.w	r9, r3, r1
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037aa:	4690      	mov	r8, r2
 80037ac:	4699      	mov	r9, r3
 80037ae:	4623      	mov	r3, r4
 80037b0:	eb18 0303 	adds.w	r3, r8, r3
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	462b      	mov	r3, r5
 80037b8:	eb49 0303 	adc.w	r3, r9, r3
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037ca:	4629      	mov	r1, r5
 80037cc:	024b      	lsls	r3, r1, #9
 80037ce:	4621      	mov	r1, r4
 80037d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037d4:	4621      	mov	r1, r4
 80037d6:	024a      	lsls	r2, r1, #9
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037de:	2200      	movs	r2, #0
 80037e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037e8:	f7fd fa36 	bl	8000c58 <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4613      	mov	r3, r2
 80037f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f4:	e058      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f6:	4b38      	ldr	r3, [pc, #224]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	099b      	lsrs	r3, r3, #6
 80037fc:	2200      	movs	r2, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	4611      	mov	r1, r2
 8003802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003806:	623b      	str	r3, [r7, #32]
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
 800380c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003810:	4642      	mov	r2, r8
 8003812:	464b      	mov	r3, r9
 8003814:	f04f 0000 	mov.w	r0, #0
 8003818:	f04f 0100 	mov.w	r1, #0
 800381c:	0159      	lsls	r1, r3, #5
 800381e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003822:	0150      	lsls	r0, r2, #5
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4641      	mov	r1, r8
 800382a:	ebb2 0a01 	subs.w	sl, r2, r1
 800382e:	4649      	mov	r1, r9
 8003830:	eb63 0b01 	sbc.w	fp, r3, r1
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003848:	ebb2 040a 	subs.w	r4, r2, sl
 800384c:	eb63 050b 	sbc.w	r5, r3, fp
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	00eb      	lsls	r3, r5, #3
 800385a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385e:	00e2      	lsls	r2, r4, #3
 8003860:	4614      	mov	r4, r2
 8003862:	461d      	mov	r5, r3
 8003864:	4643      	mov	r3, r8
 8003866:	18e3      	adds	r3, r4, r3
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	464b      	mov	r3, r9
 800386c:	eb45 0303 	adc.w	r3, r5, r3
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800387e:	4629      	mov	r1, r5
 8003880:	028b      	lsls	r3, r1, #10
 8003882:	4621      	mov	r1, r4
 8003884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003888:	4621      	mov	r1, r4
 800388a:	028a      	lsls	r2, r1, #10
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003892:	2200      	movs	r2, #0
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	61fa      	str	r2, [r7, #28]
 8003898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800389c:	f7fd f9dc 	bl	8000c58 <__aeabi_uldivmod>
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4613      	mov	r3, r2
 80038a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	3301      	adds	r3, #1
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038c2:	e002      	b.n	80038ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetSysClockFreq+0x204>)
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3750      	adds	r7, #80	; 0x50
 80038d0:	46bd      	mov	sp, r7
 80038d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	00f42400 	.word	0x00f42400
 80038e0:	007a1200 	.word	0x007a1200

080038e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e8:	4b03      	ldr	r3, [pc, #12]	; (80038f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000008 	.word	0x20000008

080038fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003900:	f7ff fff0 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 8003904:	4602      	mov	r2, r0
 8003906:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	0a9b      	lsrs	r3, r3, #10
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	4903      	ldr	r1, [pc, #12]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003912:	5ccb      	ldrb	r3, [r1, r3]
 8003914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	080087e8 	.word	0x080087e8

08003924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003928:	f7ff ffdc 	bl	80038e4 <HAL_RCC_GetHCLKFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	0b5b      	lsrs	r3, r3, #13
 8003934:	f003 0307 	and.w	r3, r3, #7
 8003938:	4903      	ldr	r1, [pc, #12]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800393a:	5ccb      	ldrb	r3, [r1, r3]
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	080087e8 	.word	0x080087e8

0800394c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e042      	b.n	80039e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fe fd4a 	bl	800240c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	; 0x24
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800398e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fdff 	bl	8004594 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	695a      	ldr	r2, [r3, #20]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d175      	bne.n	8003af8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_UART_Transmit+0x2c>
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e06e      	b.n	8003afa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2221      	movs	r2, #33	; 0x21
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2a:	f7fe ff53 	bl	80028d4 <HAL_GetTick>
 8003a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a44:	d108      	bne.n	8003a58 <HAL_UART_Transmit+0x6c>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e003      	b.n	8003a60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a60:	e02e      	b.n	8003ac0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fb9b 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e03a      	b.n	8003afa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1cb      	bne.n	8003a62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2140      	movs	r1, #64	; 0x40
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fb67 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d005      	beq.n	8003aec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e006      	b.n	8003afa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b08a      	sub	sp, #40	; 0x28
 8003b06:	af02      	add	r7, sp, #8
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	f040 8081 	bne.w	8003c26 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <HAL_UART_Receive+0x2e>
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e079      	b.n	8003c28 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2222      	movs	r2, #34	; 0x22
 8003b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b48:	f7fe fec4 	bl	80028d4 <HAL_GetTick>
 8003b4c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b62:	d108      	bne.n	8003b76 <HAL_UART_Receive+0x74>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e003      	b.n	8003b7e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b7e:	e047      	b.n	8003c10 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	2120      	movs	r1, #32
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fb0c 	bl	80041a8 <UART_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d005      	beq.n	8003ba2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e042      	b.n	8003c28 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	e01f      	b.n	8003c02 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bca:	d007      	beq.n	8003bdc <HAL_UART_Receive+0xda>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10a      	bne.n	8003bea <HAL_UART_Receive+0xe8>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	e008      	b.n	8003bfc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1b2      	bne.n	8003b80 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	e000      	b.n	8003c28 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
  }
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3720      	adds	r7, #32
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b0ba      	sub	sp, #232	; 0xe8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_UART_IRQHandler+0x66>
 8003c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fbc2 	bl	8004418 <UART_Receive_IT>
      return;
 8003c94:	e25b      	b.n	800414e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80de 	beq.w	8003e5c <HAL_UART_IRQHandler+0x22c>
 8003ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80d1 	beq.w	8003e5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_UART_IRQHandler+0xae>
 8003cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <HAL_UART_IRQHandler+0xd2>
 8003cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f043 0202 	orr.w	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_UART_IRQHandler+0xf6>
 8003d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d011      	beq.n	8003d56 <HAL_UART_IRQHandler+0x126>
 8003d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d105      	bne.n	8003d4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	f043 0208 	orr.w	r2, r3, #8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 81f2 	beq.w	8004144 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_UART_IRQHandler+0x14e>
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fb4d 	bl	8004418 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <HAL_UART_IRQHandler+0x17a>
 8003da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d04f      	beq.n	8003e4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa55 	bl	800425a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d141      	bne.n	8003e42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3314      	adds	r3, #20
 8003dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3314      	adds	r3, #20
 8003de6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003df6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1d9      	bne.n	8003dbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d013      	beq.n	8003e3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e16:	4a7e      	ldr	r2, [pc, #504]	; (8004010 <HAL_UART_IRQHandler+0x3e0>)
 8003e18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe ff09 	bl	8002c36 <HAL_DMA_Abort_IT>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e34:	4610      	mov	r0, r2
 8003e36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e00e      	b.n	8003e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f99e 	bl	800417c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e40:	e00a      	b.n	8003e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f99a 	bl	800417c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	e006      	b.n	8003e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f996 	bl	800417c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003e56:	e175      	b.n	8004144 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	bf00      	nop
    return;
 8003e5a:	e173      	b.n	8004144 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	f040 814f 	bne.w	8004104 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 8148 	beq.w	8004104 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 8141 	beq.w	8004104 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	f040 80b6 	bne.w	8004014 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8145 	beq.w	8004148 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	f080 813e 	bcs.w	8004148 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ed2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ede:	f000 8088 	beq.w	8003ff2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1d9      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e1      	bne.n	8003f2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3314      	adds	r3, #20
 8003f70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e3      	bne.n	8003f6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc2:	f023 0310 	bic.w	r3, r3, #16
 8003fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e3      	bne.n	8003fb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe fdb2 	bl	8002b56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004000:	b29b      	uxth	r3, r3
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f8c1 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800400e:	e09b      	b.n	8004148 <HAL_UART_IRQHandler+0x518>
 8004010:	08004321 	.word	0x08004321
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800401c:	b29b      	uxth	r3, r3
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 808e 	beq.w	800414c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 8089 	beq.w	800414c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004050:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	330c      	adds	r3, #12
 800405a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800405e:	647a      	str	r2, [r7, #68]	; 0x44
 8004060:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004064:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800406c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e3      	bne.n	800403a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	623b      	str	r3, [r7, #32]
   return(result);
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004096:	633a      	str	r2, [r7, #48]	; 0x30
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800409c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e3      	bne.n	8004072 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	e853 3f00 	ldrex	r3, [r3]
 80040c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0310 	bic.w	r3, r3, #16
 80040ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040dc:	61fa      	str	r2, [r7, #28]
 80040de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e0:	69b9      	ldr	r1, [r7, #24]
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	e841 2300 	strex	r3, r2, [r1]
 80040e8:	617b      	str	r3, [r7, #20]
   return(result);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e3      	bne.n	80040b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f847 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004102:	e023      	b.n	800414c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	2b00      	cmp	r3, #0
 800410e:	d009      	beq.n	8004124 <HAL_UART_IRQHandler+0x4f4>
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f913 	bl	8004348 <UART_Transmit_IT>
    return;
 8004122:	e014      	b.n	800414e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00e      	beq.n	800414e <HAL_UART_IRQHandler+0x51e>
 8004130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f953 	bl	80043e8 <UART_EndTransmit_IT>
    return;
 8004142:	e004      	b.n	800414e <HAL_UART_IRQHandler+0x51e>
    return;
 8004144:	bf00      	nop
 8004146:	e002      	b.n	800414e <HAL_UART_IRQHandler+0x51e>
      return;
 8004148:	bf00      	nop
 800414a:	e000      	b.n	800414e <HAL_UART_IRQHandler+0x51e>
      return;
 800414c:	bf00      	nop
  }
}
 800414e:	37e8      	adds	r7, #232	; 0xe8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	4613      	mov	r3, r2
 80041b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b8:	e03b      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041c0:	d037      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fe fb87 	bl	80028d4 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	6a3a      	ldr	r2, [r7, #32]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e03a      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d023      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b80      	cmp	r3, #128	; 0x80
 80041ee:	d020      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b40      	cmp	r3, #64	; 0x40
 80041f4:	d01d      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b08      	cmp	r3, #8
 8004202:	d116      	bne.n	8004232 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004204:	2300      	movs	r3, #0
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f81d 	bl	800425a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2208      	movs	r2, #8
 8004224:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e00f      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	429a      	cmp	r2, r3
 800424e:	d0b4      	beq.n	80041ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800425a:	b480      	push	{r7}
 800425c:	b095      	sub	sp, #84	; 0x54
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004278:	64fb      	str	r3, [r7, #76]	; 0x4c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	330c      	adds	r3, #12
 8004280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004282:	643a      	str	r2, [r7, #64]	; 0x40
 8004284:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004288:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e5      	bne.n	8004262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3314      	adds	r3, #20
 80042b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e5      	bne.n	8004296 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d119      	bne.n	8004306 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f023 0310 	bic.w	r3, r3, #16
 80042e8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042f2:	61ba      	str	r2, [r7, #24]
 80042f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6979      	ldr	r1, [r7, #20]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e5      	bne.n	80042d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004314:	bf00      	nop
 8004316:	3754      	adds	r7, #84	; 0x54
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff ff1e 	bl	800417c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b21      	cmp	r3, #33	; 0x21
 800435a:	d13e      	bne.n	80043da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004364:	d114      	bne.n	8004390 <UART_Transmit_IT+0x48>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d110      	bne.n	8004390 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004382:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	1c9a      	adds	r2, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	621a      	str	r2, [r3, #32]
 800438e:	e008      	b.n	80043a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	1c59      	adds	r1, r3, #1
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6211      	str	r1, [r2, #32]
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	4619      	mov	r1, r3
 80043b0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10f      	bne.n	80043d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043da:	2302      	movs	r3, #2
  }
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff fea3 	bl	8004154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08c      	sub	sp, #48	; 0x30
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b22      	cmp	r3, #34	; 0x22
 800442a:	f040 80ae 	bne.w	800458a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004436:	d117      	bne.n	8004468 <UART_Receive_IT+0x50>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d113      	bne.n	8004468 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	b29b      	uxth	r3, r3
 8004452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004456:	b29a      	uxth	r2, r3
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	1c9a      	adds	r2, r3, #2
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	629a      	str	r2, [r3, #40]	; 0x28
 8004466:	e026      	b.n	80044b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447a:	d007      	beq.n	800448c <UART_Receive_IT+0x74>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <UART_Receive_IT+0x82>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d106      	bne.n	800449a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	b2da      	uxtb	r2, r3
 8004494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	e008      	b.n	80044ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29b      	uxth	r3, r3
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4619      	mov	r1, r3
 80044c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d15d      	bne.n	8004586 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0220 	bic.w	r2, r2, #32
 80044d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	2b01      	cmp	r3, #1
 800450e:	d135      	bne.n	800457c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	e853 3f00 	ldrex	r3, [r3]
 8004524:	613b      	str	r3, [r7, #16]
   return(result);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f023 0310 	bic.w	r3, r3, #16
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	330c      	adds	r3, #12
 8004534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004536:	623a      	str	r2, [r7, #32]
 8004538:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453a:	69f9      	ldr	r1, [r7, #28]
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	61bb      	str	r3, [r7, #24]
   return(result);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e5      	bne.n	8004516 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b10      	cmp	r3, #16
 8004556:	d10a      	bne.n	800456e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004572:	4619      	mov	r1, r3
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f7ff fe0b 	bl	8004190 <HAL_UARTEx_RxEventCallback>
 800457a:	e002      	b.n	8004582 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fdf3 	bl	8004168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	e002      	b.n	800458c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800458a:	2302      	movs	r3, #2
  }
}
 800458c:	4618      	mov	r0, r3
 800458e:	3730      	adds	r7, #48	; 0x30
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004598:	b0c0      	sub	sp, #256	; 0x100
 800459a:	af00      	add	r7, sp, #0
 800459c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	68d9      	ldr	r1, [r3, #12]
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	ea40 0301 	orr.w	r3, r0, r1
 80045bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	4313      	orrs	r3, r2
 80045dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045ec:	f021 010c 	bic.w	r1, r1, #12
 80045f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045fa:	430b      	orrs	r3, r1
 80045fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460e:	6999      	ldr	r1, [r3, #24]
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	ea40 0301 	orr.w	r3, r0, r1
 800461a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b8f      	ldr	r3, [pc, #572]	; (8004860 <UART_SetConfig+0x2cc>)
 8004624:	429a      	cmp	r2, r3
 8004626:	d005      	beq.n	8004634 <UART_SetConfig+0xa0>
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b8d      	ldr	r3, [pc, #564]	; (8004864 <UART_SetConfig+0x2d0>)
 8004630:	429a      	cmp	r2, r3
 8004632:	d104      	bne.n	800463e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004634:	f7ff f976 	bl	8003924 <HAL_RCC_GetPCLK2Freq>
 8004638:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800463c:	e003      	b.n	8004646 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800463e:	f7ff f95d 	bl	80038fc <HAL_RCC_GetPCLK1Freq>
 8004642:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004650:	f040 810c 	bne.w	800486c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004658:	2200      	movs	r2, #0
 800465a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800465e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004662:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004666:	4622      	mov	r2, r4
 8004668:	462b      	mov	r3, r5
 800466a:	1891      	adds	r1, r2, r2
 800466c:	65b9      	str	r1, [r7, #88]	; 0x58
 800466e:	415b      	adcs	r3, r3
 8004670:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004672:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004676:	4621      	mov	r1, r4
 8004678:	eb12 0801 	adds.w	r8, r2, r1
 800467c:	4629      	mov	r1, r5
 800467e:	eb43 0901 	adc.w	r9, r3, r1
 8004682:	f04f 0200 	mov.w	r2, #0
 8004686:	f04f 0300 	mov.w	r3, #0
 800468a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800468e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004696:	4690      	mov	r8, r2
 8004698:	4699      	mov	r9, r3
 800469a:	4623      	mov	r3, r4
 800469c:	eb18 0303 	adds.w	r3, r8, r3
 80046a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046a4:	462b      	mov	r3, r5
 80046a6:	eb49 0303 	adc.w	r3, r9, r3
 80046aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046c2:	460b      	mov	r3, r1
 80046c4:	18db      	adds	r3, r3, r3
 80046c6:	653b      	str	r3, [r7, #80]	; 0x50
 80046c8:	4613      	mov	r3, r2
 80046ca:	eb42 0303 	adc.w	r3, r2, r3
 80046ce:	657b      	str	r3, [r7, #84]	; 0x54
 80046d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046d8:	f7fc fabe 	bl	8000c58 <__aeabi_uldivmod>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4b61      	ldr	r3, [pc, #388]	; (8004868 <UART_SetConfig+0x2d4>)
 80046e2:	fba3 2302 	umull	r2, r3, r3, r2
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	011c      	lsls	r4, r3, #4
 80046ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	1891      	adds	r1, r2, r2
 8004702:	64b9      	str	r1, [r7, #72]	; 0x48
 8004704:	415b      	adcs	r3, r3
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004708:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800470c:	4641      	mov	r1, r8
 800470e:	eb12 0a01 	adds.w	sl, r2, r1
 8004712:	4649      	mov	r1, r9
 8004714:	eb43 0b01 	adc.w	fp, r3, r1
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004724:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800472c:	4692      	mov	sl, r2
 800472e:	469b      	mov	fp, r3
 8004730:	4643      	mov	r3, r8
 8004732:	eb1a 0303 	adds.w	r3, sl, r3
 8004736:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800473a:	464b      	mov	r3, r9
 800473c:	eb4b 0303 	adc.w	r3, fp, r3
 8004740:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004750:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004754:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004758:	460b      	mov	r3, r1
 800475a:	18db      	adds	r3, r3, r3
 800475c:	643b      	str	r3, [r7, #64]	; 0x40
 800475e:	4613      	mov	r3, r2
 8004760:	eb42 0303 	adc.w	r3, r2, r3
 8004764:	647b      	str	r3, [r7, #68]	; 0x44
 8004766:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800476a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800476e:	f7fc fa73 	bl	8000c58 <__aeabi_uldivmod>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4611      	mov	r1, r2
 8004778:	4b3b      	ldr	r3, [pc, #236]	; (8004868 <UART_SetConfig+0x2d4>)
 800477a:	fba3 2301 	umull	r2, r3, r3, r1
 800477e:	095b      	lsrs	r3, r3, #5
 8004780:	2264      	movs	r2, #100	; 0x64
 8004782:	fb02 f303 	mul.w	r3, r2, r3
 8004786:	1acb      	subs	r3, r1, r3
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800478e:	4b36      	ldr	r3, [pc, #216]	; (8004868 <UART_SetConfig+0x2d4>)
 8004790:	fba3 2302 	umull	r2, r3, r3, r2
 8004794:	095b      	lsrs	r3, r3, #5
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800479c:	441c      	add	r4, r3
 800479e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	1891      	adds	r1, r2, r2
 80047b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80047b8:	415b      	adcs	r3, r3
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047c0:	4641      	mov	r1, r8
 80047c2:	1851      	adds	r1, r2, r1
 80047c4:	6339      	str	r1, [r7, #48]	; 0x30
 80047c6:	4649      	mov	r1, r9
 80047c8:	414b      	adcs	r3, r1
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047d8:	4659      	mov	r1, fp
 80047da:	00cb      	lsls	r3, r1, #3
 80047dc:	4651      	mov	r1, sl
 80047de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047e2:	4651      	mov	r1, sl
 80047e4:	00ca      	lsls	r2, r1, #3
 80047e6:	4610      	mov	r0, r2
 80047e8:	4619      	mov	r1, r3
 80047ea:	4603      	mov	r3, r0
 80047ec:	4642      	mov	r2, r8
 80047ee:	189b      	adds	r3, r3, r2
 80047f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f4:	464b      	mov	r3, r9
 80047f6:	460a      	mov	r2, r1
 80047f8:	eb42 0303 	adc.w	r3, r2, r3
 80047fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800480c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004810:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004814:	460b      	mov	r3, r1
 8004816:	18db      	adds	r3, r3, r3
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
 800481a:	4613      	mov	r3, r2
 800481c:	eb42 0303 	adc.w	r3, r2, r3
 8004820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004826:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800482a:	f7fc fa15 	bl	8000c58 <__aeabi_uldivmod>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <UART_SetConfig+0x2d4>)
 8004834:	fba3 1302 	umull	r1, r3, r3, r2
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	2164      	movs	r1, #100	; 0x64
 800483c:	fb01 f303 	mul.w	r3, r1, r3
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	3332      	adds	r3, #50	; 0x32
 8004846:	4a08      	ldr	r2, [pc, #32]	; (8004868 <UART_SetConfig+0x2d4>)
 8004848:	fba2 2303 	umull	r2, r3, r2, r3
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	f003 0207 	and.w	r2, r3, #7
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4422      	add	r2, r4
 800485a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800485c:	e106      	b.n	8004a6c <UART_SetConfig+0x4d8>
 800485e:	bf00      	nop
 8004860:	40011000 	.word	0x40011000
 8004864:	40011400 	.word	0x40011400
 8004868:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800486c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004870:	2200      	movs	r2, #0
 8004872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004876:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800487a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800487e:	4642      	mov	r2, r8
 8004880:	464b      	mov	r3, r9
 8004882:	1891      	adds	r1, r2, r2
 8004884:	6239      	str	r1, [r7, #32]
 8004886:	415b      	adcs	r3, r3
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
 800488a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800488e:	4641      	mov	r1, r8
 8004890:	1854      	adds	r4, r2, r1
 8004892:	4649      	mov	r1, r9
 8004894:	eb43 0501 	adc.w	r5, r3, r1
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	00eb      	lsls	r3, r5, #3
 80048a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048a6:	00e2      	lsls	r2, r4, #3
 80048a8:	4614      	mov	r4, r2
 80048aa:	461d      	mov	r5, r3
 80048ac:	4643      	mov	r3, r8
 80048ae:	18e3      	adds	r3, r4, r3
 80048b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048b4:	464b      	mov	r3, r9
 80048b6:	eb45 0303 	adc.w	r3, r5, r3
 80048ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048da:	4629      	mov	r1, r5
 80048dc:	008b      	lsls	r3, r1, #2
 80048de:	4621      	mov	r1, r4
 80048e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e4:	4621      	mov	r1, r4
 80048e6:	008a      	lsls	r2, r1, #2
 80048e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048ec:	f7fc f9b4 	bl	8000c58 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4b60      	ldr	r3, [pc, #384]	; (8004a78 <UART_SetConfig+0x4e4>)
 80048f6:	fba3 2302 	umull	r2, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	011c      	lsls	r4, r3, #4
 80048fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004902:	2200      	movs	r2, #0
 8004904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004908:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800490c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004910:	4642      	mov	r2, r8
 8004912:	464b      	mov	r3, r9
 8004914:	1891      	adds	r1, r2, r2
 8004916:	61b9      	str	r1, [r7, #24]
 8004918:	415b      	adcs	r3, r3
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004920:	4641      	mov	r1, r8
 8004922:	1851      	adds	r1, r2, r1
 8004924:	6139      	str	r1, [r7, #16]
 8004926:	4649      	mov	r1, r9
 8004928:	414b      	adcs	r3, r1
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004938:	4659      	mov	r1, fp
 800493a:	00cb      	lsls	r3, r1, #3
 800493c:	4651      	mov	r1, sl
 800493e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004942:	4651      	mov	r1, sl
 8004944:	00ca      	lsls	r2, r1, #3
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	4603      	mov	r3, r0
 800494c:	4642      	mov	r2, r8
 800494e:	189b      	adds	r3, r3, r2
 8004950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004954:	464b      	mov	r3, r9
 8004956:	460a      	mov	r2, r1
 8004958:	eb42 0303 	adc.w	r3, r2, r3
 800495c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	67bb      	str	r3, [r7, #120]	; 0x78
 800496a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004978:	4649      	mov	r1, r9
 800497a:	008b      	lsls	r3, r1, #2
 800497c:	4641      	mov	r1, r8
 800497e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004982:	4641      	mov	r1, r8
 8004984:	008a      	lsls	r2, r1, #2
 8004986:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800498a:	f7fc f965 	bl	8000c58 <__aeabi_uldivmod>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4611      	mov	r1, r2
 8004994:	4b38      	ldr	r3, [pc, #224]	; (8004a78 <UART_SetConfig+0x4e4>)
 8004996:	fba3 2301 	umull	r2, r3, r3, r1
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2264      	movs	r2, #100	; 0x64
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	1acb      	subs	r3, r1, r3
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	3332      	adds	r3, #50	; 0x32
 80049a8:	4a33      	ldr	r2, [pc, #204]	; (8004a78 <UART_SetConfig+0x4e4>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b4:	441c      	add	r4, r3
 80049b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ba:	2200      	movs	r2, #0
 80049bc:	673b      	str	r3, [r7, #112]	; 0x70
 80049be:	677a      	str	r2, [r7, #116]	; 0x74
 80049c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049c4:	4642      	mov	r2, r8
 80049c6:	464b      	mov	r3, r9
 80049c8:	1891      	adds	r1, r2, r2
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	415b      	adcs	r3, r3
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049d4:	4641      	mov	r1, r8
 80049d6:	1851      	adds	r1, r2, r1
 80049d8:	6039      	str	r1, [r7, #0]
 80049da:	4649      	mov	r1, r9
 80049dc:	414b      	adcs	r3, r1
 80049de:	607b      	str	r3, [r7, #4]
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049ec:	4659      	mov	r1, fp
 80049ee:	00cb      	lsls	r3, r1, #3
 80049f0:	4651      	mov	r1, sl
 80049f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f6:	4651      	mov	r1, sl
 80049f8:	00ca      	lsls	r2, r1, #3
 80049fa:	4610      	mov	r0, r2
 80049fc:	4619      	mov	r1, r3
 80049fe:	4603      	mov	r3, r0
 8004a00:	4642      	mov	r2, r8
 8004a02:	189b      	adds	r3, r3, r2
 8004a04:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a06:	464b      	mov	r3, r9
 8004a08:	460a      	mov	r2, r1
 8004a0a:	eb42 0303 	adc.w	r3, r2, r3
 8004a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	663b      	str	r3, [r7, #96]	; 0x60
 8004a1a:	667a      	str	r2, [r7, #100]	; 0x64
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a28:	4649      	mov	r1, r9
 8004a2a:	008b      	lsls	r3, r1, #2
 8004a2c:	4641      	mov	r1, r8
 8004a2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a32:	4641      	mov	r1, r8
 8004a34:	008a      	lsls	r2, r1, #2
 8004a36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a3a:	f7fc f90d 	bl	8000c58 <__aeabi_uldivmod>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <UART_SetConfig+0x4e4>)
 8004a44:	fba3 1302 	umull	r1, r3, r3, r2
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	2164      	movs	r1, #100	; 0x64
 8004a4c:	fb01 f303 	mul.w	r3, r1, r3
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	3332      	adds	r3, #50	; 0x32
 8004a56:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <UART_SetConfig+0x4e4>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f003 020f 	and.w	r2, r3, #15
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4422      	add	r2, r4
 8004a6a:	609a      	str	r2, [r3, #8]
}
 8004a6c:	bf00      	nop
 8004a6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a72:	46bd      	mov	sp, r7
 8004a74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a78:	51eb851f 	.word	0x51eb851f

08004a7c <atoi>:
 8004a7c:	220a      	movs	r2, #10
 8004a7e:	2100      	movs	r1, #0
 8004a80:	f000 bdac 	b.w	80055dc <strtol>

08004a84 <__cvt>:
 8004a84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a88:	ec55 4b10 	vmov	r4, r5, d0
 8004a8c:	2d00      	cmp	r5, #0
 8004a8e:	460e      	mov	r6, r1
 8004a90:	4619      	mov	r1, r3
 8004a92:	462b      	mov	r3, r5
 8004a94:	bfbb      	ittet	lt
 8004a96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a9a:	461d      	movlt	r5, r3
 8004a9c:	2300      	movge	r3, #0
 8004a9e:	232d      	movlt	r3, #45	; 0x2d
 8004aa0:	700b      	strb	r3, [r1, #0]
 8004aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aa4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004aa8:	4691      	mov	r9, r2
 8004aaa:	f023 0820 	bic.w	r8, r3, #32
 8004aae:	bfbc      	itt	lt
 8004ab0:	4622      	movlt	r2, r4
 8004ab2:	4614      	movlt	r4, r2
 8004ab4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ab8:	d005      	beq.n	8004ac6 <__cvt+0x42>
 8004aba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004abe:	d100      	bne.n	8004ac2 <__cvt+0x3e>
 8004ac0:	3601      	adds	r6, #1
 8004ac2:	2102      	movs	r1, #2
 8004ac4:	e000      	b.n	8004ac8 <__cvt+0x44>
 8004ac6:	2103      	movs	r1, #3
 8004ac8:	ab03      	add	r3, sp, #12
 8004aca:	9301      	str	r3, [sp, #4]
 8004acc:	ab02      	add	r3, sp, #8
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	ec45 4b10 	vmov	d0, r4, r5
 8004ad4:	4653      	mov	r3, sl
 8004ad6:	4632      	mov	r2, r6
 8004ad8:	f000 fe6a 	bl	80057b0 <_dtoa_r>
 8004adc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ae0:	4607      	mov	r7, r0
 8004ae2:	d102      	bne.n	8004aea <__cvt+0x66>
 8004ae4:	f019 0f01 	tst.w	r9, #1
 8004ae8:	d022      	beq.n	8004b30 <__cvt+0xac>
 8004aea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004aee:	eb07 0906 	add.w	r9, r7, r6
 8004af2:	d110      	bne.n	8004b16 <__cvt+0x92>
 8004af4:	783b      	ldrb	r3, [r7, #0]
 8004af6:	2b30      	cmp	r3, #48	; 0x30
 8004af8:	d10a      	bne.n	8004b10 <__cvt+0x8c>
 8004afa:	2200      	movs	r2, #0
 8004afc:	2300      	movs	r3, #0
 8004afe:	4620      	mov	r0, r4
 8004b00:	4629      	mov	r1, r5
 8004b02:	f7fb ffe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b06:	b918      	cbnz	r0, 8004b10 <__cvt+0x8c>
 8004b08:	f1c6 0601 	rsb	r6, r6, #1
 8004b0c:	f8ca 6000 	str.w	r6, [sl]
 8004b10:	f8da 3000 	ldr.w	r3, [sl]
 8004b14:	4499      	add	r9, r3
 8004b16:	2200      	movs	r2, #0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	f7fb ffdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b22:	b108      	cbz	r0, 8004b28 <__cvt+0xa4>
 8004b24:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b28:	2230      	movs	r2, #48	; 0x30
 8004b2a:	9b03      	ldr	r3, [sp, #12]
 8004b2c:	454b      	cmp	r3, r9
 8004b2e:	d307      	bcc.n	8004b40 <__cvt+0xbc>
 8004b30:	9b03      	ldr	r3, [sp, #12]
 8004b32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b34:	1bdb      	subs	r3, r3, r7
 8004b36:	4638      	mov	r0, r7
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	b004      	add	sp, #16
 8004b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b40:	1c59      	adds	r1, r3, #1
 8004b42:	9103      	str	r1, [sp, #12]
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e7f0      	b.n	8004b2a <__cvt+0xa6>

08004b48 <__exponent>:
 8004b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2900      	cmp	r1, #0
 8004b4e:	bfb8      	it	lt
 8004b50:	4249      	neglt	r1, r1
 8004b52:	f803 2b02 	strb.w	r2, [r3], #2
 8004b56:	bfb4      	ite	lt
 8004b58:	222d      	movlt	r2, #45	; 0x2d
 8004b5a:	222b      	movge	r2, #43	; 0x2b
 8004b5c:	2909      	cmp	r1, #9
 8004b5e:	7042      	strb	r2, [r0, #1]
 8004b60:	dd2a      	ble.n	8004bb8 <__exponent+0x70>
 8004b62:	f10d 0207 	add.w	r2, sp, #7
 8004b66:	4617      	mov	r7, r2
 8004b68:	260a      	movs	r6, #10
 8004b6a:	4694      	mov	ip, r2
 8004b6c:	fb91 f5f6 	sdiv	r5, r1, r6
 8004b70:	fb06 1415 	mls	r4, r6, r5, r1
 8004b74:	3430      	adds	r4, #48	; 0x30
 8004b76:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	2c63      	cmp	r4, #99	; 0x63
 8004b7e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8004b82:	4629      	mov	r1, r5
 8004b84:	dcf1      	bgt.n	8004b6a <__exponent+0x22>
 8004b86:	3130      	adds	r1, #48	; 0x30
 8004b88:	f1ac 0402 	sub.w	r4, ip, #2
 8004b8c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004b90:	1c41      	adds	r1, r0, #1
 8004b92:	4622      	mov	r2, r4
 8004b94:	42ba      	cmp	r2, r7
 8004b96:	d30a      	bcc.n	8004bae <__exponent+0x66>
 8004b98:	f10d 0209 	add.w	r2, sp, #9
 8004b9c:	eba2 020c 	sub.w	r2, r2, ip
 8004ba0:	42bc      	cmp	r4, r7
 8004ba2:	bf88      	it	hi
 8004ba4:	2200      	movhi	r2, #0
 8004ba6:	4413      	add	r3, r2
 8004ba8:	1a18      	subs	r0, r3, r0
 8004baa:	b003      	add	sp, #12
 8004bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bae:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004bb2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004bb6:	e7ed      	b.n	8004b94 <__exponent+0x4c>
 8004bb8:	2330      	movs	r3, #48	; 0x30
 8004bba:	3130      	adds	r1, #48	; 0x30
 8004bbc:	7083      	strb	r3, [r0, #2]
 8004bbe:	70c1      	strb	r1, [r0, #3]
 8004bc0:	1d03      	adds	r3, r0, #4
 8004bc2:	e7f1      	b.n	8004ba8 <__exponent+0x60>

08004bc4 <_printf_float>:
 8004bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc8:	ed2d 8b02 	vpush	{d8}
 8004bcc:	b08d      	sub	sp, #52	; 0x34
 8004bce:	460c      	mov	r4, r1
 8004bd0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004bd4:	4616      	mov	r6, r2
 8004bd6:	461f      	mov	r7, r3
 8004bd8:	4605      	mov	r5, r0
 8004bda:	f000 fd2f 	bl	800563c <_localeconv_r>
 8004bde:	f8d0 a000 	ldr.w	sl, [r0]
 8004be2:	4650      	mov	r0, sl
 8004be4:	f7fb fb4c 	bl	8000280 <strlen>
 8004be8:	2300      	movs	r3, #0
 8004bea:	930a      	str	r3, [sp, #40]	; 0x28
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	9305      	str	r3, [sp, #20]
 8004bf0:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004bf8:	3307      	adds	r3, #7
 8004bfa:	f023 0307 	bic.w	r3, r3, #7
 8004bfe:	f103 0208 	add.w	r2, r3, #8
 8004c02:	f8c8 2000 	str.w	r2, [r8]
 8004c06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c0e:	9307      	str	r3, [sp, #28]
 8004c10:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c14:	ee08 0a10 	vmov	s16, r0
 8004c18:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004c1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c20:	4b9e      	ldr	r3, [pc, #632]	; (8004e9c <_printf_float+0x2d8>)
 8004c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c26:	f7fb ff89 	bl	8000b3c <__aeabi_dcmpun>
 8004c2a:	bb88      	cbnz	r0, 8004c90 <_printf_float+0xcc>
 8004c2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c30:	4b9a      	ldr	r3, [pc, #616]	; (8004e9c <_printf_float+0x2d8>)
 8004c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c36:	f7fb ff63 	bl	8000b00 <__aeabi_dcmple>
 8004c3a:	bb48      	cbnz	r0, 8004c90 <_printf_float+0xcc>
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4640      	mov	r0, r8
 8004c42:	4649      	mov	r1, r9
 8004c44:	f7fb ff52 	bl	8000aec <__aeabi_dcmplt>
 8004c48:	b110      	cbz	r0, 8004c50 <_printf_float+0x8c>
 8004c4a:	232d      	movs	r3, #45	; 0x2d
 8004c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c50:	4a93      	ldr	r2, [pc, #588]	; (8004ea0 <_printf_float+0x2dc>)
 8004c52:	4b94      	ldr	r3, [pc, #592]	; (8004ea4 <_printf_float+0x2e0>)
 8004c54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c58:	bf94      	ite	ls
 8004c5a:	4690      	movls	r8, r2
 8004c5c:	4698      	movhi	r8, r3
 8004c5e:	2303      	movs	r3, #3
 8004c60:	6123      	str	r3, [r4, #16]
 8004c62:	9b05      	ldr	r3, [sp, #20]
 8004c64:	f023 0304 	bic.w	r3, r3, #4
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	f04f 0900 	mov.w	r9, #0
 8004c6e:	9700      	str	r7, [sp, #0]
 8004c70:	4633      	mov	r3, r6
 8004c72:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c74:	4621      	mov	r1, r4
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 f9da 	bl	8005030 <_printf_common>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	f040 8090 	bne.w	8004da2 <_printf_float+0x1de>
 8004c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c86:	b00d      	add	sp, #52	; 0x34
 8004c88:	ecbd 8b02 	vpop	{d8}
 8004c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c90:	4642      	mov	r2, r8
 8004c92:	464b      	mov	r3, r9
 8004c94:	4640      	mov	r0, r8
 8004c96:	4649      	mov	r1, r9
 8004c98:	f7fb ff50 	bl	8000b3c <__aeabi_dcmpun>
 8004c9c:	b140      	cbz	r0, 8004cb0 <_printf_float+0xec>
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bfbc      	itt	lt
 8004ca4:	232d      	movlt	r3, #45	; 0x2d
 8004ca6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004caa:	4a7f      	ldr	r2, [pc, #508]	; (8004ea8 <_printf_float+0x2e4>)
 8004cac:	4b7f      	ldr	r3, [pc, #508]	; (8004eac <_printf_float+0x2e8>)
 8004cae:	e7d1      	b.n	8004c54 <_printf_float+0x90>
 8004cb0:	6863      	ldr	r3, [r4, #4]
 8004cb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004cb6:	9206      	str	r2, [sp, #24]
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	d13f      	bne.n	8004d3c <_printf_float+0x178>
 8004cbc:	2306      	movs	r3, #6
 8004cbe:	6063      	str	r3, [r4, #4]
 8004cc0:	9b05      	ldr	r3, [sp, #20]
 8004cc2:	6861      	ldr	r1, [r4, #4]
 8004cc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004cc8:	2300      	movs	r3, #0
 8004cca:	9303      	str	r3, [sp, #12]
 8004ccc:	ab0a      	add	r3, sp, #40	; 0x28
 8004cce:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004cd2:	ab09      	add	r3, sp, #36	; 0x24
 8004cd4:	ec49 8b10 	vmov	d0, r8, r9
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	6022      	str	r2, [r4, #0]
 8004cdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	f7ff fecf 	bl	8004a84 <__cvt>
 8004ce6:	9b06      	ldr	r3, [sp, #24]
 8004ce8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cea:	2b47      	cmp	r3, #71	; 0x47
 8004cec:	4680      	mov	r8, r0
 8004cee:	d108      	bne.n	8004d02 <_printf_float+0x13e>
 8004cf0:	1cc8      	adds	r0, r1, #3
 8004cf2:	db02      	blt.n	8004cfa <_printf_float+0x136>
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	4299      	cmp	r1, r3
 8004cf8:	dd41      	ble.n	8004d7e <_printf_float+0x1ba>
 8004cfa:	f1ab 0302 	sub.w	r3, fp, #2
 8004cfe:	fa5f fb83 	uxtb.w	fp, r3
 8004d02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d06:	d820      	bhi.n	8004d4a <_printf_float+0x186>
 8004d08:	3901      	subs	r1, #1
 8004d0a:	465a      	mov	r2, fp
 8004d0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d10:	9109      	str	r1, [sp, #36]	; 0x24
 8004d12:	f7ff ff19 	bl	8004b48 <__exponent>
 8004d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d18:	1813      	adds	r3, r2, r0
 8004d1a:	2a01      	cmp	r2, #1
 8004d1c:	4681      	mov	r9, r0
 8004d1e:	6123      	str	r3, [r4, #16]
 8004d20:	dc02      	bgt.n	8004d28 <_printf_float+0x164>
 8004d22:	6822      	ldr	r2, [r4, #0]
 8004d24:	07d2      	lsls	r2, r2, #31
 8004d26:	d501      	bpl.n	8004d2c <_printf_float+0x168>
 8004d28:	3301      	adds	r3, #1
 8004d2a:	6123      	str	r3, [r4, #16]
 8004d2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d09c      	beq.n	8004c6e <_printf_float+0xaa>
 8004d34:	232d      	movs	r3, #45	; 0x2d
 8004d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d3a:	e798      	b.n	8004c6e <_printf_float+0xaa>
 8004d3c:	9a06      	ldr	r2, [sp, #24]
 8004d3e:	2a47      	cmp	r2, #71	; 0x47
 8004d40:	d1be      	bne.n	8004cc0 <_printf_float+0xfc>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1bc      	bne.n	8004cc0 <_printf_float+0xfc>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e7b9      	b.n	8004cbe <_printf_float+0xfa>
 8004d4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d4e:	d118      	bne.n	8004d82 <_printf_float+0x1be>
 8004d50:	2900      	cmp	r1, #0
 8004d52:	6863      	ldr	r3, [r4, #4]
 8004d54:	dd0b      	ble.n	8004d6e <_printf_float+0x1aa>
 8004d56:	6121      	str	r1, [r4, #16]
 8004d58:	b913      	cbnz	r3, 8004d60 <_printf_float+0x19c>
 8004d5a:	6822      	ldr	r2, [r4, #0]
 8004d5c:	07d0      	lsls	r0, r2, #31
 8004d5e:	d502      	bpl.n	8004d66 <_printf_float+0x1a2>
 8004d60:	3301      	adds	r3, #1
 8004d62:	440b      	add	r3, r1
 8004d64:	6123      	str	r3, [r4, #16]
 8004d66:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d68:	f04f 0900 	mov.w	r9, #0
 8004d6c:	e7de      	b.n	8004d2c <_printf_float+0x168>
 8004d6e:	b913      	cbnz	r3, 8004d76 <_printf_float+0x1b2>
 8004d70:	6822      	ldr	r2, [r4, #0]
 8004d72:	07d2      	lsls	r2, r2, #31
 8004d74:	d501      	bpl.n	8004d7a <_printf_float+0x1b6>
 8004d76:	3302      	adds	r3, #2
 8004d78:	e7f4      	b.n	8004d64 <_printf_float+0x1a0>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e7f2      	b.n	8004d64 <_printf_float+0x1a0>
 8004d7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d84:	4299      	cmp	r1, r3
 8004d86:	db05      	blt.n	8004d94 <_printf_float+0x1d0>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	6121      	str	r1, [r4, #16]
 8004d8c:	07d8      	lsls	r0, r3, #31
 8004d8e:	d5ea      	bpl.n	8004d66 <_printf_float+0x1a2>
 8004d90:	1c4b      	adds	r3, r1, #1
 8004d92:	e7e7      	b.n	8004d64 <_printf_float+0x1a0>
 8004d94:	2900      	cmp	r1, #0
 8004d96:	bfd4      	ite	le
 8004d98:	f1c1 0202 	rsble	r2, r1, #2
 8004d9c:	2201      	movgt	r2, #1
 8004d9e:	4413      	add	r3, r2
 8004da0:	e7e0      	b.n	8004d64 <_printf_float+0x1a0>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	055a      	lsls	r2, r3, #21
 8004da6:	d407      	bmi.n	8004db8 <_printf_float+0x1f4>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	4642      	mov	r2, r8
 8004dac:	4631      	mov	r1, r6
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	d12c      	bne.n	8004e10 <_printf_float+0x24c>
 8004db6:	e764      	b.n	8004c82 <_printf_float+0xbe>
 8004db8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004dbc:	f240 80e0 	bls.w	8004f80 <_printf_float+0x3bc>
 8004dc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f7fb fe86 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dcc:	2800      	cmp	r0, #0
 8004dce:	d034      	beq.n	8004e3a <_printf_float+0x276>
 8004dd0:	4a37      	ldr	r2, [pc, #220]	; (8004eb0 <_printf_float+0x2ec>)
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f af51 	beq.w	8004c82 <_printf_float+0xbe>
 8004de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004de4:	429a      	cmp	r2, r3
 8004de6:	db02      	blt.n	8004dee <_printf_float+0x22a>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	07d8      	lsls	r0, r3, #31
 8004dec:	d510      	bpl.n	8004e10 <_printf_float+0x24c>
 8004dee:	ee18 3a10 	vmov	r3, s16
 8004df2:	4652      	mov	r2, sl
 8004df4:	4631      	mov	r1, r6
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b8      	blx	r7
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f43f af41 	beq.w	8004c82 <_printf_float+0xbe>
 8004e00:	f04f 0800 	mov.w	r8, #0
 8004e04:	f104 091a 	add.w	r9, r4, #26
 8004e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	4543      	cmp	r3, r8
 8004e0e:	dc09      	bgt.n	8004e24 <_printf_float+0x260>
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	079b      	lsls	r3, r3, #30
 8004e14:	f100 8107 	bmi.w	8005026 <_printf_float+0x462>
 8004e18:	68e0      	ldr	r0, [r4, #12]
 8004e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e1c:	4298      	cmp	r0, r3
 8004e1e:	bfb8      	it	lt
 8004e20:	4618      	movlt	r0, r3
 8004e22:	e730      	b.n	8004c86 <_printf_float+0xc2>
 8004e24:	2301      	movs	r3, #1
 8004e26:	464a      	mov	r2, r9
 8004e28:	4631      	mov	r1, r6
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	47b8      	blx	r7
 8004e2e:	3001      	adds	r0, #1
 8004e30:	f43f af27 	beq.w	8004c82 <_printf_float+0xbe>
 8004e34:	f108 0801 	add.w	r8, r8, #1
 8004e38:	e7e6      	b.n	8004e08 <_printf_float+0x244>
 8004e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	dc39      	bgt.n	8004eb4 <_printf_float+0x2f0>
 8004e40:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <_printf_float+0x2ec>)
 8004e42:	2301      	movs	r3, #1
 8004e44:	4631      	mov	r1, r6
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b8      	blx	r7
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f af19 	beq.w	8004c82 <_printf_float+0xbe>
 8004e50:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e54:	4313      	orrs	r3, r2
 8004e56:	d102      	bne.n	8004e5e <_printf_float+0x29a>
 8004e58:	6823      	ldr	r3, [r4, #0]
 8004e5a:	07d9      	lsls	r1, r3, #31
 8004e5c:	d5d8      	bpl.n	8004e10 <_printf_float+0x24c>
 8004e5e:	ee18 3a10 	vmov	r3, s16
 8004e62:	4652      	mov	r2, sl
 8004e64:	4631      	mov	r1, r6
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b8      	blx	r7
 8004e6a:	3001      	adds	r0, #1
 8004e6c:	f43f af09 	beq.w	8004c82 <_printf_float+0xbe>
 8004e70:	f04f 0900 	mov.w	r9, #0
 8004e74:	f104 0a1a 	add.w	sl, r4, #26
 8004e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e7a:	425b      	negs	r3, r3
 8004e7c:	454b      	cmp	r3, r9
 8004e7e:	dc01      	bgt.n	8004e84 <_printf_float+0x2c0>
 8004e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e82:	e792      	b.n	8004daa <_printf_float+0x1e6>
 8004e84:	2301      	movs	r3, #1
 8004e86:	4652      	mov	r2, sl
 8004e88:	4631      	mov	r1, r6
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	47b8      	blx	r7
 8004e8e:	3001      	adds	r0, #1
 8004e90:	f43f aef7 	beq.w	8004c82 <_printf_float+0xbe>
 8004e94:	f109 0901 	add.w	r9, r9, #1
 8004e98:	e7ee      	b.n	8004e78 <_printf_float+0x2b4>
 8004e9a:	bf00      	nop
 8004e9c:	7fefffff 	.word	0x7fefffff
 8004ea0:	080087f0 	.word	0x080087f0
 8004ea4:	080087f4 	.word	0x080087f4
 8004ea8:	080087f8 	.word	0x080087f8
 8004eac:	080087fc 	.word	0x080087fc
 8004eb0:	08008800 	.word	0x08008800
 8004eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	bfa8      	it	ge
 8004ebc:	461a      	movge	r2, r3
 8004ebe:	2a00      	cmp	r2, #0
 8004ec0:	4691      	mov	r9, r2
 8004ec2:	dc37      	bgt.n	8004f34 <_printf_float+0x370>
 8004ec4:	f04f 0b00 	mov.w	fp, #0
 8004ec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ecc:	f104 021a 	add.w	r2, r4, #26
 8004ed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ed2:	9305      	str	r3, [sp, #20]
 8004ed4:	eba3 0309 	sub.w	r3, r3, r9
 8004ed8:	455b      	cmp	r3, fp
 8004eda:	dc33      	bgt.n	8004f44 <_printf_float+0x380>
 8004edc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	db3b      	blt.n	8004f5c <_printf_float+0x398>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	07da      	lsls	r2, r3, #31
 8004ee8:	d438      	bmi.n	8004f5c <_printf_float+0x398>
 8004eea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004eee:	eba2 0903 	sub.w	r9, r2, r3
 8004ef2:	9b05      	ldr	r3, [sp, #20]
 8004ef4:	1ad2      	subs	r2, r2, r3
 8004ef6:	4591      	cmp	r9, r2
 8004ef8:	bfa8      	it	ge
 8004efa:	4691      	movge	r9, r2
 8004efc:	f1b9 0f00 	cmp.w	r9, #0
 8004f00:	dc35      	bgt.n	8004f6e <_printf_float+0x3aa>
 8004f02:	f04f 0800 	mov.w	r8, #0
 8004f06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f0a:	f104 0a1a 	add.w	sl, r4, #26
 8004f0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	eba3 0309 	sub.w	r3, r3, r9
 8004f18:	4543      	cmp	r3, r8
 8004f1a:	f77f af79 	ble.w	8004e10 <_printf_float+0x24c>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	4652      	mov	r2, sl
 8004f22:	4631      	mov	r1, r6
 8004f24:	4628      	mov	r0, r5
 8004f26:	47b8      	blx	r7
 8004f28:	3001      	adds	r0, #1
 8004f2a:	f43f aeaa 	beq.w	8004c82 <_printf_float+0xbe>
 8004f2e:	f108 0801 	add.w	r8, r8, #1
 8004f32:	e7ec      	b.n	8004f0e <_printf_float+0x34a>
 8004f34:	4613      	mov	r3, r2
 8004f36:	4631      	mov	r1, r6
 8004f38:	4642      	mov	r2, r8
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	47b8      	blx	r7
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d1c0      	bne.n	8004ec4 <_printf_float+0x300>
 8004f42:	e69e      	b.n	8004c82 <_printf_float+0xbe>
 8004f44:	2301      	movs	r3, #1
 8004f46:	4631      	mov	r1, r6
 8004f48:	4628      	mov	r0, r5
 8004f4a:	9205      	str	r2, [sp, #20]
 8004f4c:	47b8      	blx	r7
 8004f4e:	3001      	adds	r0, #1
 8004f50:	f43f ae97 	beq.w	8004c82 <_printf_float+0xbe>
 8004f54:	9a05      	ldr	r2, [sp, #20]
 8004f56:	f10b 0b01 	add.w	fp, fp, #1
 8004f5a:	e7b9      	b.n	8004ed0 <_printf_float+0x30c>
 8004f5c:	ee18 3a10 	vmov	r3, s16
 8004f60:	4652      	mov	r2, sl
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d1be      	bne.n	8004eea <_printf_float+0x326>
 8004f6c:	e689      	b.n	8004c82 <_printf_float+0xbe>
 8004f6e:	9a05      	ldr	r2, [sp, #20]
 8004f70:	464b      	mov	r3, r9
 8004f72:	4442      	add	r2, r8
 8004f74:	4631      	mov	r1, r6
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b8      	blx	r7
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d1c1      	bne.n	8004f02 <_printf_float+0x33e>
 8004f7e:	e680      	b.n	8004c82 <_printf_float+0xbe>
 8004f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f82:	2a01      	cmp	r2, #1
 8004f84:	dc01      	bgt.n	8004f8a <_printf_float+0x3c6>
 8004f86:	07db      	lsls	r3, r3, #31
 8004f88:	d53a      	bpl.n	8005000 <_printf_float+0x43c>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b8      	blx	r7
 8004f94:	3001      	adds	r0, #1
 8004f96:	f43f ae74 	beq.w	8004c82 <_printf_float+0xbe>
 8004f9a:	ee18 3a10 	vmov	r3, s16
 8004f9e:	4652      	mov	r2, sl
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	47b8      	blx	r7
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	f43f ae6b 	beq.w	8004c82 <_printf_float+0xbe>
 8004fac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004fb8:	f7fb fd8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fbc:	b9d8      	cbnz	r0, 8004ff6 <_printf_float+0x432>
 8004fbe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004fc2:	f108 0201 	add.w	r2, r8, #1
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4628      	mov	r0, r5
 8004fca:	47b8      	blx	r7
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d10e      	bne.n	8004fee <_printf_float+0x42a>
 8004fd0:	e657      	b.n	8004c82 <_printf_float+0xbe>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4652      	mov	r2, sl
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	4628      	mov	r0, r5
 8004fda:	47b8      	blx	r7
 8004fdc:	3001      	adds	r0, #1
 8004fde:	f43f ae50 	beq.w	8004c82 <_printf_float+0xbe>
 8004fe2:	f108 0801 	add.w	r8, r8, #1
 8004fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	4543      	cmp	r3, r8
 8004fec:	dcf1      	bgt.n	8004fd2 <_printf_float+0x40e>
 8004fee:	464b      	mov	r3, r9
 8004ff0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ff4:	e6da      	b.n	8004dac <_printf_float+0x1e8>
 8004ff6:	f04f 0800 	mov.w	r8, #0
 8004ffa:	f104 0a1a 	add.w	sl, r4, #26
 8004ffe:	e7f2      	b.n	8004fe6 <_printf_float+0x422>
 8005000:	2301      	movs	r3, #1
 8005002:	4642      	mov	r2, r8
 8005004:	e7df      	b.n	8004fc6 <_printf_float+0x402>
 8005006:	2301      	movs	r3, #1
 8005008:	464a      	mov	r2, r9
 800500a:	4631      	mov	r1, r6
 800500c:	4628      	mov	r0, r5
 800500e:	47b8      	blx	r7
 8005010:	3001      	adds	r0, #1
 8005012:	f43f ae36 	beq.w	8004c82 <_printf_float+0xbe>
 8005016:	f108 0801 	add.w	r8, r8, #1
 800501a:	68e3      	ldr	r3, [r4, #12]
 800501c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800501e:	1a5b      	subs	r3, r3, r1
 8005020:	4543      	cmp	r3, r8
 8005022:	dcf0      	bgt.n	8005006 <_printf_float+0x442>
 8005024:	e6f8      	b.n	8004e18 <_printf_float+0x254>
 8005026:	f04f 0800 	mov.w	r8, #0
 800502a:	f104 0919 	add.w	r9, r4, #25
 800502e:	e7f4      	b.n	800501a <_printf_float+0x456>

08005030 <_printf_common>:
 8005030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005034:	4616      	mov	r6, r2
 8005036:	4699      	mov	r9, r3
 8005038:	688a      	ldr	r2, [r1, #8]
 800503a:	690b      	ldr	r3, [r1, #16]
 800503c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005040:	4293      	cmp	r3, r2
 8005042:	bfb8      	it	lt
 8005044:	4613      	movlt	r3, r2
 8005046:	6033      	str	r3, [r6, #0]
 8005048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800504c:	4607      	mov	r7, r0
 800504e:	460c      	mov	r4, r1
 8005050:	b10a      	cbz	r2, 8005056 <_printf_common+0x26>
 8005052:	3301      	adds	r3, #1
 8005054:	6033      	str	r3, [r6, #0]
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	0699      	lsls	r1, r3, #26
 800505a:	bf42      	ittt	mi
 800505c:	6833      	ldrmi	r3, [r6, #0]
 800505e:	3302      	addmi	r3, #2
 8005060:	6033      	strmi	r3, [r6, #0]
 8005062:	6825      	ldr	r5, [r4, #0]
 8005064:	f015 0506 	ands.w	r5, r5, #6
 8005068:	d106      	bne.n	8005078 <_printf_common+0x48>
 800506a:	f104 0a19 	add.w	sl, r4, #25
 800506e:	68e3      	ldr	r3, [r4, #12]
 8005070:	6832      	ldr	r2, [r6, #0]
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	42ab      	cmp	r3, r5
 8005076:	dc26      	bgt.n	80050c6 <_printf_common+0x96>
 8005078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800507c:	1e13      	subs	r3, r2, #0
 800507e:	6822      	ldr	r2, [r4, #0]
 8005080:	bf18      	it	ne
 8005082:	2301      	movne	r3, #1
 8005084:	0692      	lsls	r2, r2, #26
 8005086:	d42b      	bmi.n	80050e0 <_printf_common+0xb0>
 8005088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800508c:	4649      	mov	r1, r9
 800508e:	4638      	mov	r0, r7
 8005090:	47c0      	blx	r8
 8005092:	3001      	adds	r0, #1
 8005094:	d01e      	beq.n	80050d4 <_printf_common+0xa4>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	6922      	ldr	r2, [r4, #16]
 800509a:	f003 0306 	and.w	r3, r3, #6
 800509e:	2b04      	cmp	r3, #4
 80050a0:	bf02      	ittt	eq
 80050a2:	68e5      	ldreq	r5, [r4, #12]
 80050a4:	6833      	ldreq	r3, [r6, #0]
 80050a6:	1aed      	subeq	r5, r5, r3
 80050a8:	68a3      	ldr	r3, [r4, #8]
 80050aa:	bf0c      	ite	eq
 80050ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050b0:	2500      	movne	r5, #0
 80050b2:	4293      	cmp	r3, r2
 80050b4:	bfc4      	itt	gt
 80050b6:	1a9b      	subgt	r3, r3, r2
 80050b8:	18ed      	addgt	r5, r5, r3
 80050ba:	2600      	movs	r6, #0
 80050bc:	341a      	adds	r4, #26
 80050be:	42b5      	cmp	r5, r6
 80050c0:	d11a      	bne.n	80050f8 <_printf_common+0xc8>
 80050c2:	2000      	movs	r0, #0
 80050c4:	e008      	b.n	80050d8 <_printf_common+0xa8>
 80050c6:	2301      	movs	r3, #1
 80050c8:	4652      	mov	r2, sl
 80050ca:	4649      	mov	r1, r9
 80050cc:	4638      	mov	r0, r7
 80050ce:	47c0      	blx	r8
 80050d0:	3001      	adds	r0, #1
 80050d2:	d103      	bne.n	80050dc <_printf_common+0xac>
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050dc:	3501      	adds	r5, #1
 80050de:	e7c6      	b.n	800506e <_printf_common+0x3e>
 80050e0:	18e1      	adds	r1, r4, r3
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	2030      	movs	r0, #48	; 0x30
 80050e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050ea:	4422      	add	r2, r4
 80050ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050f4:	3302      	adds	r3, #2
 80050f6:	e7c7      	b.n	8005088 <_printf_common+0x58>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4622      	mov	r2, r4
 80050fc:	4649      	mov	r1, r9
 80050fe:	4638      	mov	r0, r7
 8005100:	47c0      	blx	r8
 8005102:	3001      	adds	r0, #1
 8005104:	d0e6      	beq.n	80050d4 <_printf_common+0xa4>
 8005106:	3601      	adds	r6, #1
 8005108:	e7d9      	b.n	80050be <_printf_common+0x8e>
	...

0800510c <_printf_i>:
 800510c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005110:	7e0f      	ldrb	r7, [r1, #24]
 8005112:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005114:	2f78      	cmp	r7, #120	; 0x78
 8005116:	4691      	mov	r9, r2
 8005118:	4680      	mov	r8, r0
 800511a:	460c      	mov	r4, r1
 800511c:	469a      	mov	sl, r3
 800511e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005122:	d807      	bhi.n	8005134 <_printf_i+0x28>
 8005124:	2f62      	cmp	r7, #98	; 0x62
 8005126:	d80a      	bhi.n	800513e <_printf_i+0x32>
 8005128:	2f00      	cmp	r7, #0
 800512a:	f000 80d4 	beq.w	80052d6 <_printf_i+0x1ca>
 800512e:	2f58      	cmp	r7, #88	; 0x58
 8005130:	f000 80c0 	beq.w	80052b4 <_printf_i+0x1a8>
 8005134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800513c:	e03a      	b.n	80051b4 <_printf_i+0xa8>
 800513e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005142:	2b15      	cmp	r3, #21
 8005144:	d8f6      	bhi.n	8005134 <_printf_i+0x28>
 8005146:	a101      	add	r1, pc, #4	; (adr r1, 800514c <_printf_i+0x40>)
 8005148:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800514c:	080051a5 	.word	0x080051a5
 8005150:	080051b9 	.word	0x080051b9
 8005154:	08005135 	.word	0x08005135
 8005158:	08005135 	.word	0x08005135
 800515c:	08005135 	.word	0x08005135
 8005160:	08005135 	.word	0x08005135
 8005164:	080051b9 	.word	0x080051b9
 8005168:	08005135 	.word	0x08005135
 800516c:	08005135 	.word	0x08005135
 8005170:	08005135 	.word	0x08005135
 8005174:	08005135 	.word	0x08005135
 8005178:	080052bd 	.word	0x080052bd
 800517c:	080051e5 	.word	0x080051e5
 8005180:	08005277 	.word	0x08005277
 8005184:	08005135 	.word	0x08005135
 8005188:	08005135 	.word	0x08005135
 800518c:	080052df 	.word	0x080052df
 8005190:	08005135 	.word	0x08005135
 8005194:	080051e5 	.word	0x080051e5
 8005198:	08005135 	.word	0x08005135
 800519c:	08005135 	.word	0x08005135
 80051a0:	0800527f 	.word	0x0800527f
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	1d1a      	adds	r2, r3, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	602a      	str	r2, [r5, #0]
 80051ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051b4:	2301      	movs	r3, #1
 80051b6:	e09f      	b.n	80052f8 <_printf_i+0x1ec>
 80051b8:	6820      	ldr	r0, [r4, #0]
 80051ba:	682b      	ldr	r3, [r5, #0]
 80051bc:	0607      	lsls	r7, r0, #24
 80051be:	f103 0104 	add.w	r1, r3, #4
 80051c2:	6029      	str	r1, [r5, #0]
 80051c4:	d501      	bpl.n	80051ca <_printf_i+0xbe>
 80051c6:	681e      	ldr	r6, [r3, #0]
 80051c8:	e003      	b.n	80051d2 <_printf_i+0xc6>
 80051ca:	0646      	lsls	r6, r0, #25
 80051cc:	d5fb      	bpl.n	80051c6 <_printf_i+0xba>
 80051ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80051d2:	2e00      	cmp	r6, #0
 80051d4:	da03      	bge.n	80051de <_printf_i+0xd2>
 80051d6:	232d      	movs	r3, #45	; 0x2d
 80051d8:	4276      	negs	r6, r6
 80051da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051de:	485a      	ldr	r0, [pc, #360]	; (8005348 <_printf_i+0x23c>)
 80051e0:	230a      	movs	r3, #10
 80051e2:	e012      	b.n	800520a <_printf_i+0xfe>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	6820      	ldr	r0, [r4, #0]
 80051e8:	1d19      	adds	r1, r3, #4
 80051ea:	6029      	str	r1, [r5, #0]
 80051ec:	0605      	lsls	r5, r0, #24
 80051ee:	d501      	bpl.n	80051f4 <_printf_i+0xe8>
 80051f0:	681e      	ldr	r6, [r3, #0]
 80051f2:	e002      	b.n	80051fa <_printf_i+0xee>
 80051f4:	0641      	lsls	r1, r0, #25
 80051f6:	d5fb      	bpl.n	80051f0 <_printf_i+0xe4>
 80051f8:	881e      	ldrh	r6, [r3, #0]
 80051fa:	4853      	ldr	r0, [pc, #332]	; (8005348 <_printf_i+0x23c>)
 80051fc:	2f6f      	cmp	r7, #111	; 0x6f
 80051fe:	bf0c      	ite	eq
 8005200:	2308      	moveq	r3, #8
 8005202:	230a      	movne	r3, #10
 8005204:	2100      	movs	r1, #0
 8005206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800520a:	6865      	ldr	r5, [r4, #4]
 800520c:	60a5      	str	r5, [r4, #8]
 800520e:	2d00      	cmp	r5, #0
 8005210:	bfa2      	ittt	ge
 8005212:	6821      	ldrge	r1, [r4, #0]
 8005214:	f021 0104 	bicge.w	r1, r1, #4
 8005218:	6021      	strge	r1, [r4, #0]
 800521a:	b90e      	cbnz	r6, 8005220 <_printf_i+0x114>
 800521c:	2d00      	cmp	r5, #0
 800521e:	d04b      	beq.n	80052b8 <_printf_i+0x1ac>
 8005220:	4615      	mov	r5, r2
 8005222:	fbb6 f1f3 	udiv	r1, r6, r3
 8005226:	fb03 6711 	mls	r7, r3, r1, r6
 800522a:	5dc7      	ldrb	r7, [r0, r7]
 800522c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005230:	4637      	mov	r7, r6
 8005232:	42bb      	cmp	r3, r7
 8005234:	460e      	mov	r6, r1
 8005236:	d9f4      	bls.n	8005222 <_printf_i+0x116>
 8005238:	2b08      	cmp	r3, #8
 800523a:	d10b      	bne.n	8005254 <_printf_i+0x148>
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	07de      	lsls	r6, r3, #31
 8005240:	d508      	bpl.n	8005254 <_printf_i+0x148>
 8005242:	6923      	ldr	r3, [r4, #16]
 8005244:	6861      	ldr	r1, [r4, #4]
 8005246:	4299      	cmp	r1, r3
 8005248:	bfde      	ittt	le
 800524a:	2330      	movle	r3, #48	; 0x30
 800524c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005250:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005254:	1b52      	subs	r2, r2, r5
 8005256:	6122      	str	r2, [r4, #16]
 8005258:	f8cd a000 	str.w	sl, [sp]
 800525c:	464b      	mov	r3, r9
 800525e:	aa03      	add	r2, sp, #12
 8005260:	4621      	mov	r1, r4
 8005262:	4640      	mov	r0, r8
 8005264:	f7ff fee4 	bl	8005030 <_printf_common>
 8005268:	3001      	adds	r0, #1
 800526a:	d14a      	bne.n	8005302 <_printf_i+0x1f6>
 800526c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005270:	b004      	add	sp, #16
 8005272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	f043 0320 	orr.w	r3, r3, #32
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	4833      	ldr	r0, [pc, #204]	; (800534c <_printf_i+0x240>)
 8005280:	2778      	movs	r7, #120	; 0x78
 8005282:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	6829      	ldr	r1, [r5, #0]
 800528a:	061f      	lsls	r7, r3, #24
 800528c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005290:	d402      	bmi.n	8005298 <_printf_i+0x18c>
 8005292:	065f      	lsls	r7, r3, #25
 8005294:	bf48      	it	mi
 8005296:	b2b6      	uxthmi	r6, r6
 8005298:	07df      	lsls	r7, r3, #31
 800529a:	bf48      	it	mi
 800529c:	f043 0320 	orrmi.w	r3, r3, #32
 80052a0:	6029      	str	r1, [r5, #0]
 80052a2:	bf48      	it	mi
 80052a4:	6023      	strmi	r3, [r4, #0]
 80052a6:	b91e      	cbnz	r6, 80052b0 <_printf_i+0x1a4>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	f023 0320 	bic.w	r3, r3, #32
 80052ae:	6023      	str	r3, [r4, #0]
 80052b0:	2310      	movs	r3, #16
 80052b2:	e7a7      	b.n	8005204 <_printf_i+0xf8>
 80052b4:	4824      	ldr	r0, [pc, #144]	; (8005348 <_printf_i+0x23c>)
 80052b6:	e7e4      	b.n	8005282 <_printf_i+0x176>
 80052b8:	4615      	mov	r5, r2
 80052ba:	e7bd      	b.n	8005238 <_printf_i+0x12c>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	6826      	ldr	r6, [r4, #0]
 80052c0:	6961      	ldr	r1, [r4, #20]
 80052c2:	1d18      	adds	r0, r3, #4
 80052c4:	6028      	str	r0, [r5, #0]
 80052c6:	0635      	lsls	r5, r6, #24
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	d501      	bpl.n	80052d0 <_printf_i+0x1c4>
 80052cc:	6019      	str	r1, [r3, #0]
 80052ce:	e002      	b.n	80052d6 <_printf_i+0x1ca>
 80052d0:	0670      	lsls	r0, r6, #25
 80052d2:	d5fb      	bpl.n	80052cc <_printf_i+0x1c0>
 80052d4:	8019      	strh	r1, [r3, #0]
 80052d6:	2300      	movs	r3, #0
 80052d8:	6123      	str	r3, [r4, #16]
 80052da:	4615      	mov	r5, r2
 80052dc:	e7bc      	b.n	8005258 <_printf_i+0x14c>
 80052de:	682b      	ldr	r3, [r5, #0]
 80052e0:	1d1a      	adds	r2, r3, #4
 80052e2:	602a      	str	r2, [r5, #0]
 80052e4:	681d      	ldr	r5, [r3, #0]
 80052e6:	6862      	ldr	r2, [r4, #4]
 80052e8:	2100      	movs	r1, #0
 80052ea:	4628      	mov	r0, r5
 80052ec:	f7fa ff78 	bl	80001e0 <memchr>
 80052f0:	b108      	cbz	r0, 80052f6 <_printf_i+0x1ea>
 80052f2:	1b40      	subs	r0, r0, r5
 80052f4:	6060      	str	r0, [r4, #4]
 80052f6:	6863      	ldr	r3, [r4, #4]
 80052f8:	6123      	str	r3, [r4, #16]
 80052fa:	2300      	movs	r3, #0
 80052fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005300:	e7aa      	b.n	8005258 <_printf_i+0x14c>
 8005302:	6923      	ldr	r3, [r4, #16]
 8005304:	462a      	mov	r2, r5
 8005306:	4649      	mov	r1, r9
 8005308:	4640      	mov	r0, r8
 800530a:	47d0      	blx	sl
 800530c:	3001      	adds	r0, #1
 800530e:	d0ad      	beq.n	800526c <_printf_i+0x160>
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	079b      	lsls	r3, r3, #30
 8005314:	d413      	bmi.n	800533e <_printf_i+0x232>
 8005316:	68e0      	ldr	r0, [r4, #12]
 8005318:	9b03      	ldr	r3, [sp, #12]
 800531a:	4298      	cmp	r0, r3
 800531c:	bfb8      	it	lt
 800531e:	4618      	movlt	r0, r3
 8005320:	e7a6      	b.n	8005270 <_printf_i+0x164>
 8005322:	2301      	movs	r3, #1
 8005324:	4632      	mov	r2, r6
 8005326:	4649      	mov	r1, r9
 8005328:	4640      	mov	r0, r8
 800532a:	47d0      	blx	sl
 800532c:	3001      	adds	r0, #1
 800532e:	d09d      	beq.n	800526c <_printf_i+0x160>
 8005330:	3501      	adds	r5, #1
 8005332:	68e3      	ldr	r3, [r4, #12]
 8005334:	9903      	ldr	r1, [sp, #12]
 8005336:	1a5b      	subs	r3, r3, r1
 8005338:	42ab      	cmp	r3, r5
 800533a:	dcf2      	bgt.n	8005322 <_printf_i+0x216>
 800533c:	e7eb      	b.n	8005316 <_printf_i+0x20a>
 800533e:	2500      	movs	r5, #0
 8005340:	f104 0619 	add.w	r6, r4, #25
 8005344:	e7f5      	b.n	8005332 <_printf_i+0x226>
 8005346:	bf00      	nop
 8005348:	08008802 	.word	0x08008802
 800534c:	08008813 	.word	0x08008813

08005350 <siprintf>:
 8005350:	b40e      	push	{r1, r2, r3}
 8005352:	b500      	push	{lr}
 8005354:	b09c      	sub	sp, #112	; 0x70
 8005356:	ab1d      	add	r3, sp, #116	; 0x74
 8005358:	9002      	str	r0, [sp, #8]
 800535a:	9006      	str	r0, [sp, #24]
 800535c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005360:	4809      	ldr	r0, [pc, #36]	; (8005388 <siprintf+0x38>)
 8005362:	9107      	str	r1, [sp, #28]
 8005364:	9104      	str	r1, [sp, #16]
 8005366:	4909      	ldr	r1, [pc, #36]	; (800538c <siprintf+0x3c>)
 8005368:	f853 2b04 	ldr.w	r2, [r3], #4
 800536c:	9105      	str	r1, [sp, #20]
 800536e:	6800      	ldr	r0, [r0, #0]
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	a902      	add	r1, sp, #8
 8005374:	f001 f868 	bl	8006448 <_svfiprintf_r>
 8005378:	9b02      	ldr	r3, [sp, #8]
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	b01c      	add	sp, #112	; 0x70
 8005380:	f85d eb04 	ldr.w	lr, [sp], #4
 8005384:	b003      	add	sp, #12
 8005386:	4770      	bx	lr
 8005388:	2000006c 	.word	0x2000006c
 800538c:	ffff0208 	.word	0xffff0208

08005390 <std>:
 8005390:	2300      	movs	r3, #0
 8005392:	b510      	push	{r4, lr}
 8005394:	4604      	mov	r4, r0
 8005396:	e9c0 3300 	strd	r3, r3, [r0]
 800539a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800539e:	6083      	str	r3, [r0, #8]
 80053a0:	8181      	strh	r1, [r0, #12]
 80053a2:	6643      	str	r3, [r0, #100]	; 0x64
 80053a4:	81c2      	strh	r2, [r0, #14]
 80053a6:	6183      	str	r3, [r0, #24]
 80053a8:	4619      	mov	r1, r3
 80053aa:	2208      	movs	r2, #8
 80053ac:	305c      	adds	r0, #92	; 0x5c
 80053ae:	f000 f93d 	bl	800562c <memset>
 80053b2:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <std+0x58>)
 80053b4:	6263      	str	r3, [r4, #36]	; 0x24
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <std+0x5c>)
 80053b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <std+0x60>)
 80053bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053be:	4b0d      	ldr	r3, [pc, #52]	; (80053f4 <std+0x64>)
 80053c0:	6323      	str	r3, [r4, #48]	; 0x30
 80053c2:	4b0d      	ldr	r3, [pc, #52]	; (80053f8 <std+0x68>)
 80053c4:	6224      	str	r4, [r4, #32]
 80053c6:	429c      	cmp	r4, r3
 80053c8:	d006      	beq.n	80053d8 <std+0x48>
 80053ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80053ce:	4294      	cmp	r4, r2
 80053d0:	d002      	beq.n	80053d8 <std+0x48>
 80053d2:	33d0      	adds	r3, #208	; 0xd0
 80053d4:	429c      	cmp	r4, r3
 80053d6:	d105      	bne.n	80053e4 <std+0x54>
 80053d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e0:	f000 b95a 	b.w	8005698 <__retarget_lock_init_recursive>
 80053e4:	bd10      	pop	{r4, pc}
 80053e6:	bf00      	nop
 80053e8:	08007001 	.word	0x08007001
 80053ec:	08007023 	.word	0x08007023
 80053f0:	0800705b 	.word	0x0800705b
 80053f4:	0800707f 	.word	0x0800707f
 80053f8:	200007e0 	.word	0x200007e0

080053fc <stdio_exit_handler>:
 80053fc:	4a02      	ldr	r2, [pc, #8]	; (8005408 <stdio_exit_handler+0xc>)
 80053fe:	4903      	ldr	r1, [pc, #12]	; (800540c <stdio_exit_handler+0x10>)
 8005400:	4803      	ldr	r0, [pc, #12]	; (8005410 <stdio_exit_handler+0x14>)
 8005402:	f000 b8f5 	b.w	80055f0 <_fwalk_sglue>
 8005406:	bf00      	nop
 8005408:	20000014 	.word	0x20000014
 800540c:	080068a1 	.word	0x080068a1
 8005410:	20000020 	.word	0x20000020

08005414 <cleanup_stdio>:
 8005414:	6841      	ldr	r1, [r0, #4]
 8005416:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <cleanup_stdio+0x34>)
 8005418:	4299      	cmp	r1, r3
 800541a:	b510      	push	{r4, lr}
 800541c:	4604      	mov	r4, r0
 800541e:	d001      	beq.n	8005424 <cleanup_stdio+0x10>
 8005420:	f001 fa3e 	bl	80068a0 <_fflush_r>
 8005424:	68a1      	ldr	r1, [r4, #8]
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <cleanup_stdio+0x38>)
 8005428:	4299      	cmp	r1, r3
 800542a:	d002      	beq.n	8005432 <cleanup_stdio+0x1e>
 800542c:	4620      	mov	r0, r4
 800542e:	f001 fa37 	bl	80068a0 <_fflush_r>
 8005432:	68e1      	ldr	r1, [r4, #12]
 8005434:	4b06      	ldr	r3, [pc, #24]	; (8005450 <cleanup_stdio+0x3c>)
 8005436:	4299      	cmp	r1, r3
 8005438:	d004      	beq.n	8005444 <cleanup_stdio+0x30>
 800543a:	4620      	mov	r0, r4
 800543c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005440:	f001 ba2e 	b.w	80068a0 <_fflush_r>
 8005444:	bd10      	pop	{r4, pc}
 8005446:	bf00      	nop
 8005448:	200007e0 	.word	0x200007e0
 800544c:	20000848 	.word	0x20000848
 8005450:	200008b0 	.word	0x200008b0

08005454 <global_stdio_init.part.0>:
 8005454:	b510      	push	{r4, lr}
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <global_stdio_init.part.0+0x30>)
 8005458:	4c0b      	ldr	r4, [pc, #44]	; (8005488 <global_stdio_init.part.0+0x34>)
 800545a:	4a0c      	ldr	r2, [pc, #48]	; (800548c <global_stdio_init.part.0+0x38>)
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	4620      	mov	r0, r4
 8005460:	2200      	movs	r2, #0
 8005462:	2104      	movs	r1, #4
 8005464:	f7ff ff94 	bl	8005390 <std>
 8005468:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800546c:	2201      	movs	r2, #1
 800546e:	2109      	movs	r1, #9
 8005470:	f7ff ff8e 	bl	8005390 <std>
 8005474:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005478:	2202      	movs	r2, #2
 800547a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800547e:	2112      	movs	r1, #18
 8005480:	f7ff bf86 	b.w	8005390 <std>
 8005484:	20000918 	.word	0x20000918
 8005488:	200007e0 	.word	0x200007e0
 800548c:	080053fd 	.word	0x080053fd

08005490 <__sfp_lock_acquire>:
 8005490:	4801      	ldr	r0, [pc, #4]	; (8005498 <__sfp_lock_acquire+0x8>)
 8005492:	f000 b902 	b.w	800569a <__retarget_lock_acquire_recursive>
 8005496:	bf00      	nop
 8005498:	2000091d 	.word	0x2000091d

0800549c <__sfp_lock_release>:
 800549c:	4801      	ldr	r0, [pc, #4]	; (80054a4 <__sfp_lock_release+0x8>)
 800549e:	f000 b8fd 	b.w	800569c <__retarget_lock_release_recursive>
 80054a2:	bf00      	nop
 80054a4:	2000091d 	.word	0x2000091d

080054a8 <__sinit>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	4604      	mov	r4, r0
 80054ac:	f7ff fff0 	bl	8005490 <__sfp_lock_acquire>
 80054b0:	6a23      	ldr	r3, [r4, #32]
 80054b2:	b11b      	cbz	r3, 80054bc <__sinit+0x14>
 80054b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054b8:	f7ff bff0 	b.w	800549c <__sfp_lock_release>
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <__sinit+0x28>)
 80054be:	6223      	str	r3, [r4, #32]
 80054c0:	4b04      	ldr	r3, [pc, #16]	; (80054d4 <__sinit+0x2c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f5      	bne.n	80054b4 <__sinit+0xc>
 80054c8:	f7ff ffc4 	bl	8005454 <global_stdio_init.part.0>
 80054cc:	e7f2      	b.n	80054b4 <__sinit+0xc>
 80054ce:	bf00      	nop
 80054d0:	08005415 	.word	0x08005415
 80054d4:	20000918 	.word	0x20000918

080054d8 <_strtol_l.constprop.0>:
 80054d8:	2b01      	cmp	r3, #1
 80054da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054de:	d001      	beq.n	80054e4 <_strtol_l.constprop.0+0xc>
 80054e0:	2b24      	cmp	r3, #36	; 0x24
 80054e2:	d906      	bls.n	80054f2 <_strtol_l.constprop.0+0x1a>
 80054e4:	f000 f8ae 	bl	8005644 <__errno>
 80054e8:	2316      	movs	r3, #22
 80054ea:	6003      	str	r3, [r0, #0]
 80054ec:	2000      	movs	r0, #0
 80054ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80055d8 <_strtol_l.constprop.0+0x100>
 80054f6:	460d      	mov	r5, r1
 80054f8:	462e      	mov	r6, r5
 80054fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054fe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005502:	f017 0708 	ands.w	r7, r7, #8
 8005506:	d1f7      	bne.n	80054f8 <_strtol_l.constprop.0+0x20>
 8005508:	2c2d      	cmp	r4, #45	; 0x2d
 800550a:	d132      	bne.n	8005572 <_strtol_l.constprop.0+0x9a>
 800550c:	782c      	ldrb	r4, [r5, #0]
 800550e:	2701      	movs	r7, #1
 8005510:	1cb5      	adds	r5, r6, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d05b      	beq.n	80055ce <_strtol_l.constprop.0+0xf6>
 8005516:	2b10      	cmp	r3, #16
 8005518:	d109      	bne.n	800552e <_strtol_l.constprop.0+0x56>
 800551a:	2c30      	cmp	r4, #48	; 0x30
 800551c:	d107      	bne.n	800552e <_strtol_l.constprop.0+0x56>
 800551e:	782c      	ldrb	r4, [r5, #0]
 8005520:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005524:	2c58      	cmp	r4, #88	; 0x58
 8005526:	d14d      	bne.n	80055c4 <_strtol_l.constprop.0+0xec>
 8005528:	786c      	ldrb	r4, [r5, #1]
 800552a:	2310      	movs	r3, #16
 800552c:	3502      	adds	r5, #2
 800552e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005532:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005536:	f04f 0e00 	mov.w	lr, #0
 800553a:	fbb8 f9f3 	udiv	r9, r8, r3
 800553e:	4676      	mov	r6, lr
 8005540:	fb03 8a19 	mls	sl, r3, r9, r8
 8005544:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005548:	f1bc 0f09 	cmp.w	ip, #9
 800554c:	d816      	bhi.n	800557c <_strtol_l.constprop.0+0xa4>
 800554e:	4664      	mov	r4, ip
 8005550:	42a3      	cmp	r3, r4
 8005552:	dd24      	ble.n	800559e <_strtol_l.constprop.0+0xc6>
 8005554:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8005558:	d008      	beq.n	800556c <_strtol_l.constprop.0+0x94>
 800555a:	45b1      	cmp	r9, r6
 800555c:	d31c      	bcc.n	8005598 <_strtol_l.constprop.0+0xc0>
 800555e:	d101      	bne.n	8005564 <_strtol_l.constprop.0+0x8c>
 8005560:	45a2      	cmp	sl, r4
 8005562:	db19      	blt.n	8005598 <_strtol_l.constprop.0+0xc0>
 8005564:	fb06 4603 	mla	r6, r6, r3, r4
 8005568:	f04f 0e01 	mov.w	lr, #1
 800556c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005570:	e7e8      	b.n	8005544 <_strtol_l.constprop.0+0x6c>
 8005572:	2c2b      	cmp	r4, #43	; 0x2b
 8005574:	bf04      	itt	eq
 8005576:	782c      	ldrbeq	r4, [r5, #0]
 8005578:	1cb5      	addeq	r5, r6, #2
 800557a:	e7ca      	b.n	8005512 <_strtol_l.constprop.0+0x3a>
 800557c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005580:	f1bc 0f19 	cmp.w	ip, #25
 8005584:	d801      	bhi.n	800558a <_strtol_l.constprop.0+0xb2>
 8005586:	3c37      	subs	r4, #55	; 0x37
 8005588:	e7e2      	b.n	8005550 <_strtol_l.constprop.0+0x78>
 800558a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800558e:	f1bc 0f19 	cmp.w	ip, #25
 8005592:	d804      	bhi.n	800559e <_strtol_l.constprop.0+0xc6>
 8005594:	3c57      	subs	r4, #87	; 0x57
 8005596:	e7db      	b.n	8005550 <_strtol_l.constprop.0+0x78>
 8005598:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800559c:	e7e6      	b.n	800556c <_strtol_l.constprop.0+0x94>
 800559e:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80055a2:	d105      	bne.n	80055b0 <_strtol_l.constprop.0+0xd8>
 80055a4:	2322      	movs	r3, #34	; 0x22
 80055a6:	6003      	str	r3, [r0, #0]
 80055a8:	4646      	mov	r6, r8
 80055aa:	b942      	cbnz	r2, 80055be <_strtol_l.constprop.0+0xe6>
 80055ac:	4630      	mov	r0, r6
 80055ae:	e79e      	b.n	80054ee <_strtol_l.constprop.0+0x16>
 80055b0:	b107      	cbz	r7, 80055b4 <_strtol_l.constprop.0+0xdc>
 80055b2:	4276      	negs	r6, r6
 80055b4:	2a00      	cmp	r2, #0
 80055b6:	d0f9      	beq.n	80055ac <_strtol_l.constprop.0+0xd4>
 80055b8:	f1be 0f00 	cmp.w	lr, #0
 80055bc:	d000      	beq.n	80055c0 <_strtol_l.constprop.0+0xe8>
 80055be:	1e69      	subs	r1, r5, #1
 80055c0:	6011      	str	r1, [r2, #0]
 80055c2:	e7f3      	b.n	80055ac <_strtol_l.constprop.0+0xd4>
 80055c4:	2430      	movs	r4, #48	; 0x30
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1b1      	bne.n	800552e <_strtol_l.constprop.0+0x56>
 80055ca:	2308      	movs	r3, #8
 80055cc:	e7af      	b.n	800552e <_strtol_l.constprop.0+0x56>
 80055ce:	2c30      	cmp	r4, #48	; 0x30
 80055d0:	d0a5      	beq.n	800551e <_strtol_l.constprop.0+0x46>
 80055d2:	230a      	movs	r3, #10
 80055d4:	e7ab      	b.n	800552e <_strtol_l.constprop.0+0x56>
 80055d6:	bf00      	nop
 80055d8:	08008825 	.word	0x08008825

080055dc <strtol>:
 80055dc:	4613      	mov	r3, r2
 80055de:	460a      	mov	r2, r1
 80055e0:	4601      	mov	r1, r0
 80055e2:	4802      	ldr	r0, [pc, #8]	; (80055ec <strtol+0x10>)
 80055e4:	6800      	ldr	r0, [r0, #0]
 80055e6:	f7ff bf77 	b.w	80054d8 <_strtol_l.constprop.0>
 80055ea:	bf00      	nop
 80055ec:	2000006c 	.word	0x2000006c

080055f0 <_fwalk_sglue>:
 80055f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f4:	4607      	mov	r7, r0
 80055f6:	4688      	mov	r8, r1
 80055f8:	4614      	mov	r4, r2
 80055fa:	2600      	movs	r6, #0
 80055fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005600:	f1b9 0901 	subs.w	r9, r9, #1
 8005604:	d505      	bpl.n	8005612 <_fwalk_sglue+0x22>
 8005606:	6824      	ldr	r4, [r4, #0]
 8005608:	2c00      	cmp	r4, #0
 800560a:	d1f7      	bne.n	80055fc <_fwalk_sglue+0xc>
 800560c:	4630      	mov	r0, r6
 800560e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005612:	89ab      	ldrh	r3, [r5, #12]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d907      	bls.n	8005628 <_fwalk_sglue+0x38>
 8005618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800561c:	3301      	adds	r3, #1
 800561e:	d003      	beq.n	8005628 <_fwalk_sglue+0x38>
 8005620:	4629      	mov	r1, r5
 8005622:	4638      	mov	r0, r7
 8005624:	47c0      	blx	r8
 8005626:	4306      	orrs	r6, r0
 8005628:	3568      	adds	r5, #104	; 0x68
 800562a:	e7e9      	b.n	8005600 <_fwalk_sglue+0x10>

0800562c <memset>:
 800562c:	4402      	add	r2, r0
 800562e:	4603      	mov	r3, r0
 8005630:	4293      	cmp	r3, r2
 8005632:	d100      	bne.n	8005636 <memset+0xa>
 8005634:	4770      	bx	lr
 8005636:	f803 1b01 	strb.w	r1, [r3], #1
 800563a:	e7f9      	b.n	8005630 <memset+0x4>

0800563c <_localeconv_r>:
 800563c:	4800      	ldr	r0, [pc, #0]	; (8005640 <_localeconv_r+0x4>)
 800563e:	4770      	bx	lr
 8005640:	20000160 	.word	0x20000160

08005644 <__errno>:
 8005644:	4b01      	ldr	r3, [pc, #4]	; (800564c <__errno+0x8>)
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	2000006c 	.word	0x2000006c

08005650 <__libc_init_array>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	4d0d      	ldr	r5, [pc, #52]	; (8005688 <__libc_init_array+0x38>)
 8005654:	4c0d      	ldr	r4, [pc, #52]	; (800568c <__libc_init_array+0x3c>)
 8005656:	1b64      	subs	r4, r4, r5
 8005658:	10a4      	asrs	r4, r4, #2
 800565a:	2600      	movs	r6, #0
 800565c:	42a6      	cmp	r6, r4
 800565e:	d109      	bne.n	8005674 <__libc_init_array+0x24>
 8005660:	4d0b      	ldr	r5, [pc, #44]	; (8005690 <__libc_init_array+0x40>)
 8005662:	4c0c      	ldr	r4, [pc, #48]	; (8005694 <__libc_init_array+0x44>)
 8005664:	f003 f858 	bl	8008718 <_init>
 8005668:	1b64      	subs	r4, r4, r5
 800566a:	10a4      	asrs	r4, r4, #2
 800566c:	2600      	movs	r6, #0
 800566e:	42a6      	cmp	r6, r4
 8005670:	d105      	bne.n	800567e <__libc_init_array+0x2e>
 8005672:	bd70      	pop	{r4, r5, r6, pc}
 8005674:	f855 3b04 	ldr.w	r3, [r5], #4
 8005678:	4798      	blx	r3
 800567a:	3601      	adds	r6, #1
 800567c:	e7ee      	b.n	800565c <__libc_init_array+0xc>
 800567e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005682:	4798      	blx	r3
 8005684:	3601      	adds	r6, #1
 8005686:	e7f2      	b.n	800566e <__libc_init_array+0x1e>
 8005688:	08008ba0 	.word	0x08008ba0
 800568c:	08008ba0 	.word	0x08008ba0
 8005690:	08008ba0 	.word	0x08008ba0
 8005694:	08008ba4 	.word	0x08008ba4

08005698 <__retarget_lock_init_recursive>:
 8005698:	4770      	bx	lr

0800569a <__retarget_lock_acquire_recursive>:
 800569a:	4770      	bx	lr

0800569c <__retarget_lock_release_recursive>:
 800569c:	4770      	bx	lr

0800569e <quorem>:
 800569e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a2:	6903      	ldr	r3, [r0, #16]
 80056a4:	690c      	ldr	r4, [r1, #16]
 80056a6:	42a3      	cmp	r3, r4
 80056a8:	4607      	mov	r7, r0
 80056aa:	db7e      	blt.n	80057aa <quorem+0x10c>
 80056ac:	3c01      	subs	r4, #1
 80056ae:	f101 0814 	add.w	r8, r1, #20
 80056b2:	f100 0514 	add.w	r5, r0, #20
 80056b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056ba:	9301      	str	r3, [sp, #4]
 80056bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056c4:	3301      	adds	r3, #1
 80056c6:	429a      	cmp	r2, r3
 80056c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80056d4:	d331      	bcc.n	800573a <quorem+0x9c>
 80056d6:	f04f 0e00 	mov.w	lr, #0
 80056da:	4640      	mov	r0, r8
 80056dc:	46ac      	mov	ip, r5
 80056de:	46f2      	mov	sl, lr
 80056e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80056e4:	b293      	uxth	r3, r2
 80056e6:	fb06 e303 	mla	r3, r6, r3, lr
 80056ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80056ee:	0c1a      	lsrs	r2, r3, #16
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	ebaa 0303 	sub.w	r3, sl, r3
 80056f6:	f8dc a000 	ldr.w	sl, [ip]
 80056fa:	fa13 f38a 	uxtah	r3, r3, sl
 80056fe:	fb06 220e 	mla	r2, r6, lr, r2
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	9b00      	ldr	r3, [sp, #0]
 8005706:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800570a:	b292      	uxth	r2, r2
 800570c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005714:	f8bd 3000 	ldrh.w	r3, [sp]
 8005718:	4581      	cmp	r9, r0
 800571a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800571e:	f84c 3b04 	str.w	r3, [ip], #4
 8005722:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005726:	d2db      	bcs.n	80056e0 <quorem+0x42>
 8005728:	f855 300b 	ldr.w	r3, [r5, fp]
 800572c:	b92b      	cbnz	r3, 800573a <quorem+0x9c>
 800572e:	9b01      	ldr	r3, [sp, #4]
 8005730:	3b04      	subs	r3, #4
 8005732:	429d      	cmp	r5, r3
 8005734:	461a      	mov	r2, r3
 8005736:	d32c      	bcc.n	8005792 <quorem+0xf4>
 8005738:	613c      	str	r4, [r7, #16]
 800573a:	4638      	mov	r0, r7
 800573c:	f001 fb60 	bl	8006e00 <__mcmp>
 8005740:	2800      	cmp	r0, #0
 8005742:	db22      	blt.n	800578a <quorem+0xec>
 8005744:	3601      	adds	r6, #1
 8005746:	4629      	mov	r1, r5
 8005748:	2000      	movs	r0, #0
 800574a:	f858 2b04 	ldr.w	r2, [r8], #4
 800574e:	f8d1 c000 	ldr.w	ip, [r1]
 8005752:	b293      	uxth	r3, r2
 8005754:	1ac3      	subs	r3, r0, r3
 8005756:	0c12      	lsrs	r2, r2, #16
 8005758:	fa13 f38c 	uxtah	r3, r3, ip
 800575c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005764:	b29b      	uxth	r3, r3
 8005766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800576a:	45c1      	cmp	r9, r8
 800576c:	f841 3b04 	str.w	r3, [r1], #4
 8005770:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005774:	d2e9      	bcs.n	800574a <quorem+0xac>
 8005776:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800577a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800577e:	b922      	cbnz	r2, 800578a <quorem+0xec>
 8005780:	3b04      	subs	r3, #4
 8005782:	429d      	cmp	r5, r3
 8005784:	461a      	mov	r2, r3
 8005786:	d30a      	bcc.n	800579e <quorem+0x100>
 8005788:	613c      	str	r4, [r7, #16]
 800578a:	4630      	mov	r0, r6
 800578c:	b003      	add	sp, #12
 800578e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	3b04      	subs	r3, #4
 8005796:	2a00      	cmp	r2, #0
 8005798:	d1ce      	bne.n	8005738 <quorem+0x9a>
 800579a:	3c01      	subs	r4, #1
 800579c:	e7c9      	b.n	8005732 <quorem+0x94>
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	2a00      	cmp	r2, #0
 80057a4:	d1f0      	bne.n	8005788 <quorem+0xea>
 80057a6:	3c01      	subs	r4, #1
 80057a8:	e7eb      	b.n	8005782 <quorem+0xe4>
 80057aa:	2000      	movs	r0, #0
 80057ac:	e7ee      	b.n	800578c <quorem+0xee>
	...

080057b0 <_dtoa_r>:
 80057b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b4:	ed2d 8b04 	vpush	{d8-d9}
 80057b8:	69c5      	ldr	r5, [r0, #28]
 80057ba:	b093      	sub	sp, #76	; 0x4c
 80057bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80057c0:	ec57 6b10 	vmov	r6, r7, d0
 80057c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80057c8:	9107      	str	r1, [sp, #28]
 80057ca:	4604      	mov	r4, r0
 80057cc:	920a      	str	r2, [sp, #40]	; 0x28
 80057ce:	930d      	str	r3, [sp, #52]	; 0x34
 80057d0:	b975      	cbnz	r5, 80057f0 <_dtoa_r+0x40>
 80057d2:	2010      	movs	r0, #16
 80057d4:	f000 ff36 	bl	8006644 <malloc>
 80057d8:	4602      	mov	r2, r0
 80057da:	61e0      	str	r0, [r4, #28]
 80057dc:	b920      	cbnz	r0, 80057e8 <_dtoa_r+0x38>
 80057de:	4bae      	ldr	r3, [pc, #696]	; (8005a98 <_dtoa_r+0x2e8>)
 80057e0:	21ef      	movs	r1, #239	; 0xef
 80057e2:	48ae      	ldr	r0, [pc, #696]	; (8005a9c <_dtoa_r+0x2ec>)
 80057e4:	f001 fcfc 	bl	80071e0 <__assert_func>
 80057e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057ec:	6005      	str	r5, [r0, #0]
 80057ee:	60c5      	str	r5, [r0, #12]
 80057f0:	69e3      	ldr	r3, [r4, #28]
 80057f2:	6819      	ldr	r1, [r3, #0]
 80057f4:	b151      	cbz	r1, 800580c <_dtoa_r+0x5c>
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	604a      	str	r2, [r1, #4]
 80057fa:	2301      	movs	r3, #1
 80057fc:	4093      	lsls	r3, r2
 80057fe:	608b      	str	r3, [r1, #8]
 8005800:	4620      	mov	r0, r4
 8005802:	f001 f8c1 	bl	8006988 <_Bfree>
 8005806:	69e3      	ldr	r3, [r4, #28]
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	1e3b      	subs	r3, r7, #0
 800580e:	bfbb      	ittet	lt
 8005810:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005814:	9303      	strlt	r3, [sp, #12]
 8005816:	2300      	movge	r3, #0
 8005818:	2201      	movlt	r2, #1
 800581a:	bfac      	ite	ge
 800581c:	f8c8 3000 	strge.w	r3, [r8]
 8005820:	f8c8 2000 	strlt.w	r2, [r8]
 8005824:	4b9e      	ldr	r3, [pc, #632]	; (8005aa0 <_dtoa_r+0x2f0>)
 8005826:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800582a:	ea33 0308 	bics.w	r3, r3, r8
 800582e:	d11b      	bne.n	8005868 <_dtoa_r+0xb8>
 8005830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005832:	f242 730f 	movw	r3, #9999	; 0x270f
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800583c:	4333      	orrs	r3, r6
 800583e:	f000 8593 	beq.w	8006368 <_dtoa_r+0xbb8>
 8005842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005844:	b963      	cbnz	r3, 8005860 <_dtoa_r+0xb0>
 8005846:	4b97      	ldr	r3, [pc, #604]	; (8005aa4 <_dtoa_r+0x2f4>)
 8005848:	e027      	b.n	800589a <_dtoa_r+0xea>
 800584a:	4b97      	ldr	r3, [pc, #604]	; (8005aa8 <_dtoa_r+0x2f8>)
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	9800      	ldr	r0, [sp, #0]
 8005856:	b013      	add	sp, #76	; 0x4c
 8005858:	ecbd 8b04 	vpop	{d8-d9}
 800585c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005860:	4b90      	ldr	r3, [pc, #576]	; (8005aa4 <_dtoa_r+0x2f4>)
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	3303      	adds	r3, #3
 8005866:	e7f3      	b.n	8005850 <_dtoa_r+0xa0>
 8005868:	ed9d 7b02 	vldr	d7, [sp, #8]
 800586c:	2200      	movs	r2, #0
 800586e:	ec51 0b17 	vmov	r0, r1, d7
 8005872:	eeb0 8a47 	vmov.f32	s16, s14
 8005876:	eef0 8a67 	vmov.f32	s17, s15
 800587a:	2300      	movs	r3, #0
 800587c:	f7fb f92c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005880:	4681      	mov	r9, r0
 8005882:	b160      	cbz	r0, 800589e <_dtoa_r+0xee>
 8005884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005886:	2301      	movs	r3, #1
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8568 	beq.w	8006362 <_dtoa_r+0xbb2>
 8005892:	4b86      	ldr	r3, [pc, #536]	; (8005aac <_dtoa_r+0x2fc>)
 8005894:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	3b01      	subs	r3, #1
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	e7da      	b.n	8005854 <_dtoa_r+0xa4>
 800589e:	aa10      	add	r2, sp, #64	; 0x40
 80058a0:	a911      	add	r1, sp, #68	; 0x44
 80058a2:	4620      	mov	r0, r4
 80058a4:	eeb0 0a48 	vmov.f32	s0, s16
 80058a8:	eef0 0a68 	vmov.f32	s1, s17
 80058ac:	f001 fb4e 	bl	8006f4c <__d2b>
 80058b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80058b4:	4682      	mov	sl, r0
 80058b6:	2d00      	cmp	r5, #0
 80058b8:	d07f      	beq.n	80059ba <_dtoa_r+0x20a>
 80058ba:	ee18 3a90 	vmov	r3, s17
 80058be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80058c6:	ec51 0b18 	vmov	r0, r1, d8
 80058ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80058ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80058d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80058d6:	4619      	mov	r1, r3
 80058d8:	2200      	movs	r2, #0
 80058da:	4b75      	ldr	r3, [pc, #468]	; (8005ab0 <_dtoa_r+0x300>)
 80058dc:	f7fa fcdc 	bl	8000298 <__aeabi_dsub>
 80058e0:	a367      	add	r3, pc, #412	; (adr r3, 8005a80 <_dtoa_r+0x2d0>)
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	f7fa fe8f 	bl	8000608 <__aeabi_dmul>
 80058ea:	a367      	add	r3, pc, #412	; (adr r3, 8005a88 <_dtoa_r+0x2d8>)
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	f7fa fcd4 	bl	800029c <__adddf3>
 80058f4:	4606      	mov	r6, r0
 80058f6:	4628      	mov	r0, r5
 80058f8:	460f      	mov	r7, r1
 80058fa:	f7fa fe1b 	bl	8000534 <__aeabi_i2d>
 80058fe:	a364      	add	r3, pc, #400	; (adr r3, 8005a90 <_dtoa_r+0x2e0>)
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f7fa fe80 	bl	8000608 <__aeabi_dmul>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4630      	mov	r0, r6
 800590e:	4639      	mov	r1, r7
 8005910:	f7fa fcc4 	bl	800029c <__adddf3>
 8005914:	4606      	mov	r6, r0
 8005916:	460f      	mov	r7, r1
 8005918:	f7fb f926 	bl	8000b68 <__aeabi_d2iz>
 800591c:	2200      	movs	r2, #0
 800591e:	4683      	mov	fp, r0
 8005920:	2300      	movs	r3, #0
 8005922:	4630      	mov	r0, r6
 8005924:	4639      	mov	r1, r7
 8005926:	f7fb f8e1 	bl	8000aec <__aeabi_dcmplt>
 800592a:	b148      	cbz	r0, 8005940 <_dtoa_r+0x190>
 800592c:	4658      	mov	r0, fp
 800592e:	f7fa fe01 	bl	8000534 <__aeabi_i2d>
 8005932:	4632      	mov	r2, r6
 8005934:	463b      	mov	r3, r7
 8005936:	f7fb f8cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800593a:	b908      	cbnz	r0, 8005940 <_dtoa_r+0x190>
 800593c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005940:	f1bb 0f16 	cmp.w	fp, #22
 8005944:	d857      	bhi.n	80059f6 <_dtoa_r+0x246>
 8005946:	4b5b      	ldr	r3, [pc, #364]	; (8005ab4 <_dtoa_r+0x304>)
 8005948:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	ec51 0b18 	vmov	r0, r1, d8
 8005954:	f7fb f8ca 	bl	8000aec <__aeabi_dcmplt>
 8005958:	2800      	cmp	r0, #0
 800595a:	d04e      	beq.n	80059fa <_dtoa_r+0x24a>
 800595c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005960:	2300      	movs	r3, #0
 8005962:	930c      	str	r3, [sp, #48]	; 0x30
 8005964:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005966:	1b5b      	subs	r3, r3, r5
 8005968:	1e5a      	subs	r2, r3, #1
 800596a:	bf45      	ittet	mi
 800596c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005970:	9305      	strmi	r3, [sp, #20]
 8005972:	2300      	movpl	r3, #0
 8005974:	2300      	movmi	r3, #0
 8005976:	9206      	str	r2, [sp, #24]
 8005978:	bf54      	ite	pl
 800597a:	9305      	strpl	r3, [sp, #20]
 800597c:	9306      	strmi	r3, [sp, #24]
 800597e:	f1bb 0f00 	cmp.w	fp, #0
 8005982:	db3c      	blt.n	80059fe <_dtoa_r+0x24e>
 8005984:	9b06      	ldr	r3, [sp, #24]
 8005986:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800598a:	445b      	add	r3, fp
 800598c:	9306      	str	r3, [sp, #24]
 800598e:	2300      	movs	r3, #0
 8005990:	9308      	str	r3, [sp, #32]
 8005992:	9b07      	ldr	r3, [sp, #28]
 8005994:	2b09      	cmp	r3, #9
 8005996:	d868      	bhi.n	8005a6a <_dtoa_r+0x2ba>
 8005998:	2b05      	cmp	r3, #5
 800599a:	bfc4      	itt	gt
 800599c:	3b04      	subgt	r3, #4
 800599e:	9307      	strgt	r3, [sp, #28]
 80059a0:	9b07      	ldr	r3, [sp, #28]
 80059a2:	f1a3 0302 	sub.w	r3, r3, #2
 80059a6:	bfcc      	ite	gt
 80059a8:	2500      	movgt	r5, #0
 80059aa:	2501      	movle	r5, #1
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	f200 8085 	bhi.w	8005abc <_dtoa_r+0x30c>
 80059b2:	e8df f003 	tbb	[pc, r3]
 80059b6:	3b2e      	.short	0x3b2e
 80059b8:	5839      	.short	0x5839
 80059ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80059be:	441d      	add	r5, r3
 80059c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	bfc1      	itttt	gt
 80059c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80059d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80059d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80059d8:	bfd6      	itet	le
 80059da:	f1c3 0320 	rsble	r3, r3, #32
 80059de:	ea48 0003 	orrgt.w	r0, r8, r3
 80059e2:	fa06 f003 	lslle.w	r0, r6, r3
 80059e6:	f7fa fd95 	bl	8000514 <__aeabi_ui2d>
 80059ea:	2201      	movs	r2, #1
 80059ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80059f0:	3d01      	subs	r5, #1
 80059f2:	920e      	str	r2, [sp, #56]	; 0x38
 80059f4:	e76f      	b.n	80058d6 <_dtoa_r+0x126>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e7b3      	b.n	8005962 <_dtoa_r+0x1b2>
 80059fa:	900c      	str	r0, [sp, #48]	; 0x30
 80059fc:	e7b2      	b.n	8005964 <_dtoa_r+0x1b4>
 80059fe:	9b05      	ldr	r3, [sp, #20]
 8005a00:	eba3 030b 	sub.w	r3, r3, fp
 8005a04:	9305      	str	r3, [sp, #20]
 8005a06:	f1cb 0300 	rsb	r3, fp, #0
 8005a0a:	9308      	str	r3, [sp, #32]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a10:	e7bf      	b.n	8005992 <_dtoa_r+0x1e2>
 8005a12:	2300      	movs	r3, #0
 8005a14:	9309      	str	r3, [sp, #36]	; 0x24
 8005a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	dc52      	bgt.n	8005ac2 <_dtoa_r+0x312>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	461a      	mov	r2, r3
 8005a24:	920a      	str	r2, [sp, #40]	; 0x28
 8005a26:	e00b      	b.n	8005a40 <_dtoa_r+0x290>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e7f3      	b.n	8005a14 <_dtoa_r+0x264>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a32:	445b      	add	r3, fp
 8005a34:	9301      	str	r3, [sp, #4]
 8005a36:	3301      	adds	r3, #1
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	9304      	str	r3, [sp, #16]
 8005a3c:	bfb8      	it	lt
 8005a3e:	2301      	movlt	r3, #1
 8005a40:	69e0      	ldr	r0, [r4, #28]
 8005a42:	2100      	movs	r1, #0
 8005a44:	2204      	movs	r2, #4
 8005a46:	f102 0614 	add.w	r6, r2, #20
 8005a4a:	429e      	cmp	r6, r3
 8005a4c:	d93d      	bls.n	8005aca <_dtoa_r+0x31a>
 8005a4e:	6041      	str	r1, [r0, #4]
 8005a50:	4620      	mov	r0, r4
 8005a52:	f000 ff59 	bl	8006908 <_Balloc>
 8005a56:	9000      	str	r0, [sp, #0]
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	d139      	bne.n	8005ad0 <_dtoa_r+0x320>
 8005a5c:	4b16      	ldr	r3, [pc, #88]	; (8005ab8 <_dtoa_r+0x308>)
 8005a5e:	4602      	mov	r2, r0
 8005a60:	f240 11af 	movw	r1, #431	; 0x1af
 8005a64:	e6bd      	b.n	80057e2 <_dtoa_r+0x32>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e7e1      	b.n	8005a2e <_dtoa_r+0x27e>
 8005a6a:	2501      	movs	r5, #1
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9307      	str	r3, [sp, #28]
 8005a70:	9509      	str	r5, [sp, #36]	; 0x24
 8005a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	9304      	str	r3, [sp, #16]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	2312      	movs	r3, #18
 8005a7e:	e7d1      	b.n	8005a24 <_dtoa_r+0x274>
 8005a80:	636f4361 	.word	0x636f4361
 8005a84:	3fd287a7 	.word	0x3fd287a7
 8005a88:	8b60c8b3 	.word	0x8b60c8b3
 8005a8c:	3fc68a28 	.word	0x3fc68a28
 8005a90:	509f79fb 	.word	0x509f79fb
 8005a94:	3fd34413 	.word	0x3fd34413
 8005a98:	08008932 	.word	0x08008932
 8005a9c:	08008949 	.word	0x08008949
 8005aa0:	7ff00000 	.word	0x7ff00000
 8005aa4:	0800892e 	.word	0x0800892e
 8005aa8:	08008925 	.word	0x08008925
 8005aac:	08008801 	.word	0x08008801
 8005ab0:	3ff80000 	.word	0x3ff80000
 8005ab4:	08008a48 	.word	0x08008a48
 8005ab8:	080089a1 	.word	0x080089a1
 8005abc:	2301      	movs	r3, #1
 8005abe:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac0:	e7d7      	b.n	8005a72 <_dtoa_r+0x2c2>
 8005ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac4:	9301      	str	r3, [sp, #4]
 8005ac6:	9304      	str	r3, [sp, #16]
 8005ac8:	e7ba      	b.n	8005a40 <_dtoa_r+0x290>
 8005aca:	3101      	adds	r1, #1
 8005acc:	0052      	lsls	r2, r2, #1
 8005ace:	e7ba      	b.n	8005a46 <_dtoa_r+0x296>
 8005ad0:	69e3      	ldr	r3, [r4, #28]
 8005ad2:	9a00      	ldr	r2, [sp, #0]
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	9b04      	ldr	r3, [sp, #16]
 8005ad8:	2b0e      	cmp	r3, #14
 8005ada:	f200 80a8 	bhi.w	8005c2e <_dtoa_r+0x47e>
 8005ade:	2d00      	cmp	r5, #0
 8005ae0:	f000 80a5 	beq.w	8005c2e <_dtoa_r+0x47e>
 8005ae4:	f1bb 0f00 	cmp.w	fp, #0
 8005ae8:	dd38      	ble.n	8005b5c <_dtoa_r+0x3ac>
 8005aea:	4bc0      	ldr	r3, [pc, #768]	; (8005dec <_dtoa_r+0x63c>)
 8005aec:	f00b 020f 	and.w	r2, fp, #15
 8005af0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005af4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005af8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005afc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005b00:	d019      	beq.n	8005b36 <_dtoa_r+0x386>
 8005b02:	4bbb      	ldr	r3, [pc, #748]	; (8005df0 <_dtoa_r+0x640>)
 8005b04:	ec51 0b18 	vmov	r0, r1, d8
 8005b08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b0c:	f7fa fea6 	bl	800085c <__aeabi_ddiv>
 8005b10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b14:	f008 080f 	and.w	r8, r8, #15
 8005b18:	2503      	movs	r5, #3
 8005b1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005df0 <_dtoa_r+0x640>
 8005b1e:	f1b8 0f00 	cmp.w	r8, #0
 8005b22:	d10a      	bne.n	8005b3a <_dtoa_r+0x38a>
 8005b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b28:	4632      	mov	r2, r6
 8005b2a:	463b      	mov	r3, r7
 8005b2c:	f7fa fe96 	bl	800085c <__aeabi_ddiv>
 8005b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b34:	e02b      	b.n	8005b8e <_dtoa_r+0x3de>
 8005b36:	2502      	movs	r5, #2
 8005b38:	e7ef      	b.n	8005b1a <_dtoa_r+0x36a>
 8005b3a:	f018 0f01 	tst.w	r8, #1
 8005b3e:	d008      	beq.n	8005b52 <_dtoa_r+0x3a2>
 8005b40:	4630      	mov	r0, r6
 8005b42:	4639      	mov	r1, r7
 8005b44:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005b48:	f7fa fd5e 	bl	8000608 <__aeabi_dmul>
 8005b4c:	3501      	adds	r5, #1
 8005b4e:	4606      	mov	r6, r0
 8005b50:	460f      	mov	r7, r1
 8005b52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b56:	f109 0908 	add.w	r9, r9, #8
 8005b5a:	e7e0      	b.n	8005b1e <_dtoa_r+0x36e>
 8005b5c:	f000 809f 	beq.w	8005c9e <_dtoa_r+0x4ee>
 8005b60:	f1cb 0600 	rsb	r6, fp, #0
 8005b64:	4ba1      	ldr	r3, [pc, #644]	; (8005dec <_dtoa_r+0x63c>)
 8005b66:	4fa2      	ldr	r7, [pc, #648]	; (8005df0 <_dtoa_r+0x640>)
 8005b68:	f006 020f 	and.w	r2, r6, #15
 8005b6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	ec51 0b18 	vmov	r0, r1, d8
 8005b78:	f7fa fd46 	bl	8000608 <__aeabi_dmul>
 8005b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b80:	1136      	asrs	r6, r6, #4
 8005b82:	2300      	movs	r3, #0
 8005b84:	2502      	movs	r5, #2
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	d17e      	bne.n	8005c88 <_dtoa_r+0x4d8>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1d0      	bne.n	8005b30 <_dtoa_r+0x380>
 8005b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 8084 	beq.w	8005ca2 <_dtoa_r+0x4f2>
 8005b9a:	4b96      	ldr	r3, [pc, #600]	; (8005df4 <_dtoa_r+0x644>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	f7fa ffa3 	bl	8000aec <__aeabi_dcmplt>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	d07b      	beq.n	8005ca2 <_dtoa_r+0x4f2>
 8005baa:	9b04      	ldr	r3, [sp, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d078      	beq.n	8005ca2 <_dtoa_r+0x4f2>
 8005bb0:	9b01      	ldr	r3, [sp, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	dd39      	ble.n	8005c2a <_dtoa_r+0x47a>
 8005bb6:	4b90      	ldr	r3, [pc, #576]	; (8005df8 <_dtoa_r+0x648>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	4640      	mov	r0, r8
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	f7fa fd23 	bl	8000608 <__aeabi_dmul>
 8005bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bc6:	9e01      	ldr	r6, [sp, #4]
 8005bc8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005bcc:	3501      	adds	r5, #1
 8005bce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f7fa fcae 	bl	8000534 <__aeabi_i2d>
 8005bd8:	4642      	mov	r2, r8
 8005bda:	464b      	mov	r3, r9
 8005bdc:	f7fa fd14 	bl	8000608 <__aeabi_dmul>
 8005be0:	4b86      	ldr	r3, [pc, #536]	; (8005dfc <_dtoa_r+0x64c>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	f7fa fb5a 	bl	800029c <__adddf3>
 8005be8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bf0:	9303      	str	r3, [sp, #12]
 8005bf2:	2e00      	cmp	r6, #0
 8005bf4:	d158      	bne.n	8005ca8 <_dtoa_r+0x4f8>
 8005bf6:	4b82      	ldr	r3, [pc, #520]	; (8005e00 <_dtoa_r+0x650>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	f7fa fb4b 	bl	8000298 <__aeabi_dsub>
 8005c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c06:	4680      	mov	r8, r0
 8005c08:	4689      	mov	r9, r1
 8005c0a:	f7fa ff8d 	bl	8000b28 <__aeabi_dcmpgt>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	f040 8296 	bne.w	8006140 <_dtoa_r+0x990>
 8005c14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005c18:	4640      	mov	r0, r8
 8005c1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c1e:	4649      	mov	r1, r9
 8005c20:	f7fa ff64 	bl	8000aec <__aeabi_dcmplt>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	f040 8289 	bne.w	800613c <_dtoa_r+0x98c>
 8005c2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005c2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f2c0 814e 	blt.w	8005ed2 <_dtoa_r+0x722>
 8005c36:	f1bb 0f0e 	cmp.w	fp, #14
 8005c3a:	f300 814a 	bgt.w	8005ed2 <_dtoa_r+0x722>
 8005c3e:	4b6b      	ldr	r3, [pc, #428]	; (8005dec <_dtoa_r+0x63c>)
 8005c40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f280 80dc 	bge.w	8005e08 <_dtoa_r+0x658>
 8005c50:	9b04      	ldr	r3, [sp, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f300 80d8 	bgt.w	8005e08 <_dtoa_r+0x658>
 8005c58:	f040 826f 	bne.w	800613a <_dtoa_r+0x98a>
 8005c5c:	4b68      	ldr	r3, [pc, #416]	; (8005e00 <_dtoa_r+0x650>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4640      	mov	r0, r8
 8005c62:	4649      	mov	r1, r9
 8005c64:	f7fa fcd0 	bl	8000608 <__aeabi_dmul>
 8005c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c6c:	f7fa ff52 	bl	8000b14 <__aeabi_dcmpge>
 8005c70:	9e04      	ldr	r6, [sp, #16]
 8005c72:	4637      	mov	r7, r6
 8005c74:	2800      	cmp	r0, #0
 8005c76:	f040 8245 	bne.w	8006104 <_dtoa_r+0x954>
 8005c7a:	9d00      	ldr	r5, [sp, #0]
 8005c7c:	2331      	movs	r3, #49	; 0x31
 8005c7e:	f805 3b01 	strb.w	r3, [r5], #1
 8005c82:	f10b 0b01 	add.w	fp, fp, #1
 8005c86:	e241      	b.n	800610c <_dtoa_r+0x95c>
 8005c88:	07f2      	lsls	r2, r6, #31
 8005c8a:	d505      	bpl.n	8005c98 <_dtoa_r+0x4e8>
 8005c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c90:	f7fa fcba 	bl	8000608 <__aeabi_dmul>
 8005c94:	3501      	adds	r5, #1
 8005c96:	2301      	movs	r3, #1
 8005c98:	1076      	asrs	r6, r6, #1
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	e773      	b.n	8005b86 <_dtoa_r+0x3d6>
 8005c9e:	2502      	movs	r5, #2
 8005ca0:	e775      	b.n	8005b8e <_dtoa_r+0x3de>
 8005ca2:	9e04      	ldr	r6, [sp, #16]
 8005ca4:	465f      	mov	r7, fp
 8005ca6:	e792      	b.n	8005bce <_dtoa_r+0x41e>
 8005ca8:	9900      	ldr	r1, [sp, #0]
 8005caa:	4b50      	ldr	r3, [pc, #320]	; (8005dec <_dtoa_r+0x63c>)
 8005cac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cb0:	4431      	add	r1, r6
 8005cb2:	9102      	str	r1, [sp, #8]
 8005cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cb6:	eeb0 9a47 	vmov.f32	s18, s14
 8005cba:	eef0 9a67 	vmov.f32	s19, s15
 8005cbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005cc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cc6:	2900      	cmp	r1, #0
 8005cc8:	d044      	beq.n	8005d54 <_dtoa_r+0x5a4>
 8005cca:	494e      	ldr	r1, [pc, #312]	; (8005e04 <_dtoa_r+0x654>)
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f7fa fdc5 	bl	800085c <__aeabi_ddiv>
 8005cd2:	ec53 2b19 	vmov	r2, r3, d9
 8005cd6:	f7fa fadf 	bl	8000298 <__aeabi_dsub>
 8005cda:	9d00      	ldr	r5, [sp, #0]
 8005cdc:	ec41 0b19 	vmov	d9, r0, r1
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	f7fa ff40 	bl	8000b68 <__aeabi_d2iz>
 8005ce8:	4606      	mov	r6, r0
 8005cea:	f7fa fc23 	bl	8000534 <__aeabi_i2d>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	f7fa facf 	bl	8000298 <__aeabi_dsub>
 8005cfa:	3630      	adds	r6, #48	; 0x30
 8005cfc:	f805 6b01 	strb.w	r6, [r5], #1
 8005d00:	ec53 2b19 	vmov	r2, r3, d9
 8005d04:	4680      	mov	r8, r0
 8005d06:	4689      	mov	r9, r1
 8005d08:	f7fa fef0 	bl	8000aec <__aeabi_dcmplt>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d164      	bne.n	8005dda <_dtoa_r+0x62a>
 8005d10:	4642      	mov	r2, r8
 8005d12:	464b      	mov	r3, r9
 8005d14:	4937      	ldr	r1, [pc, #220]	; (8005df4 <_dtoa_r+0x644>)
 8005d16:	2000      	movs	r0, #0
 8005d18:	f7fa fabe 	bl	8000298 <__aeabi_dsub>
 8005d1c:	ec53 2b19 	vmov	r2, r3, d9
 8005d20:	f7fa fee4 	bl	8000aec <__aeabi_dcmplt>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	f040 80b6 	bne.w	8005e96 <_dtoa_r+0x6e6>
 8005d2a:	9b02      	ldr	r3, [sp, #8]
 8005d2c:	429d      	cmp	r5, r3
 8005d2e:	f43f af7c 	beq.w	8005c2a <_dtoa_r+0x47a>
 8005d32:	4b31      	ldr	r3, [pc, #196]	; (8005df8 <_dtoa_r+0x648>)
 8005d34:	ec51 0b19 	vmov	r0, r1, d9
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f7fa fc65 	bl	8000608 <__aeabi_dmul>
 8005d3e:	4b2e      	ldr	r3, [pc, #184]	; (8005df8 <_dtoa_r+0x648>)
 8005d40:	ec41 0b19 	vmov	d9, r0, r1
 8005d44:	2200      	movs	r2, #0
 8005d46:	4640      	mov	r0, r8
 8005d48:	4649      	mov	r1, r9
 8005d4a:	f7fa fc5d 	bl	8000608 <__aeabi_dmul>
 8005d4e:	4680      	mov	r8, r0
 8005d50:	4689      	mov	r9, r1
 8005d52:	e7c5      	b.n	8005ce0 <_dtoa_r+0x530>
 8005d54:	ec51 0b17 	vmov	r0, r1, d7
 8005d58:	f7fa fc56 	bl	8000608 <__aeabi_dmul>
 8005d5c:	9b02      	ldr	r3, [sp, #8]
 8005d5e:	9d00      	ldr	r5, [sp, #0]
 8005d60:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d62:	ec41 0b19 	vmov	d9, r0, r1
 8005d66:	4649      	mov	r1, r9
 8005d68:	4640      	mov	r0, r8
 8005d6a:	f7fa fefd 	bl	8000b68 <__aeabi_d2iz>
 8005d6e:	4606      	mov	r6, r0
 8005d70:	f7fa fbe0 	bl	8000534 <__aeabi_i2d>
 8005d74:	3630      	adds	r6, #48	; 0x30
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4640      	mov	r0, r8
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	f7fa fa8b 	bl	8000298 <__aeabi_dsub>
 8005d82:	f805 6b01 	strb.w	r6, [r5], #1
 8005d86:	9b02      	ldr	r3, [sp, #8]
 8005d88:	429d      	cmp	r5, r3
 8005d8a:	4680      	mov	r8, r0
 8005d8c:	4689      	mov	r9, r1
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	d124      	bne.n	8005dde <_dtoa_r+0x62e>
 8005d94:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <_dtoa_r+0x654>)
 8005d96:	ec51 0b19 	vmov	r0, r1, d9
 8005d9a:	f7fa fa7f 	bl	800029c <__adddf3>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4640      	mov	r0, r8
 8005da4:	4649      	mov	r1, r9
 8005da6:	f7fa febf 	bl	8000b28 <__aeabi_dcmpgt>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d173      	bne.n	8005e96 <_dtoa_r+0x6e6>
 8005dae:	ec53 2b19 	vmov	r2, r3, d9
 8005db2:	4914      	ldr	r1, [pc, #80]	; (8005e04 <_dtoa_r+0x654>)
 8005db4:	2000      	movs	r0, #0
 8005db6:	f7fa fa6f 	bl	8000298 <__aeabi_dsub>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	f7fa fe93 	bl	8000aec <__aeabi_dcmplt>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f43f af2f 	beq.w	8005c2a <_dtoa_r+0x47a>
 8005dcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005dce:	1e6b      	subs	r3, r5, #1
 8005dd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005dd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005dd6:	2b30      	cmp	r3, #48	; 0x30
 8005dd8:	d0f8      	beq.n	8005dcc <_dtoa_r+0x61c>
 8005dda:	46bb      	mov	fp, r7
 8005ddc:	e04a      	b.n	8005e74 <_dtoa_r+0x6c4>
 8005dde:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <_dtoa_r+0x648>)
 8005de0:	f7fa fc12 	bl	8000608 <__aeabi_dmul>
 8005de4:	4680      	mov	r8, r0
 8005de6:	4689      	mov	r9, r1
 8005de8:	e7bd      	b.n	8005d66 <_dtoa_r+0x5b6>
 8005dea:	bf00      	nop
 8005dec:	08008a48 	.word	0x08008a48
 8005df0:	08008a20 	.word	0x08008a20
 8005df4:	3ff00000 	.word	0x3ff00000
 8005df8:	40240000 	.word	0x40240000
 8005dfc:	401c0000 	.word	0x401c0000
 8005e00:	40140000 	.word	0x40140000
 8005e04:	3fe00000 	.word	0x3fe00000
 8005e08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e0c:	9d00      	ldr	r5, [sp, #0]
 8005e0e:	4642      	mov	r2, r8
 8005e10:	464b      	mov	r3, r9
 8005e12:	4630      	mov	r0, r6
 8005e14:	4639      	mov	r1, r7
 8005e16:	f7fa fd21 	bl	800085c <__aeabi_ddiv>
 8005e1a:	f7fa fea5 	bl	8000b68 <__aeabi_d2iz>
 8005e1e:	9001      	str	r0, [sp, #4]
 8005e20:	f7fa fb88 	bl	8000534 <__aeabi_i2d>
 8005e24:	4642      	mov	r2, r8
 8005e26:	464b      	mov	r3, r9
 8005e28:	f7fa fbee 	bl	8000608 <__aeabi_dmul>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4630      	mov	r0, r6
 8005e32:	4639      	mov	r1, r7
 8005e34:	f7fa fa30 	bl	8000298 <__aeabi_dsub>
 8005e38:	9e01      	ldr	r6, [sp, #4]
 8005e3a:	9f04      	ldr	r7, [sp, #16]
 8005e3c:	3630      	adds	r6, #48	; 0x30
 8005e3e:	f805 6b01 	strb.w	r6, [r5], #1
 8005e42:	9e00      	ldr	r6, [sp, #0]
 8005e44:	1bae      	subs	r6, r5, r6
 8005e46:	42b7      	cmp	r7, r6
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	d134      	bne.n	8005eb8 <_dtoa_r+0x708>
 8005e4e:	f7fa fa25 	bl	800029c <__adddf3>
 8005e52:	4642      	mov	r2, r8
 8005e54:	464b      	mov	r3, r9
 8005e56:	4606      	mov	r6, r0
 8005e58:	460f      	mov	r7, r1
 8005e5a:	f7fa fe65 	bl	8000b28 <__aeabi_dcmpgt>
 8005e5e:	b9c8      	cbnz	r0, 8005e94 <_dtoa_r+0x6e4>
 8005e60:	4642      	mov	r2, r8
 8005e62:	464b      	mov	r3, r9
 8005e64:	4630      	mov	r0, r6
 8005e66:	4639      	mov	r1, r7
 8005e68:	f7fa fe36 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e6c:	b110      	cbz	r0, 8005e74 <_dtoa_r+0x6c4>
 8005e6e:	9b01      	ldr	r3, [sp, #4]
 8005e70:	07db      	lsls	r3, r3, #31
 8005e72:	d40f      	bmi.n	8005e94 <_dtoa_r+0x6e4>
 8005e74:	4651      	mov	r1, sl
 8005e76:	4620      	mov	r0, r4
 8005e78:	f000 fd86 	bl	8006988 <_Bfree>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e80:	702b      	strb	r3, [r5, #0]
 8005e82:	f10b 0301 	add.w	r3, fp, #1
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f43f ace2 	beq.w	8005854 <_dtoa_r+0xa4>
 8005e90:	601d      	str	r5, [r3, #0]
 8005e92:	e4df      	b.n	8005854 <_dtoa_r+0xa4>
 8005e94:	465f      	mov	r7, fp
 8005e96:	462b      	mov	r3, r5
 8005e98:	461d      	mov	r5, r3
 8005e9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e9e:	2a39      	cmp	r2, #57	; 0x39
 8005ea0:	d106      	bne.n	8005eb0 <_dtoa_r+0x700>
 8005ea2:	9a00      	ldr	r2, [sp, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d1f7      	bne.n	8005e98 <_dtoa_r+0x6e8>
 8005ea8:	9900      	ldr	r1, [sp, #0]
 8005eaa:	2230      	movs	r2, #48	; 0x30
 8005eac:	3701      	adds	r7, #1
 8005eae:	700a      	strb	r2, [r1, #0]
 8005eb0:	781a      	ldrb	r2, [r3, #0]
 8005eb2:	3201      	adds	r2, #1
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	e790      	b.n	8005dda <_dtoa_r+0x62a>
 8005eb8:	4ba3      	ldr	r3, [pc, #652]	; (8006148 <_dtoa_r+0x998>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f7fa fba4 	bl	8000608 <__aeabi_dmul>
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	460f      	mov	r7, r1
 8005ec8:	f7fa fe06 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	d09e      	beq.n	8005e0e <_dtoa_r+0x65e>
 8005ed0:	e7d0      	b.n	8005e74 <_dtoa_r+0x6c4>
 8005ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed4:	2a00      	cmp	r2, #0
 8005ed6:	f000 80ca 	beq.w	800606e <_dtoa_r+0x8be>
 8005eda:	9a07      	ldr	r2, [sp, #28]
 8005edc:	2a01      	cmp	r2, #1
 8005ede:	f300 80ad 	bgt.w	800603c <_dtoa_r+0x88c>
 8005ee2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ee4:	2a00      	cmp	r2, #0
 8005ee6:	f000 80a5 	beq.w	8006034 <_dtoa_r+0x884>
 8005eea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005eee:	9e08      	ldr	r6, [sp, #32]
 8005ef0:	9d05      	ldr	r5, [sp, #20]
 8005ef2:	9a05      	ldr	r2, [sp, #20]
 8005ef4:	441a      	add	r2, r3
 8005ef6:	9205      	str	r2, [sp, #20]
 8005ef8:	9a06      	ldr	r2, [sp, #24]
 8005efa:	2101      	movs	r1, #1
 8005efc:	441a      	add	r2, r3
 8005efe:	4620      	mov	r0, r4
 8005f00:	9206      	str	r2, [sp, #24]
 8005f02:	f000 fdf7 	bl	8006af4 <__i2b>
 8005f06:	4607      	mov	r7, r0
 8005f08:	b165      	cbz	r5, 8005f24 <_dtoa_r+0x774>
 8005f0a:	9b06      	ldr	r3, [sp, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dd09      	ble.n	8005f24 <_dtoa_r+0x774>
 8005f10:	42ab      	cmp	r3, r5
 8005f12:	9a05      	ldr	r2, [sp, #20]
 8005f14:	bfa8      	it	ge
 8005f16:	462b      	movge	r3, r5
 8005f18:	1ad2      	subs	r2, r2, r3
 8005f1a:	9205      	str	r2, [sp, #20]
 8005f1c:	9a06      	ldr	r2, [sp, #24]
 8005f1e:	1aed      	subs	r5, r5, r3
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	9306      	str	r3, [sp, #24]
 8005f24:	9b08      	ldr	r3, [sp, #32]
 8005f26:	b1f3      	cbz	r3, 8005f66 <_dtoa_r+0x7b6>
 8005f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 80a3 	beq.w	8006076 <_dtoa_r+0x8c6>
 8005f30:	2e00      	cmp	r6, #0
 8005f32:	dd10      	ble.n	8005f56 <_dtoa_r+0x7a6>
 8005f34:	4639      	mov	r1, r7
 8005f36:	4632      	mov	r2, r6
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f000 fe9b 	bl	8006c74 <__pow5mult>
 8005f3e:	4652      	mov	r2, sl
 8005f40:	4601      	mov	r1, r0
 8005f42:	4607      	mov	r7, r0
 8005f44:	4620      	mov	r0, r4
 8005f46:	f000 fdeb 	bl	8006b20 <__multiply>
 8005f4a:	4651      	mov	r1, sl
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 fd1a 	bl	8006988 <_Bfree>
 8005f54:	46c2      	mov	sl, r8
 8005f56:	9b08      	ldr	r3, [sp, #32]
 8005f58:	1b9a      	subs	r2, r3, r6
 8005f5a:	d004      	beq.n	8005f66 <_dtoa_r+0x7b6>
 8005f5c:	4651      	mov	r1, sl
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f000 fe88 	bl	8006c74 <__pow5mult>
 8005f64:	4682      	mov	sl, r0
 8005f66:	2101      	movs	r1, #1
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f000 fdc3 	bl	8006af4 <__i2b>
 8005f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	4606      	mov	r6, r0
 8005f74:	f340 8081 	ble.w	800607a <_dtoa_r+0x8ca>
 8005f78:	461a      	mov	r2, r3
 8005f7a:	4601      	mov	r1, r0
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f000 fe79 	bl	8006c74 <__pow5mult>
 8005f82:	9b07      	ldr	r3, [sp, #28]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	4606      	mov	r6, r0
 8005f88:	dd7a      	ble.n	8006080 <_dtoa_r+0x8d0>
 8005f8a:	f04f 0800 	mov.w	r8, #0
 8005f8e:	6933      	ldr	r3, [r6, #16]
 8005f90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f94:	6918      	ldr	r0, [r3, #16]
 8005f96:	f000 fd5f 	bl	8006a58 <__hi0bits>
 8005f9a:	f1c0 0020 	rsb	r0, r0, #32
 8005f9e:	9b06      	ldr	r3, [sp, #24]
 8005fa0:	4418      	add	r0, r3
 8005fa2:	f010 001f 	ands.w	r0, r0, #31
 8005fa6:	f000 8094 	beq.w	80060d2 <_dtoa_r+0x922>
 8005faa:	f1c0 0320 	rsb	r3, r0, #32
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	f340 8085 	ble.w	80060be <_dtoa_r+0x90e>
 8005fb4:	9b05      	ldr	r3, [sp, #20]
 8005fb6:	f1c0 001c 	rsb	r0, r0, #28
 8005fba:	4403      	add	r3, r0
 8005fbc:	9305      	str	r3, [sp, #20]
 8005fbe:	9b06      	ldr	r3, [sp, #24]
 8005fc0:	4403      	add	r3, r0
 8005fc2:	4405      	add	r5, r0
 8005fc4:	9306      	str	r3, [sp, #24]
 8005fc6:	9b05      	ldr	r3, [sp, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	dd05      	ble.n	8005fd8 <_dtoa_r+0x828>
 8005fcc:	4651      	mov	r1, sl
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 fea9 	bl	8006d28 <__lshift>
 8005fd6:	4682      	mov	sl, r0
 8005fd8:	9b06      	ldr	r3, [sp, #24]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	dd05      	ble.n	8005fea <_dtoa_r+0x83a>
 8005fde:	4631      	mov	r1, r6
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f000 fea0 	bl	8006d28 <__lshift>
 8005fe8:	4606      	mov	r6, r0
 8005fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d072      	beq.n	80060d6 <_dtoa_r+0x926>
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4650      	mov	r0, sl
 8005ff4:	f000 ff04 	bl	8006e00 <__mcmp>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	da6c      	bge.n	80060d6 <_dtoa_r+0x926>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4651      	mov	r1, sl
 8006000:	220a      	movs	r2, #10
 8006002:	4620      	mov	r0, r4
 8006004:	f000 fce2 	bl	80069cc <__multadd>
 8006008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800600a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800600e:	4682      	mov	sl, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 81b0 	beq.w	8006376 <_dtoa_r+0xbc6>
 8006016:	2300      	movs	r3, #0
 8006018:	4639      	mov	r1, r7
 800601a:	220a      	movs	r2, #10
 800601c:	4620      	mov	r0, r4
 800601e:	f000 fcd5 	bl	80069cc <__multadd>
 8006022:	9b01      	ldr	r3, [sp, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	4607      	mov	r7, r0
 8006028:	f300 8096 	bgt.w	8006158 <_dtoa_r+0x9a8>
 800602c:	9b07      	ldr	r3, [sp, #28]
 800602e:	2b02      	cmp	r3, #2
 8006030:	dc59      	bgt.n	80060e6 <_dtoa_r+0x936>
 8006032:	e091      	b.n	8006158 <_dtoa_r+0x9a8>
 8006034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006036:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800603a:	e758      	b.n	8005eee <_dtoa_r+0x73e>
 800603c:	9b04      	ldr	r3, [sp, #16]
 800603e:	1e5e      	subs	r6, r3, #1
 8006040:	9b08      	ldr	r3, [sp, #32]
 8006042:	42b3      	cmp	r3, r6
 8006044:	bfbf      	itttt	lt
 8006046:	9b08      	ldrlt	r3, [sp, #32]
 8006048:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800604a:	9608      	strlt	r6, [sp, #32]
 800604c:	1af3      	sublt	r3, r6, r3
 800604e:	bfb4      	ite	lt
 8006050:	18d2      	addlt	r2, r2, r3
 8006052:	1b9e      	subge	r6, r3, r6
 8006054:	9b04      	ldr	r3, [sp, #16]
 8006056:	bfbc      	itt	lt
 8006058:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800605a:	2600      	movlt	r6, #0
 800605c:	2b00      	cmp	r3, #0
 800605e:	bfb7      	itett	lt
 8006060:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006064:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006068:	1a9d      	sublt	r5, r3, r2
 800606a:	2300      	movlt	r3, #0
 800606c:	e741      	b.n	8005ef2 <_dtoa_r+0x742>
 800606e:	9e08      	ldr	r6, [sp, #32]
 8006070:	9d05      	ldr	r5, [sp, #20]
 8006072:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006074:	e748      	b.n	8005f08 <_dtoa_r+0x758>
 8006076:	9a08      	ldr	r2, [sp, #32]
 8006078:	e770      	b.n	8005f5c <_dtoa_r+0x7ac>
 800607a:	9b07      	ldr	r3, [sp, #28]
 800607c:	2b01      	cmp	r3, #1
 800607e:	dc19      	bgt.n	80060b4 <_dtoa_r+0x904>
 8006080:	9b02      	ldr	r3, [sp, #8]
 8006082:	b9bb      	cbnz	r3, 80060b4 <_dtoa_r+0x904>
 8006084:	9b03      	ldr	r3, [sp, #12]
 8006086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800608a:	b99b      	cbnz	r3, 80060b4 <_dtoa_r+0x904>
 800608c:	9b03      	ldr	r3, [sp, #12]
 800608e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006092:	0d1b      	lsrs	r3, r3, #20
 8006094:	051b      	lsls	r3, r3, #20
 8006096:	b183      	cbz	r3, 80060ba <_dtoa_r+0x90a>
 8006098:	9b05      	ldr	r3, [sp, #20]
 800609a:	3301      	adds	r3, #1
 800609c:	9305      	str	r3, [sp, #20]
 800609e:	9b06      	ldr	r3, [sp, #24]
 80060a0:	3301      	adds	r3, #1
 80060a2:	9306      	str	r3, [sp, #24]
 80060a4:	f04f 0801 	mov.w	r8, #1
 80060a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f47f af6f 	bne.w	8005f8e <_dtoa_r+0x7de>
 80060b0:	2001      	movs	r0, #1
 80060b2:	e774      	b.n	8005f9e <_dtoa_r+0x7ee>
 80060b4:	f04f 0800 	mov.w	r8, #0
 80060b8:	e7f6      	b.n	80060a8 <_dtoa_r+0x8f8>
 80060ba:	4698      	mov	r8, r3
 80060bc:	e7f4      	b.n	80060a8 <_dtoa_r+0x8f8>
 80060be:	d082      	beq.n	8005fc6 <_dtoa_r+0x816>
 80060c0:	9a05      	ldr	r2, [sp, #20]
 80060c2:	331c      	adds	r3, #28
 80060c4:	441a      	add	r2, r3
 80060c6:	9205      	str	r2, [sp, #20]
 80060c8:	9a06      	ldr	r2, [sp, #24]
 80060ca:	441a      	add	r2, r3
 80060cc:	441d      	add	r5, r3
 80060ce:	9206      	str	r2, [sp, #24]
 80060d0:	e779      	b.n	8005fc6 <_dtoa_r+0x816>
 80060d2:	4603      	mov	r3, r0
 80060d4:	e7f4      	b.n	80060c0 <_dtoa_r+0x910>
 80060d6:	9b04      	ldr	r3, [sp, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	dc37      	bgt.n	800614c <_dtoa_r+0x99c>
 80060dc:	9b07      	ldr	r3, [sp, #28]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	dd34      	ble.n	800614c <_dtoa_r+0x99c>
 80060e2:	9b04      	ldr	r3, [sp, #16]
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	b963      	cbnz	r3, 8006104 <_dtoa_r+0x954>
 80060ea:	4631      	mov	r1, r6
 80060ec:	2205      	movs	r2, #5
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 fc6c 	bl	80069cc <__multadd>
 80060f4:	4601      	mov	r1, r0
 80060f6:	4606      	mov	r6, r0
 80060f8:	4650      	mov	r0, sl
 80060fa:	f000 fe81 	bl	8006e00 <__mcmp>
 80060fe:	2800      	cmp	r0, #0
 8006100:	f73f adbb 	bgt.w	8005c7a <_dtoa_r+0x4ca>
 8006104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006106:	9d00      	ldr	r5, [sp, #0]
 8006108:	ea6f 0b03 	mvn.w	fp, r3
 800610c:	f04f 0800 	mov.w	r8, #0
 8006110:	4631      	mov	r1, r6
 8006112:	4620      	mov	r0, r4
 8006114:	f000 fc38 	bl	8006988 <_Bfree>
 8006118:	2f00      	cmp	r7, #0
 800611a:	f43f aeab 	beq.w	8005e74 <_dtoa_r+0x6c4>
 800611e:	f1b8 0f00 	cmp.w	r8, #0
 8006122:	d005      	beq.n	8006130 <_dtoa_r+0x980>
 8006124:	45b8      	cmp	r8, r7
 8006126:	d003      	beq.n	8006130 <_dtoa_r+0x980>
 8006128:	4641      	mov	r1, r8
 800612a:	4620      	mov	r0, r4
 800612c:	f000 fc2c 	bl	8006988 <_Bfree>
 8006130:	4639      	mov	r1, r7
 8006132:	4620      	mov	r0, r4
 8006134:	f000 fc28 	bl	8006988 <_Bfree>
 8006138:	e69c      	b.n	8005e74 <_dtoa_r+0x6c4>
 800613a:	2600      	movs	r6, #0
 800613c:	4637      	mov	r7, r6
 800613e:	e7e1      	b.n	8006104 <_dtoa_r+0x954>
 8006140:	46bb      	mov	fp, r7
 8006142:	4637      	mov	r7, r6
 8006144:	e599      	b.n	8005c7a <_dtoa_r+0x4ca>
 8006146:	bf00      	nop
 8006148:	40240000 	.word	0x40240000
 800614c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 80c8 	beq.w	80062e4 <_dtoa_r+0xb34>
 8006154:	9b04      	ldr	r3, [sp, #16]
 8006156:	9301      	str	r3, [sp, #4]
 8006158:	2d00      	cmp	r5, #0
 800615a:	dd05      	ble.n	8006168 <_dtoa_r+0x9b8>
 800615c:	4639      	mov	r1, r7
 800615e:	462a      	mov	r2, r5
 8006160:	4620      	mov	r0, r4
 8006162:	f000 fde1 	bl	8006d28 <__lshift>
 8006166:	4607      	mov	r7, r0
 8006168:	f1b8 0f00 	cmp.w	r8, #0
 800616c:	d05b      	beq.n	8006226 <_dtoa_r+0xa76>
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fbc9 	bl	8006908 <_Balloc>
 8006176:	4605      	mov	r5, r0
 8006178:	b928      	cbnz	r0, 8006186 <_dtoa_r+0x9d6>
 800617a:	4b83      	ldr	r3, [pc, #524]	; (8006388 <_dtoa_r+0xbd8>)
 800617c:	4602      	mov	r2, r0
 800617e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006182:	f7ff bb2e 	b.w	80057e2 <_dtoa_r+0x32>
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	3202      	adds	r2, #2
 800618a:	0092      	lsls	r2, r2, #2
 800618c:	f107 010c 	add.w	r1, r7, #12
 8006190:	300c      	adds	r0, #12
 8006192:	f001 f817 	bl	80071c4 <memcpy>
 8006196:	2201      	movs	r2, #1
 8006198:	4629      	mov	r1, r5
 800619a:	4620      	mov	r0, r4
 800619c:	f000 fdc4 	bl	8006d28 <__lshift>
 80061a0:	9b00      	ldr	r3, [sp, #0]
 80061a2:	3301      	adds	r3, #1
 80061a4:	9304      	str	r3, [sp, #16]
 80061a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061aa:	4413      	add	r3, r2
 80061ac:	9308      	str	r3, [sp, #32]
 80061ae:	9b02      	ldr	r3, [sp, #8]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	46b8      	mov	r8, r7
 80061b6:	9306      	str	r3, [sp, #24]
 80061b8:	4607      	mov	r7, r0
 80061ba:	9b04      	ldr	r3, [sp, #16]
 80061bc:	4631      	mov	r1, r6
 80061be:	3b01      	subs	r3, #1
 80061c0:	4650      	mov	r0, sl
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	f7ff fa6b 	bl	800569e <quorem>
 80061c8:	4641      	mov	r1, r8
 80061ca:	9002      	str	r0, [sp, #8]
 80061cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061d0:	4650      	mov	r0, sl
 80061d2:	f000 fe15 	bl	8006e00 <__mcmp>
 80061d6:	463a      	mov	r2, r7
 80061d8:	9005      	str	r0, [sp, #20]
 80061da:	4631      	mov	r1, r6
 80061dc:	4620      	mov	r0, r4
 80061de:	f000 fe2b 	bl	8006e38 <__mdiff>
 80061e2:	68c2      	ldr	r2, [r0, #12]
 80061e4:	4605      	mov	r5, r0
 80061e6:	bb02      	cbnz	r2, 800622a <_dtoa_r+0xa7a>
 80061e8:	4601      	mov	r1, r0
 80061ea:	4650      	mov	r0, sl
 80061ec:	f000 fe08 	bl	8006e00 <__mcmp>
 80061f0:	4602      	mov	r2, r0
 80061f2:	4629      	mov	r1, r5
 80061f4:	4620      	mov	r0, r4
 80061f6:	9209      	str	r2, [sp, #36]	; 0x24
 80061f8:	f000 fbc6 	bl	8006988 <_Bfree>
 80061fc:	9b07      	ldr	r3, [sp, #28]
 80061fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006200:	9d04      	ldr	r5, [sp, #16]
 8006202:	ea43 0102 	orr.w	r1, r3, r2
 8006206:	9b06      	ldr	r3, [sp, #24]
 8006208:	4319      	orrs	r1, r3
 800620a:	d110      	bne.n	800622e <_dtoa_r+0xa7e>
 800620c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006210:	d029      	beq.n	8006266 <_dtoa_r+0xab6>
 8006212:	9b05      	ldr	r3, [sp, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	dd02      	ble.n	800621e <_dtoa_r+0xa6e>
 8006218:	9b02      	ldr	r3, [sp, #8]
 800621a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800621e:	9b01      	ldr	r3, [sp, #4]
 8006220:	f883 9000 	strb.w	r9, [r3]
 8006224:	e774      	b.n	8006110 <_dtoa_r+0x960>
 8006226:	4638      	mov	r0, r7
 8006228:	e7ba      	b.n	80061a0 <_dtoa_r+0x9f0>
 800622a:	2201      	movs	r2, #1
 800622c:	e7e1      	b.n	80061f2 <_dtoa_r+0xa42>
 800622e:	9b05      	ldr	r3, [sp, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	db04      	blt.n	800623e <_dtoa_r+0xa8e>
 8006234:	9907      	ldr	r1, [sp, #28]
 8006236:	430b      	orrs	r3, r1
 8006238:	9906      	ldr	r1, [sp, #24]
 800623a:	430b      	orrs	r3, r1
 800623c:	d120      	bne.n	8006280 <_dtoa_r+0xad0>
 800623e:	2a00      	cmp	r2, #0
 8006240:	dded      	ble.n	800621e <_dtoa_r+0xa6e>
 8006242:	4651      	mov	r1, sl
 8006244:	2201      	movs	r2, #1
 8006246:	4620      	mov	r0, r4
 8006248:	f000 fd6e 	bl	8006d28 <__lshift>
 800624c:	4631      	mov	r1, r6
 800624e:	4682      	mov	sl, r0
 8006250:	f000 fdd6 	bl	8006e00 <__mcmp>
 8006254:	2800      	cmp	r0, #0
 8006256:	dc03      	bgt.n	8006260 <_dtoa_r+0xab0>
 8006258:	d1e1      	bne.n	800621e <_dtoa_r+0xa6e>
 800625a:	f019 0f01 	tst.w	r9, #1
 800625e:	d0de      	beq.n	800621e <_dtoa_r+0xa6e>
 8006260:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006264:	d1d8      	bne.n	8006218 <_dtoa_r+0xa68>
 8006266:	9a01      	ldr	r2, [sp, #4]
 8006268:	2339      	movs	r3, #57	; 0x39
 800626a:	7013      	strb	r3, [r2, #0]
 800626c:	462b      	mov	r3, r5
 800626e:	461d      	mov	r5, r3
 8006270:	3b01      	subs	r3, #1
 8006272:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006276:	2a39      	cmp	r2, #57	; 0x39
 8006278:	d06c      	beq.n	8006354 <_dtoa_r+0xba4>
 800627a:	3201      	adds	r2, #1
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	e747      	b.n	8006110 <_dtoa_r+0x960>
 8006280:	2a00      	cmp	r2, #0
 8006282:	dd07      	ble.n	8006294 <_dtoa_r+0xae4>
 8006284:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006288:	d0ed      	beq.n	8006266 <_dtoa_r+0xab6>
 800628a:	9a01      	ldr	r2, [sp, #4]
 800628c:	f109 0301 	add.w	r3, r9, #1
 8006290:	7013      	strb	r3, [r2, #0]
 8006292:	e73d      	b.n	8006110 <_dtoa_r+0x960>
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	9a08      	ldr	r2, [sp, #32]
 8006298:	f803 9c01 	strb.w	r9, [r3, #-1]
 800629c:	4293      	cmp	r3, r2
 800629e:	d043      	beq.n	8006328 <_dtoa_r+0xb78>
 80062a0:	4651      	mov	r1, sl
 80062a2:	2300      	movs	r3, #0
 80062a4:	220a      	movs	r2, #10
 80062a6:	4620      	mov	r0, r4
 80062a8:	f000 fb90 	bl	80069cc <__multadd>
 80062ac:	45b8      	cmp	r8, r7
 80062ae:	4682      	mov	sl, r0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	f04f 020a 	mov.w	r2, #10
 80062b8:	4641      	mov	r1, r8
 80062ba:	4620      	mov	r0, r4
 80062bc:	d107      	bne.n	80062ce <_dtoa_r+0xb1e>
 80062be:	f000 fb85 	bl	80069cc <__multadd>
 80062c2:	4680      	mov	r8, r0
 80062c4:	4607      	mov	r7, r0
 80062c6:	9b04      	ldr	r3, [sp, #16]
 80062c8:	3301      	adds	r3, #1
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	e775      	b.n	80061ba <_dtoa_r+0xa0a>
 80062ce:	f000 fb7d 	bl	80069cc <__multadd>
 80062d2:	4639      	mov	r1, r7
 80062d4:	4680      	mov	r8, r0
 80062d6:	2300      	movs	r3, #0
 80062d8:	220a      	movs	r2, #10
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 fb76 	bl	80069cc <__multadd>
 80062e0:	4607      	mov	r7, r0
 80062e2:	e7f0      	b.n	80062c6 <_dtoa_r+0xb16>
 80062e4:	9b04      	ldr	r3, [sp, #16]
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	9d00      	ldr	r5, [sp, #0]
 80062ea:	4631      	mov	r1, r6
 80062ec:	4650      	mov	r0, sl
 80062ee:	f7ff f9d6 	bl	800569e <quorem>
 80062f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80062f6:	9b00      	ldr	r3, [sp, #0]
 80062f8:	f805 9b01 	strb.w	r9, [r5], #1
 80062fc:	1aea      	subs	r2, r5, r3
 80062fe:	9b01      	ldr	r3, [sp, #4]
 8006300:	4293      	cmp	r3, r2
 8006302:	dd07      	ble.n	8006314 <_dtoa_r+0xb64>
 8006304:	4651      	mov	r1, sl
 8006306:	2300      	movs	r3, #0
 8006308:	220a      	movs	r2, #10
 800630a:	4620      	mov	r0, r4
 800630c:	f000 fb5e 	bl	80069cc <__multadd>
 8006310:	4682      	mov	sl, r0
 8006312:	e7ea      	b.n	80062ea <_dtoa_r+0xb3a>
 8006314:	9b01      	ldr	r3, [sp, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	bfc8      	it	gt
 800631a:	461d      	movgt	r5, r3
 800631c:	9b00      	ldr	r3, [sp, #0]
 800631e:	bfd8      	it	le
 8006320:	2501      	movle	r5, #1
 8006322:	441d      	add	r5, r3
 8006324:	f04f 0800 	mov.w	r8, #0
 8006328:	4651      	mov	r1, sl
 800632a:	2201      	movs	r2, #1
 800632c:	4620      	mov	r0, r4
 800632e:	f000 fcfb 	bl	8006d28 <__lshift>
 8006332:	4631      	mov	r1, r6
 8006334:	4682      	mov	sl, r0
 8006336:	f000 fd63 	bl	8006e00 <__mcmp>
 800633a:	2800      	cmp	r0, #0
 800633c:	dc96      	bgt.n	800626c <_dtoa_r+0xabc>
 800633e:	d102      	bne.n	8006346 <_dtoa_r+0xb96>
 8006340:	f019 0f01 	tst.w	r9, #1
 8006344:	d192      	bne.n	800626c <_dtoa_r+0xabc>
 8006346:	462b      	mov	r3, r5
 8006348:	461d      	mov	r5, r3
 800634a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800634e:	2a30      	cmp	r2, #48	; 0x30
 8006350:	d0fa      	beq.n	8006348 <_dtoa_r+0xb98>
 8006352:	e6dd      	b.n	8006110 <_dtoa_r+0x960>
 8006354:	9a00      	ldr	r2, [sp, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d189      	bne.n	800626e <_dtoa_r+0xabe>
 800635a:	f10b 0b01 	add.w	fp, fp, #1
 800635e:	2331      	movs	r3, #49	; 0x31
 8006360:	e796      	b.n	8006290 <_dtoa_r+0xae0>
 8006362:	4b0a      	ldr	r3, [pc, #40]	; (800638c <_dtoa_r+0xbdc>)
 8006364:	f7ff ba99 	b.w	800589a <_dtoa_r+0xea>
 8006368:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800636a:	2b00      	cmp	r3, #0
 800636c:	f47f aa6d 	bne.w	800584a <_dtoa_r+0x9a>
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <_dtoa_r+0xbe0>)
 8006372:	f7ff ba92 	b.w	800589a <_dtoa_r+0xea>
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	dcb5      	bgt.n	80062e8 <_dtoa_r+0xb38>
 800637c:	9b07      	ldr	r3, [sp, #28]
 800637e:	2b02      	cmp	r3, #2
 8006380:	f73f aeb1 	bgt.w	80060e6 <_dtoa_r+0x936>
 8006384:	e7b0      	b.n	80062e8 <_dtoa_r+0xb38>
 8006386:	bf00      	nop
 8006388:	080089a1 	.word	0x080089a1
 800638c:	08008800 	.word	0x08008800
 8006390:	08008925 	.word	0x08008925

08006394 <__ssputs_r>:
 8006394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006398:	688e      	ldr	r6, [r1, #8]
 800639a:	461f      	mov	r7, r3
 800639c:	42be      	cmp	r6, r7
 800639e:	680b      	ldr	r3, [r1, #0]
 80063a0:	4682      	mov	sl, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	4690      	mov	r8, r2
 80063a6:	d82c      	bhi.n	8006402 <__ssputs_r+0x6e>
 80063a8:	898a      	ldrh	r2, [r1, #12]
 80063aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063ae:	d026      	beq.n	80063fe <__ssputs_r+0x6a>
 80063b0:	6965      	ldr	r5, [r4, #20]
 80063b2:	6909      	ldr	r1, [r1, #16]
 80063b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063b8:	eba3 0901 	sub.w	r9, r3, r1
 80063bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063c0:	1c7b      	adds	r3, r7, #1
 80063c2:	444b      	add	r3, r9
 80063c4:	106d      	asrs	r5, r5, #1
 80063c6:	429d      	cmp	r5, r3
 80063c8:	bf38      	it	cc
 80063ca:	461d      	movcc	r5, r3
 80063cc:	0553      	lsls	r3, r2, #21
 80063ce:	d527      	bpl.n	8006420 <__ssputs_r+0x8c>
 80063d0:	4629      	mov	r1, r5
 80063d2:	f000 f95f 	bl	8006694 <_malloc_r>
 80063d6:	4606      	mov	r6, r0
 80063d8:	b360      	cbz	r0, 8006434 <__ssputs_r+0xa0>
 80063da:	6921      	ldr	r1, [r4, #16]
 80063dc:	464a      	mov	r2, r9
 80063de:	f000 fef1 	bl	80071c4 <memcpy>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ec:	81a3      	strh	r3, [r4, #12]
 80063ee:	6126      	str	r6, [r4, #16]
 80063f0:	6165      	str	r5, [r4, #20]
 80063f2:	444e      	add	r6, r9
 80063f4:	eba5 0509 	sub.w	r5, r5, r9
 80063f8:	6026      	str	r6, [r4, #0]
 80063fa:	60a5      	str	r5, [r4, #8]
 80063fc:	463e      	mov	r6, r7
 80063fe:	42be      	cmp	r6, r7
 8006400:	d900      	bls.n	8006404 <__ssputs_r+0x70>
 8006402:	463e      	mov	r6, r7
 8006404:	6820      	ldr	r0, [r4, #0]
 8006406:	4632      	mov	r2, r6
 8006408:	4641      	mov	r1, r8
 800640a:	f000 fe6b 	bl	80070e4 <memmove>
 800640e:	68a3      	ldr	r3, [r4, #8]
 8006410:	1b9b      	subs	r3, r3, r6
 8006412:	60a3      	str	r3, [r4, #8]
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	4433      	add	r3, r6
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	2000      	movs	r0, #0
 800641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006420:	462a      	mov	r2, r5
 8006422:	f000 fe30 	bl	8007086 <_realloc_r>
 8006426:	4606      	mov	r6, r0
 8006428:	2800      	cmp	r0, #0
 800642a:	d1e0      	bne.n	80063ee <__ssputs_r+0x5a>
 800642c:	6921      	ldr	r1, [r4, #16]
 800642e:	4650      	mov	r0, sl
 8006430:	f000 ff0a 	bl	8007248 <_free_r>
 8006434:	230c      	movs	r3, #12
 8006436:	f8ca 3000 	str.w	r3, [sl]
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006440:	81a3      	strh	r3, [r4, #12]
 8006442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006446:	e7e9      	b.n	800641c <__ssputs_r+0x88>

08006448 <_svfiprintf_r>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	4698      	mov	r8, r3
 800644e:	898b      	ldrh	r3, [r1, #12]
 8006450:	061b      	lsls	r3, r3, #24
 8006452:	b09d      	sub	sp, #116	; 0x74
 8006454:	4607      	mov	r7, r0
 8006456:	460d      	mov	r5, r1
 8006458:	4614      	mov	r4, r2
 800645a:	d50e      	bpl.n	800647a <_svfiprintf_r+0x32>
 800645c:	690b      	ldr	r3, [r1, #16]
 800645e:	b963      	cbnz	r3, 800647a <_svfiprintf_r+0x32>
 8006460:	2140      	movs	r1, #64	; 0x40
 8006462:	f000 f917 	bl	8006694 <_malloc_r>
 8006466:	6028      	str	r0, [r5, #0]
 8006468:	6128      	str	r0, [r5, #16]
 800646a:	b920      	cbnz	r0, 8006476 <_svfiprintf_r+0x2e>
 800646c:	230c      	movs	r3, #12
 800646e:	603b      	str	r3, [r7, #0]
 8006470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006474:	e0d0      	b.n	8006618 <_svfiprintf_r+0x1d0>
 8006476:	2340      	movs	r3, #64	; 0x40
 8006478:	616b      	str	r3, [r5, #20]
 800647a:	2300      	movs	r3, #0
 800647c:	9309      	str	r3, [sp, #36]	; 0x24
 800647e:	2320      	movs	r3, #32
 8006480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006484:	f8cd 800c 	str.w	r8, [sp, #12]
 8006488:	2330      	movs	r3, #48	; 0x30
 800648a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006630 <_svfiprintf_r+0x1e8>
 800648e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006492:	f04f 0901 	mov.w	r9, #1
 8006496:	4623      	mov	r3, r4
 8006498:	469a      	mov	sl, r3
 800649a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800649e:	b10a      	cbz	r2, 80064a4 <_svfiprintf_r+0x5c>
 80064a0:	2a25      	cmp	r2, #37	; 0x25
 80064a2:	d1f9      	bne.n	8006498 <_svfiprintf_r+0x50>
 80064a4:	ebba 0b04 	subs.w	fp, sl, r4
 80064a8:	d00b      	beq.n	80064c2 <_svfiprintf_r+0x7a>
 80064aa:	465b      	mov	r3, fp
 80064ac:	4622      	mov	r2, r4
 80064ae:	4629      	mov	r1, r5
 80064b0:	4638      	mov	r0, r7
 80064b2:	f7ff ff6f 	bl	8006394 <__ssputs_r>
 80064b6:	3001      	adds	r0, #1
 80064b8:	f000 80a9 	beq.w	800660e <_svfiprintf_r+0x1c6>
 80064bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064be:	445a      	add	r2, fp
 80064c0:	9209      	str	r2, [sp, #36]	; 0x24
 80064c2:	f89a 3000 	ldrb.w	r3, [sl]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80a1 	beq.w	800660e <_svfiprintf_r+0x1c6>
 80064cc:	2300      	movs	r3, #0
 80064ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064d6:	f10a 0a01 	add.w	sl, sl, #1
 80064da:	9304      	str	r3, [sp, #16]
 80064dc:	9307      	str	r3, [sp, #28]
 80064de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064e2:	931a      	str	r3, [sp, #104]	; 0x68
 80064e4:	4654      	mov	r4, sl
 80064e6:	2205      	movs	r2, #5
 80064e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064ec:	4850      	ldr	r0, [pc, #320]	; (8006630 <_svfiprintf_r+0x1e8>)
 80064ee:	f7f9 fe77 	bl	80001e0 <memchr>
 80064f2:	9a04      	ldr	r2, [sp, #16]
 80064f4:	b9d8      	cbnz	r0, 800652e <_svfiprintf_r+0xe6>
 80064f6:	06d0      	lsls	r0, r2, #27
 80064f8:	bf44      	itt	mi
 80064fa:	2320      	movmi	r3, #32
 80064fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006500:	0711      	lsls	r1, r2, #28
 8006502:	bf44      	itt	mi
 8006504:	232b      	movmi	r3, #43	; 0x2b
 8006506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800650a:	f89a 3000 	ldrb.w	r3, [sl]
 800650e:	2b2a      	cmp	r3, #42	; 0x2a
 8006510:	d015      	beq.n	800653e <_svfiprintf_r+0xf6>
 8006512:	9a07      	ldr	r2, [sp, #28]
 8006514:	4654      	mov	r4, sl
 8006516:	2000      	movs	r0, #0
 8006518:	f04f 0c0a 	mov.w	ip, #10
 800651c:	4621      	mov	r1, r4
 800651e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006522:	3b30      	subs	r3, #48	; 0x30
 8006524:	2b09      	cmp	r3, #9
 8006526:	d94d      	bls.n	80065c4 <_svfiprintf_r+0x17c>
 8006528:	b1b0      	cbz	r0, 8006558 <_svfiprintf_r+0x110>
 800652a:	9207      	str	r2, [sp, #28]
 800652c:	e014      	b.n	8006558 <_svfiprintf_r+0x110>
 800652e:	eba0 0308 	sub.w	r3, r0, r8
 8006532:	fa09 f303 	lsl.w	r3, r9, r3
 8006536:	4313      	orrs	r3, r2
 8006538:	9304      	str	r3, [sp, #16]
 800653a:	46a2      	mov	sl, r4
 800653c:	e7d2      	b.n	80064e4 <_svfiprintf_r+0x9c>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	1d19      	adds	r1, r3, #4
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	9103      	str	r1, [sp, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	bfbb      	ittet	lt
 800654a:	425b      	neglt	r3, r3
 800654c:	f042 0202 	orrlt.w	r2, r2, #2
 8006550:	9307      	strge	r3, [sp, #28]
 8006552:	9307      	strlt	r3, [sp, #28]
 8006554:	bfb8      	it	lt
 8006556:	9204      	strlt	r2, [sp, #16]
 8006558:	7823      	ldrb	r3, [r4, #0]
 800655a:	2b2e      	cmp	r3, #46	; 0x2e
 800655c:	d10c      	bne.n	8006578 <_svfiprintf_r+0x130>
 800655e:	7863      	ldrb	r3, [r4, #1]
 8006560:	2b2a      	cmp	r3, #42	; 0x2a
 8006562:	d134      	bne.n	80065ce <_svfiprintf_r+0x186>
 8006564:	9b03      	ldr	r3, [sp, #12]
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	9203      	str	r2, [sp, #12]
 800656c:	2b00      	cmp	r3, #0
 800656e:	bfb8      	it	lt
 8006570:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006574:	3402      	adds	r4, #2
 8006576:	9305      	str	r3, [sp, #20]
 8006578:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006640 <_svfiprintf_r+0x1f8>
 800657c:	7821      	ldrb	r1, [r4, #0]
 800657e:	2203      	movs	r2, #3
 8006580:	4650      	mov	r0, sl
 8006582:	f7f9 fe2d 	bl	80001e0 <memchr>
 8006586:	b138      	cbz	r0, 8006598 <_svfiprintf_r+0x150>
 8006588:	9b04      	ldr	r3, [sp, #16]
 800658a:	eba0 000a 	sub.w	r0, r0, sl
 800658e:	2240      	movs	r2, #64	; 0x40
 8006590:	4082      	lsls	r2, r0
 8006592:	4313      	orrs	r3, r2
 8006594:	3401      	adds	r4, #1
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800659c:	4825      	ldr	r0, [pc, #148]	; (8006634 <_svfiprintf_r+0x1ec>)
 800659e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065a2:	2206      	movs	r2, #6
 80065a4:	f7f9 fe1c 	bl	80001e0 <memchr>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d038      	beq.n	800661e <_svfiprintf_r+0x1d6>
 80065ac:	4b22      	ldr	r3, [pc, #136]	; (8006638 <_svfiprintf_r+0x1f0>)
 80065ae:	bb1b      	cbnz	r3, 80065f8 <_svfiprintf_r+0x1b0>
 80065b0:	9b03      	ldr	r3, [sp, #12]
 80065b2:	3307      	adds	r3, #7
 80065b4:	f023 0307 	bic.w	r3, r3, #7
 80065b8:	3308      	adds	r3, #8
 80065ba:	9303      	str	r3, [sp, #12]
 80065bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065be:	4433      	add	r3, r6
 80065c0:	9309      	str	r3, [sp, #36]	; 0x24
 80065c2:	e768      	b.n	8006496 <_svfiprintf_r+0x4e>
 80065c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065c8:	460c      	mov	r4, r1
 80065ca:	2001      	movs	r0, #1
 80065cc:	e7a6      	b.n	800651c <_svfiprintf_r+0xd4>
 80065ce:	2300      	movs	r3, #0
 80065d0:	3401      	adds	r4, #1
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	4619      	mov	r1, r3
 80065d6:	f04f 0c0a 	mov.w	ip, #10
 80065da:	4620      	mov	r0, r4
 80065dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065e0:	3a30      	subs	r2, #48	; 0x30
 80065e2:	2a09      	cmp	r2, #9
 80065e4:	d903      	bls.n	80065ee <_svfiprintf_r+0x1a6>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0c6      	beq.n	8006578 <_svfiprintf_r+0x130>
 80065ea:	9105      	str	r1, [sp, #20]
 80065ec:	e7c4      	b.n	8006578 <_svfiprintf_r+0x130>
 80065ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80065f2:	4604      	mov	r4, r0
 80065f4:	2301      	movs	r3, #1
 80065f6:	e7f0      	b.n	80065da <_svfiprintf_r+0x192>
 80065f8:	ab03      	add	r3, sp, #12
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	462a      	mov	r2, r5
 80065fe:	4b0f      	ldr	r3, [pc, #60]	; (800663c <_svfiprintf_r+0x1f4>)
 8006600:	a904      	add	r1, sp, #16
 8006602:	4638      	mov	r0, r7
 8006604:	f7fe fade 	bl	8004bc4 <_printf_float>
 8006608:	1c42      	adds	r2, r0, #1
 800660a:	4606      	mov	r6, r0
 800660c:	d1d6      	bne.n	80065bc <_svfiprintf_r+0x174>
 800660e:	89ab      	ldrh	r3, [r5, #12]
 8006610:	065b      	lsls	r3, r3, #25
 8006612:	f53f af2d 	bmi.w	8006470 <_svfiprintf_r+0x28>
 8006616:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006618:	b01d      	add	sp, #116	; 0x74
 800661a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661e:	ab03      	add	r3, sp, #12
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	462a      	mov	r2, r5
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <_svfiprintf_r+0x1f4>)
 8006626:	a904      	add	r1, sp, #16
 8006628:	4638      	mov	r0, r7
 800662a:	f7fe fd6f 	bl	800510c <_printf_i>
 800662e:	e7eb      	b.n	8006608 <_svfiprintf_r+0x1c0>
 8006630:	080089b2 	.word	0x080089b2
 8006634:	080089bc 	.word	0x080089bc
 8006638:	08004bc5 	.word	0x08004bc5
 800663c:	08006395 	.word	0x08006395
 8006640:	080089b8 	.word	0x080089b8

08006644 <malloc>:
 8006644:	4b02      	ldr	r3, [pc, #8]	; (8006650 <malloc+0xc>)
 8006646:	4601      	mov	r1, r0
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	f000 b823 	b.w	8006694 <_malloc_r>
 800664e:	bf00      	nop
 8006650:	2000006c 	.word	0x2000006c

08006654 <sbrk_aligned>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	4e0e      	ldr	r6, [pc, #56]	; (8006690 <sbrk_aligned+0x3c>)
 8006658:	460c      	mov	r4, r1
 800665a:	6831      	ldr	r1, [r6, #0]
 800665c:	4605      	mov	r5, r0
 800665e:	b911      	cbnz	r1, 8006666 <sbrk_aligned+0x12>
 8006660:	f000 fd8e 	bl	8007180 <_sbrk_r>
 8006664:	6030      	str	r0, [r6, #0]
 8006666:	4621      	mov	r1, r4
 8006668:	4628      	mov	r0, r5
 800666a:	f000 fd89 	bl	8007180 <_sbrk_r>
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	d00a      	beq.n	8006688 <sbrk_aligned+0x34>
 8006672:	1cc4      	adds	r4, r0, #3
 8006674:	f024 0403 	bic.w	r4, r4, #3
 8006678:	42a0      	cmp	r0, r4
 800667a:	d007      	beq.n	800668c <sbrk_aligned+0x38>
 800667c:	1a21      	subs	r1, r4, r0
 800667e:	4628      	mov	r0, r5
 8006680:	f000 fd7e 	bl	8007180 <_sbrk_r>
 8006684:	3001      	adds	r0, #1
 8006686:	d101      	bne.n	800668c <sbrk_aligned+0x38>
 8006688:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800668c:	4620      	mov	r0, r4
 800668e:	bd70      	pop	{r4, r5, r6, pc}
 8006690:	20000924 	.word	0x20000924

08006694 <_malloc_r>:
 8006694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006698:	1ccd      	adds	r5, r1, #3
 800669a:	f025 0503 	bic.w	r5, r5, #3
 800669e:	3508      	adds	r5, #8
 80066a0:	2d0c      	cmp	r5, #12
 80066a2:	bf38      	it	cc
 80066a4:	250c      	movcc	r5, #12
 80066a6:	2d00      	cmp	r5, #0
 80066a8:	4607      	mov	r7, r0
 80066aa:	db01      	blt.n	80066b0 <_malloc_r+0x1c>
 80066ac:	42a9      	cmp	r1, r5
 80066ae:	d905      	bls.n	80066bc <_malloc_r+0x28>
 80066b0:	230c      	movs	r3, #12
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	2600      	movs	r6, #0
 80066b6:	4630      	mov	r0, r6
 80066b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006790 <_malloc_r+0xfc>
 80066c0:	f000 f916 	bl	80068f0 <__malloc_lock>
 80066c4:	f8d8 3000 	ldr.w	r3, [r8]
 80066c8:	461c      	mov	r4, r3
 80066ca:	bb5c      	cbnz	r4, 8006724 <_malloc_r+0x90>
 80066cc:	4629      	mov	r1, r5
 80066ce:	4638      	mov	r0, r7
 80066d0:	f7ff ffc0 	bl	8006654 <sbrk_aligned>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	4604      	mov	r4, r0
 80066d8:	d155      	bne.n	8006786 <_malloc_r+0xf2>
 80066da:	f8d8 4000 	ldr.w	r4, [r8]
 80066de:	4626      	mov	r6, r4
 80066e0:	2e00      	cmp	r6, #0
 80066e2:	d145      	bne.n	8006770 <_malloc_r+0xdc>
 80066e4:	2c00      	cmp	r4, #0
 80066e6:	d048      	beq.n	800677a <_malloc_r+0xe6>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	4631      	mov	r1, r6
 80066ec:	4638      	mov	r0, r7
 80066ee:	eb04 0903 	add.w	r9, r4, r3
 80066f2:	f000 fd45 	bl	8007180 <_sbrk_r>
 80066f6:	4581      	cmp	r9, r0
 80066f8:	d13f      	bne.n	800677a <_malloc_r+0xe6>
 80066fa:	6821      	ldr	r1, [r4, #0]
 80066fc:	1a6d      	subs	r5, r5, r1
 80066fe:	4629      	mov	r1, r5
 8006700:	4638      	mov	r0, r7
 8006702:	f7ff ffa7 	bl	8006654 <sbrk_aligned>
 8006706:	3001      	adds	r0, #1
 8006708:	d037      	beq.n	800677a <_malloc_r+0xe6>
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	442b      	add	r3, r5
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	f8d8 3000 	ldr.w	r3, [r8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d038      	beq.n	800678a <_malloc_r+0xf6>
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	42a2      	cmp	r2, r4
 800671c:	d12b      	bne.n	8006776 <_malloc_r+0xe2>
 800671e:	2200      	movs	r2, #0
 8006720:	605a      	str	r2, [r3, #4]
 8006722:	e00f      	b.n	8006744 <_malloc_r+0xb0>
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	1b52      	subs	r2, r2, r5
 8006728:	d41f      	bmi.n	800676a <_malloc_r+0xd6>
 800672a:	2a0b      	cmp	r2, #11
 800672c:	d917      	bls.n	800675e <_malloc_r+0xca>
 800672e:	1961      	adds	r1, r4, r5
 8006730:	42a3      	cmp	r3, r4
 8006732:	6025      	str	r5, [r4, #0]
 8006734:	bf18      	it	ne
 8006736:	6059      	strne	r1, [r3, #4]
 8006738:	6863      	ldr	r3, [r4, #4]
 800673a:	bf08      	it	eq
 800673c:	f8c8 1000 	streq.w	r1, [r8]
 8006740:	5162      	str	r2, [r4, r5]
 8006742:	604b      	str	r3, [r1, #4]
 8006744:	4638      	mov	r0, r7
 8006746:	f104 060b 	add.w	r6, r4, #11
 800674a:	f000 f8d7 	bl	80068fc <__malloc_unlock>
 800674e:	f026 0607 	bic.w	r6, r6, #7
 8006752:	1d23      	adds	r3, r4, #4
 8006754:	1af2      	subs	r2, r6, r3
 8006756:	d0ae      	beq.n	80066b6 <_malloc_r+0x22>
 8006758:	1b9b      	subs	r3, r3, r6
 800675a:	50a3      	str	r3, [r4, r2]
 800675c:	e7ab      	b.n	80066b6 <_malloc_r+0x22>
 800675e:	42a3      	cmp	r3, r4
 8006760:	6862      	ldr	r2, [r4, #4]
 8006762:	d1dd      	bne.n	8006720 <_malloc_r+0x8c>
 8006764:	f8c8 2000 	str.w	r2, [r8]
 8006768:	e7ec      	b.n	8006744 <_malloc_r+0xb0>
 800676a:	4623      	mov	r3, r4
 800676c:	6864      	ldr	r4, [r4, #4]
 800676e:	e7ac      	b.n	80066ca <_malloc_r+0x36>
 8006770:	4634      	mov	r4, r6
 8006772:	6876      	ldr	r6, [r6, #4]
 8006774:	e7b4      	b.n	80066e0 <_malloc_r+0x4c>
 8006776:	4613      	mov	r3, r2
 8006778:	e7cc      	b.n	8006714 <_malloc_r+0x80>
 800677a:	230c      	movs	r3, #12
 800677c:	603b      	str	r3, [r7, #0]
 800677e:	4638      	mov	r0, r7
 8006780:	f000 f8bc 	bl	80068fc <__malloc_unlock>
 8006784:	e797      	b.n	80066b6 <_malloc_r+0x22>
 8006786:	6025      	str	r5, [r4, #0]
 8006788:	e7dc      	b.n	8006744 <_malloc_r+0xb0>
 800678a:	605b      	str	r3, [r3, #4]
 800678c:	deff      	udf	#255	; 0xff
 800678e:	bf00      	nop
 8006790:	20000920 	.word	0x20000920

08006794 <__sflush_r>:
 8006794:	898a      	ldrh	r2, [r1, #12]
 8006796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800679a:	4605      	mov	r5, r0
 800679c:	0710      	lsls	r0, r2, #28
 800679e:	460c      	mov	r4, r1
 80067a0:	d458      	bmi.n	8006854 <__sflush_r+0xc0>
 80067a2:	684b      	ldr	r3, [r1, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	dc05      	bgt.n	80067b4 <__sflush_r+0x20>
 80067a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	dc02      	bgt.n	80067b4 <__sflush_r+0x20>
 80067ae:	2000      	movs	r0, #0
 80067b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067b6:	2e00      	cmp	r6, #0
 80067b8:	d0f9      	beq.n	80067ae <__sflush_r+0x1a>
 80067ba:	2300      	movs	r3, #0
 80067bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067c0:	682f      	ldr	r7, [r5, #0]
 80067c2:	6a21      	ldr	r1, [r4, #32]
 80067c4:	602b      	str	r3, [r5, #0]
 80067c6:	d032      	beq.n	800682e <__sflush_r+0x9a>
 80067c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	075a      	lsls	r2, r3, #29
 80067ce:	d505      	bpl.n	80067dc <__sflush_r+0x48>
 80067d0:	6863      	ldr	r3, [r4, #4]
 80067d2:	1ac0      	subs	r0, r0, r3
 80067d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067d6:	b10b      	cbz	r3, 80067dc <__sflush_r+0x48>
 80067d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067da:	1ac0      	subs	r0, r0, r3
 80067dc:	2300      	movs	r3, #0
 80067de:	4602      	mov	r2, r0
 80067e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067e2:	6a21      	ldr	r1, [r4, #32]
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b0      	blx	r6
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	d106      	bne.n	80067fc <__sflush_r+0x68>
 80067ee:	6829      	ldr	r1, [r5, #0]
 80067f0:	291d      	cmp	r1, #29
 80067f2:	d82b      	bhi.n	800684c <__sflush_r+0xb8>
 80067f4:	4a29      	ldr	r2, [pc, #164]	; (800689c <__sflush_r+0x108>)
 80067f6:	410a      	asrs	r2, r1
 80067f8:	07d6      	lsls	r6, r2, #31
 80067fa:	d427      	bmi.n	800684c <__sflush_r+0xb8>
 80067fc:	2200      	movs	r2, #0
 80067fe:	6062      	str	r2, [r4, #4]
 8006800:	04d9      	lsls	r1, r3, #19
 8006802:	6922      	ldr	r2, [r4, #16]
 8006804:	6022      	str	r2, [r4, #0]
 8006806:	d504      	bpl.n	8006812 <__sflush_r+0x7e>
 8006808:	1c42      	adds	r2, r0, #1
 800680a:	d101      	bne.n	8006810 <__sflush_r+0x7c>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	b903      	cbnz	r3, 8006812 <__sflush_r+0x7e>
 8006810:	6560      	str	r0, [r4, #84]	; 0x54
 8006812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006814:	602f      	str	r7, [r5, #0]
 8006816:	2900      	cmp	r1, #0
 8006818:	d0c9      	beq.n	80067ae <__sflush_r+0x1a>
 800681a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800681e:	4299      	cmp	r1, r3
 8006820:	d002      	beq.n	8006828 <__sflush_r+0x94>
 8006822:	4628      	mov	r0, r5
 8006824:	f000 fd10 	bl	8007248 <_free_r>
 8006828:	2000      	movs	r0, #0
 800682a:	6360      	str	r0, [r4, #52]	; 0x34
 800682c:	e7c0      	b.n	80067b0 <__sflush_r+0x1c>
 800682e:	2301      	movs	r3, #1
 8006830:	4628      	mov	r0, r5
 8006832:	47b0      	blx	r6
 8006834:	1c41      	adds	r1, r0, #1
 8006836:	d1c8      	bne.n	80067ca <__sflush_r+0x36>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0c5      	beq.n	80067ca <__sflush_r+0x36>
 800683e:	2b1d      	cmp	r3, #29
 8006840:	d001      	beq.n	8006846 <__sflush_r+0xb2>
 8006842:	2b16      	cmp	r3, #22
 8006844:	d101      	bne.n	800684a <__sflush_r+0xb6>
 8006846:	602f      	str	r7, [r5, #0]
 8006848:	e7b1      	b.n	80067ae <__sflush_r+0x1a>
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	e7ad      	b.n	80067b0 <__sflush_r+0x1c>
 8006854:	690f      	ldr	r7, [r1, #16]
 8006856:	2f00      	cmp	r7, #0
 8006858:	d0a9      	beq.n	80067ae <__sflush_r+0x1a>
 800685a:	0793      	lsls	r3, r2, #30
 800685c:	680e      	ldr	r6, [r1, #0]
 800685e:	bf08      	it	eq
 8006860:	694b      	ldreq	r3, [r1, #20]
 8006862:	600f      	str	r7, [r1, #0]
 8006864:	bf18      	it	ne
 8006866:	2300      	movne	r3, #0
 8006868:	eba6 0807 	sub.w	r8, r6, r7
 800686c:	608b      	str	r3, [r1, #8]
 800686e:	f1b8 0f00 	cmp.w	r8, #0
 8006872:	dd9c      	ble.n	80067ae <__sflush_r+0x1a>
 8006874:	6a21      	ldr	r1, [r4, #32]
 8006876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006878:	4643      	mov	r3, r8
 800687a:	463a      	mov	r2, r7
 800687c:	4628      	mov	r0, r5
 800687e:	47b0      	blx	r6
 8006880:	2800      	cmp	r0, #0
 8006882:	dc06      	bgt.n	8006892 <__sflush_r+0xfe>
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800688a:	81a3      	strh	r3, [r4, #12]
 800688c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006890:	e78e      	b.n	80067b0 <__sflush_r+0x1c>
 8006892:	4407      	add	r7, r0
 8006894:	eba8 0800 	sub.w	r8, r8, r0
 8006898:	e7e9      	b.n	800686e <__sflush_r+0xda>
 800689a:	bf00      	nop
 800689c:	dfbffffe 	.word	0xdfbffffe

080068a0 <_fflush_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	690b      	ldr	r3, [r1, #16]
 80068a4:	4605      	mov	r5, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	b913      	cbnz	r3, 80068b0 <_fflush_r+0x10>
 80068aa:	2500      	movs	r5, #0
 80068ac:	4628      	mov	r0, r5
 80068ae:	bd38      	pop	{r3, r4, r5, pc}
 80068b0:	b118      	cbz	r0, 80068ba <_fflush_r+0x1a>
 80068b2:	6a03      	ldr	r3, [r0, #32]
 80068b4:	b90b      	cbnz	r3, 80068ba <_fflush_r+0x1a>
 80068b6:	f7fe fdf7 	bl	80054a8 <__sinit>
 80068ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f3      	beq.n	80068aa <_fflush_r+0xa>
 80068c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068c4:	07d0      	lsls	r0, r2, #31
 80068c6:	d404      	bmi.n	80068d2 <_fflush_r+0x32>
 80068c8:	0599      	lsls	r1, r3, #22
 80068ca:	d402      	bmi.n	80068d2 <_fflush_r+0x32>
 80068cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ce:	f7fe fee4 	bl	800569a <__retarget_lock_acquire_recursive>
 80068d2:	4628      	mov	r0, r5
 80068d4:	4621      	mov	r1, r4
 80068d6:	f7ff ff5d 	bl	8006794 <__sflush_r>
 80068da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068dc:	07da      	lsls	r2, r3, #31
 80068de:	4605      	mov	r5, r0
 80068e0:	d4e4      	bmi.n	80068ac <_fflush_r+0xc>
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	059b      	lsls	r3, r3, #22
 80068e6:	d4e1      	bmi.n	80068ac <_fflush_r+0xc>
 80068e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ea:	f7fe fed7 	bl	800569c <__retarget_lock_release_recursive>
 80068ee:	e7dd      	b.n	80068ac <_fflush_r+0xc>

080068f0 <__malloc_lock>:
 80068f0:	4801      	ldr	r0, [pc, #4]	; (80068f8 <__malloc_lock+0x8>)
 80068f2:	f7fe bed2 	b.w	800569a <__retarget_lock_acquire_recursive>
 80068f6:	bf00      	nop
 80068f8:	2000091c 	.word	0x2000091c

080068fc <__malloc_unlock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__malloc_unlock+0x8>)
 80068fe:	f7fe becd 	b.w	800569c <__retarget_lock_release_recursive>
 8006902:	bf00      	nop
 8006904:	2000091c 	.word	0x2000091c

08006908 <_Balloc>:
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	69c6      	ldr	r6, [r0, #28]
 800690c:	4604      	mov	r4, r0
 800690e:	460d      	mov	r5, r1
 8006910:	b976      	cbnz	r6, 8006930 <_Balloc+0x28>
 8006912:	2010      	movs	r0, #16
 8006914:	f7ff fe96 	bl	8006644 <malloc>
 8006918:	4602      	mov	r2, r0
 800691a:	61e0      	str	r0, [r4, #28]
 800691c:	b920      	cbnz	r0, 8006928 <_Balloc+0x20>
 800691e:	4b18      	ldr	r3, [pc, #96]	; (8006980 <_Balloc+0x78>)
 8006920:	4818      	ldr	r0, [pc, #96]	; (8006984 <_Balloc+0x7c>)
 8006922:	216b      	movs	r1, #107	; 0x6b
 8006924:	f000 fc5c 	bl	80071e0 <__assert_func>
 8006928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800692c:	6006      	str	r6, [r0, #0]
 800692e:	60c6      	str	r6, [r0, #12]
 8006930:	69e6      	ldr	r6, [r4, #28]
 8006932:	68f3      	ldr	r3, [r6, #12]
 8006934:	b183      	cbz	r3, 8006958 <_Balloc+0x50>
 8006936:	69e3      	ldr	r3, [r4, #28]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800693e:	b9b8      	cbnz	r0, 8006970 <_Balloc+0x68>
 8006940:	2101      	movs	r1, #1
 8006942:	fa01 f605 	lsl.w	r6, r1, r5
 8006946:	1d72      	adds	r2, r6, #5
 8006948:	0092      	lsls	r2, r2, #2
 800694a:	4620      	mov	r0, r4
 800694c:	f000 fc66 	bl	800721c <_calloc_r>
 8006950:	b160      	cbz	r0, 800696c <_Balloc+0x64>
 8006952:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006956:	e00e      	b.n	8006976 <_Balloc+0x6e>
 8006958:	2221      	movs	r2, #33	; 0x21
 800695a:	2104      	movs	r1, #4
 800695c:	4620      	mov	r0, r4
 800695e:	f000 fc5d 	bl	800721c <_calloc_r>
 8006962:	69e3      	ldr	r3, [r4, #28]
 8006964:	60f0      	str	r0, [r6, #12]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e4      	bne.n	8006936 <_Balloc+0x2e>
 800696c:	2000      	movs	r0, #0
 800696e:	bd70      	pop	{r4, r5, r6, pc}
 8006970:	6802      	ldr	r2, [r0, #0]
 8006972:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006976:	2300      	movs	r3, #0
 8006978:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800697c:	e7f7      	b.n	800696e <_Balloc+0x66>
 800697e:	bf00      	nop
 8006980:	08008932 	.word	0x08008932
 8006984:	080089c3 	.word	0x080089c3

08006988 <_Bfree>:
 8006988:	b570      	push	{r4, r5, r6, lr}
 800698a:	69c6      	ldr	r6, [r0, #28]
 800698c:	4605      	mov	r5, r0
 800698e:	460c      	mov	r4, r1
 8006990:	b976      	cbnz	r6, 80069b0 <_Bfree+0x28>
 8006992:	2010      	movs	r0, #16
 8006994:	f7ff fe56 	bl	8006644 <malloc>
 8006998:	4602      	mov	r2, r0
 800699a:	61e8      	str	r0, [r5, #28]
 800699c:	b920      	cbnz	r0, 80069a8 <_Bfree+0x20>
 800699e:	4b09      	ldr	r3, [pc, #36]	; (80069c4 <_Bfree+0x3c>)
 80069a0:	4809      	ldr	r0, [pc, #36]	; (80069c8 <_Bfree+0x40>)
 80069a2:	218f      	movs	r1, #143	; 0x8f
 80069a4:	f000 fc1c 	bl	80071e0 <__assert_func>
 80069a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069ac:	6006      	str	r6, [r0, #0]
 80069ae:	60c6      	str	r6, [r0, #12]
 80069b0:	b13c      	cbz	r4, 80069c2 <_Bfree+0x3a>
 80069b2:	69eb      	ldr	r3, [r5, #28]
 80069b4:	6862      	ldr	r2, [r4, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069bc:	6021      	str	r1, [r4, #0]
 80069be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
 80069c4:	08008932 	.word	0x08008932
 80069c8:	080089c3 	.word	0x080089c3

080069cc <__multadd>:
 80069cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d0:	690d      	ldr	r5, [r1, #16]
 80069d2:	4607      	mov	r7, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	461e      	mov	r6, r3
 80069d8:	f101 0c14 	add.w	ip, r1, #20
 80069dc:	2000      	movs	r0, #0
 80069de:	f8dc 3000 	ldr.w	r3, [ip]
 80069e2:	b299      	uxth	r1, r3
 80069e4:	fb02 6101 	mla	r1, r2, r1, r6
 80069e8:	0c1e      	lsrs	r6, r3, #16
 80069ea:	0c0b      	lsrs	r3, r1, #16
 80069ec:	fb02 3306 	mla	r3, r2, r6, r3
 80069f0:	b289      	uxth	r1, r1
 80069f2:	3001      	adds	r0, #1
 80069f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069f8:	4285      	cmp	r5, r0
 80069fa:	f84c 1b04 	str.w	r1, [ip], #4
 80069fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006a02:	dcec      	bgt.n	80069de <__multadd+0x12>
 8006a04:	b30e      	cbz	r6, 8006a4a <__multadd+0x7e>
 8006a06:	68a3      	ldr	r3, [r4, #8]
 8006a08:	42ab      	cmp	r3, r5
 8006a0a:	dc19      	bgt.n	8006a40 <__multadd+0x74>
 8006a0c:	6861      	ldr	r1, [r4, #4]
 8006a0e:	4638      	mov	r0, r7
 8006a10:	3101      	adds	r1, #1
 8006a12:	f7ff ff79 	bl	8006908 <_Balloc>
 8006a16:	4680      	mov	r8, r0
 8006a18:	b928      	cbnz	r0, 8006a26 <__multadd+0x5a>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <__multadd+0x84>)
 8006a1e:	480d      	ldr	r0, [pc, #52]	; (8006a54 <__multadd+0x88>)
 8006a20:	21ba      	movs	r1, #186	; 0xba
 8006a22:	f000 fbdd 	bl	80071e0 <__assert_func>
 8006a26:	6922      	ldr	r2, [r4, #16]
 8006a28:	3202      	adds	r2, #2
 8006a2a:	f104 010c 	add.w	r1, r4, #12
 8006a2e:	0092      	lsls	r2, r2, #2
 8006a30:	300c      	adds	r0, #12
 8006a32:	f000 fbc7 	bl	80071c4 <memcpy>
 8006a36:	4621      	mov	r1, r4
 8006a38:	4638      	mov	r0, r7
 8006a3a:	f7ff ffa5 	bl	8006988 <_Bfree>
 8006a3e:	4644      	mov	r4, r8
 8006a40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a44:	3501      	adds	r5, #1
 8006a46:	615e      	str	r6, [r3, #20]
 8006a48:	6125      	str	r5, [r4, #16]
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a50:	080089a1 	.word	0x080089a1
 8006a54:	080089c3 	.word	0x080089c3

08006a58 <__hi0bits>:
 8006a58:	0c03      	lsrs	r3, r0, #16
 8006a5a:	041b      	lsls	r3, r3, #16
 8006a5c:	b9d3      	cbnz	r3, 8006a94 <__hi0bits+0x3c>
 8006a5e:	0400      	lsls	r0, r0, #16
 8006a60:	2310      	movs	r3, #16
 8006a62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a66:	bf04      	itt	eq
 8006a68:	0200      	lsleq	r0, r0, #8
 8006a6a:	3308      	addeq	r3, #8
 8006a6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a70:	bf04      	itt	eq
 8006a72:	0100      	lsleq	r0, r0, #4
 8006a74:	3304      	addeq	r3, #4
 8006a76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a7a:	bf04      	itt	eq
 8006a7c:	0080      	lsleq	r0, r0, #2
 8006a7e:	3302      	addeq	r3, #2
 8006a80:	2800      	cmp	r0, #0
 8006a82:	db05      	blt.n	8006a90 <__hi0bits+0x38>
 8006a84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a88:	f103 0301 	add.w	r3, r3, #1
 8006a8c:	bf08      	it	eq
 8006a8e:	2320      	moveq	r3, #32
 8006a90:	4618      	mov	r0, r3
 8006a92:	4770      	bx	lr
 8006a94:	2300      	movs	r3, #0
 8006a96:	e7e4      	b.n	8006a62 <__hi0bits+0xa>

08006a98 <__lo0bits>:
 8006a98:	6803      	ldr	r3, [r0, #0]
 8006a9a:	f013 0207 	ands.w	r2, r3, #7
 8006a9e:	d00c      	beq.n	8006aba <__lo0bits+0x22>
 8006aa0:	07d9      	lsls	r1, r3, #31
 8006aa2:	d422      	bmi.n	8006aea <__lo0bits+0x52>
 8006aa4:	079a      	lsls	r2, r3, #30
 8006aa6:	bf49      	itett	mi
 8006aa8:	085b      	lsrmi	r3, r3, #1
 8006aaa:	089b      	lsrpl	r3, r3, #2
 8006aac:	6003      	strmi	r3, [r0, #0]
 8006aae:	2201      	movmi	r2, #1
 8006ab0:	bf5c      	itt	pl
 8006ab2:	6003      	strpl	r3, [r0, #0]
 8006ab4:	2202      	movpl	r2, #2
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	4770      	bx	lr
 8006aba:	b299      	uxth	r1, r3
 8006abc:	b909      	cbnz	r1, 8006ac2 <__lo0bits+0x2a>
 8006abe:	0c1b      	lsrs	r3, r3, #16
 8006ac0:	2210      	movs	r2, #16
 8006ac2:	b2d9      	uxtb	r1, r3
 8006ac4:	b909      	cbnz	r1, 8006aca <__lo0bits+0x32>
 8006ac6:	3208      	adds	r2, #8
 8006ac8:	0a1b      	lsrs	r3, r3, #8
 8006aca:	0719      	lsls	r1, r3, #28
 8006acc:	bf04      	itt	eq
 8006ace:	091b      	lsreq	r3, r3, #4
 8006ad0:	3204      	addeq	r2, #4
 8006ad2:	0799      	lsls	r1, r3, #30
 8006ad4:	bf04      	itt	eq
 8006ad6:	089b      	lsreq	r3, r3, #2
 8006ad8:	3202      	addeq	r2, #2
 8006ada:	07d9      	lsls	r1, r3, #31
 8006adc:	d403      	bmi.n	8006ae6 <__lo0bits+0x4e>
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	f102 0201 	add.w	r2, r2, #1
 8006ae4:	d003      	beq.n	8006aee <__lo0bits+0x56>
 8006ae6:	6003      	str	r3, [r0, #0]
 8006ae8:	e7e5      	b.n	8006ab6 <__lo0bits+0x1e>
 8006aea:	2200      	movs	r2, #0
 8006aec:	e7e3      	b.n	8006ab6 <__lo0bits+0x1e>
 8006aee:	2220      	movs	r2, #32
 8006af0:	e7e1      	b.n	8006ab6 <__lo0bits+0x1e>
	...

08006af4 <__i2b>:
 8006af4:	b510      	push	{r4, lr}
 8006af6:	460c      	mov	r4, r1
 8006af8:	2101      	movs	r1, #1
 8006afa:	f7ff ff05 	bl	8006908 <_Balloc>
 8006afe:	4602      	mov	r2, r0
 8006b00:	b928      	cbnz	r0, 8006b0e <__i2b+0x1a>
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <__i2b+0x24>)
 8006b04:	4805      	ldr	r0, [pc, #20]	; (8006b1c <__i2b+0x28>)
 8006b06:	f240 1145 	movw	r1, #325	; 0x145
 8006b0a:	f000 fb69 	bl	80071e0 <__assert_func>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	6144      	str	r4, [r0, #20]
 8006b12:	6103      	str	r3, [r0, #16]
 8006b14:	bd10      	pop	{r4, pc}
 8006b16:	bf00      	nop
 8006b18:	080089a1 	.word	0x080089a1
 8006b1c:	080089c3 	.word	0x080089c3

08006b20 <__multiply>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	4691      	mov	r9, r2
 8006b26:	690a      	ldr	r2, [r1, #16]
 8006b28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	bfb8      	it	lt
 8006b30:	460b      	movlt	r3, r1
 8006b32:	460c      	mov	r4, r1
 8006b34:	bfbc      	itt	lt
 8006b36:	464c      	movlt	r4, r9
 8006b38:	4699      	movlt	r9, r3
 8006b3a:	6927      	ldr	r7, [r4, #16]
 8006b3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b40:	68a3      	ldr	r3, [r4, #8]
 8006b42:	6861      	ldr	r1, [r4, #4]
 8006b44:	eb07 060a 	add.w	r6, r7, sl
 8006b48:	42b3      	cmp	r3, r6
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	bfb8      	it	lt
 8006b4e:	3101      	addlt	r1, #1
 8006b50:	f7ff feda 	bl	8006908 <_Balloc>
 8006b54:	b930      	cbnz	r0, 8006b64 <__multiply+0x44>
 8006b56:	4602      	mov	r2, r0
 8006b58:	4b44      	ldr	r3, [pc, #272]	; (8006c6c <__multiply+0x14c>)
 8006b5a:	4845      	ldr	r0, [pc, #276]	; (8006c70 <__multiply+0x150>)
 8006b5c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006b60:	f000 fb3e 	bl	80071e0 <__assert_func>
 8006b64:	f100 0514 	add.w	r5, r0, #20
 8006b68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b6c:	462b      	mov	r3, r5
 8006b6e:	2200      	movs	r2, #0
 8006b70:	4543      	cmp	r3, r8
 8006b72:	d321      	bcc.n	8006bb8 <__multiply+0x98>
 8006b74:	f104 0314 	add.w	r3, r4, #20
 8006b78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b7c:	f109 0314 	add.w	r3, r9, #20
 8006b80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b84:	9202      	str	r2, [sp, #8]
 8006b86:	1b3a      	subs	r2, r7, r4
 8006b88:	3a15      	subs	r2, #21
 8006b8a:	f022 0203 	bic.w	r2, r2, #3
 8006b8e:	3204      	adds	r2, #4
 8006b90:	f104 0115 	add.w	r1, r4, #21
 8006b94:	428f      	cmp	r7, r1
 8006b96:	bf38      	it	cc
 8006b98:	2204      	movcc	r2, #4
 8006b9a:	9201      	str	r2, [sp, #4]
 8006b9c:	9a02      	ldr	r2, [sp, #8]
 8006b9e:	9303      	str	r3, [sp, #12]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d80c      	bhi.n	8006bbe <__multiply+0x9e>
 8006ba4:	2e00      	cmp	r6, #0
 8006ba6:	dd03      	ble.n	8006bb0 <__multiply+0x90>
 8006ba8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d05b      	beq.n	8006c68 <__multiply+0x148>
 8006bb0:	6106      	str	r6, [r0, #16]
 8006bb2:	b005      	add	sp, #20
 8006bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb8:	f843 2b04 	str.w	r2, [r3], #4
 8006bbc:	e7d8      	b.n	8006b70 <__multiply+0x50>
 8006bbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bc2:	f1ba 0f00 	cmp.w	sl, #0
 8006bc6:	d024      	beq.n	8006c12 <__multiply+0xf2>
 8006bc8:	f104 0e14 	add.w	lr, r4, #20
 8006bcc:	46a9      	mov	r9, r5
 8006bce:	f04f 0c00 	mov.w	ip, #0
 8006bd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bd6:	f8d9 1000 	ldr.w	r1, [r9]
 8006bda:	fa1f fb82 	uxth.w	fp, r2
 8006bde:	b289      	uxth	r1, r1
 8006be0:	fb0a 110b 	mla	r1, sl, fp, r1
 8006be4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006be8:	f8d9 2000 	ldr.w	r2, [r9]
 8006bec:	4461      	add	r1, ip
 8006bee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bf2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006bf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006bfa:	b289      	uxth	r1, r1
 8006bfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c00:	4577      	cmp	r7, lr
 8006c02:	f849 1b04 	str.w	r1, [r9], #4
 8006c06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c0a:	d8e2      	bhi.n	8006bd2 <__multiply+0xb2>
 8006c0c:	9a01      	ldr	r2, [sp, #4]
 8006c0e:	f845 c002 	str.w	ip, [r5, r2]
 8006c12:	9a03      	ldr	r2, [sp, #12]
 8006c14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	f1b9 0f00 	cmp.w	r9, #0
 8006c1e:	d021      	beq.n	8006c64 <__multiply+0x144>
 8006c20:	6829      	ldr	r1, [r5, #0]
 8006c22:	f104 0c14 	add.w	ip, r4, #20
 8006c26:	46ae      	mov	lr, r5
 8006c28:	f04f 0a00 	mov.w	sl, #0
 8006c2c:	f8bc b000 	ldrh.w	fp, [ip]
 8006c30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c34:	fb09 220b 	mla	r2, r9, fp, r2
 8006c38:	4452      	add	r2, sl
 8006c3a:	b289      	uxth	r1, r1
 8006c3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c40:	f84e 1b04 	str.w	r1, [lr], #4
 8006c44:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c4c:	f8be 1000 	ldrh.w	r1, [lr]
 8006c50:	fb09 110a 	mla	r1, r9, sl, r1
 8006c54:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006c58:	4567      	cmp	r7, ip
 8006c5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c5e:	d8e5      	bhi.n	8006c2c <__multiply+0x10c>
 8006c60:	9a01      	ldr	r2, [sp, #4]
 8006c62:	50a9      	str	r1, [r5, r2]
 8006c64:	3504      	adds	r5, #4
 8006c66:	e799      	b.n	8006b9c <__multiply+0x7c>
 8006c68:	3e01      	subs	r6, #1
 8006c6a:	e79b      	b.n	8006ba4 <__multiply+0x84>
 8006c6c:	080089a1 	.word	0x080089a1
 8006c70:	080089c3 	.word	0x080089c3

08006c74 <__pow5mult>:
 8006c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c78:	4615      	mov	r5, r2
 8006c7a:	f012 0203 	ands.w	r2, r2, #3
 8006c7e:	4606      	mov	r6, r0
 8006c80:	460f      	mov	r7, r1
 8006c82:	d007      	beq.n	8006c94 <__pow5mult+0x20>
 8006c84:	4c25      	ldr	r4, [pc, #148]	; (8006d1c <__pow5mult+0xa8>)
 8006c86:	3a01      	subs	r2, #1
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c8e:	f7ff fe9d 	bl	80069cc <__multadd>
 8006c92:	4607      	mov	r7, r0
 8006c94:	10ad      	asrs	r5, r5, #2
 8006c96:	d03d      	beq.n	8006d14 <__pow5mult+0xa0>
 8006c98:	69f4      	ldr	r4, [r6, #28]
 8006c9a:	b97c      	cbnz	r4, 8006cbc <__pow5mult+0x48>
 8006c9c:	2010      	movs	r0, #16
 8006c9e:	f7ff fcd1 	bl	8006644 <malloc>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	61f0      	str	r0, [r6, #28]
 8006ca6:	b928      	cbnz	r0, 8006cb4 <__pow5mult+0x40>
 8006ca8:	4b1d      	ldr	r3, [pc, #116]	; (8006d20 <__pow5mult+0xac>)
 8006caa:	481e      	ldr	r0, [pc, #120]	; (8006d24 <__pow5mult+0xb0>)
 8006cac:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006cb0:	f000 fa96 	bl	80071e0 <__assert_func>
 8006cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cb8:	6004      	str	r4, [r0, #0]
 8006cba:	60c4      	str	r4, [r0, #12]
 8006cbc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cc4:	b94c      	cbnz	r4, 8006cda <__pow5mult+0x66>
 8006cc6:	f240 2171 	movw	r1, #625	; 0x271
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f7ff ff12 	bl	8006af4 <__i2b>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	6003      	str	r3, [r0, #0]
 8006cda:	f04f 0900 	mov.w	r9, #0
 8006cde:	07eb      	lsls	r3, r5, #31
 8006ce0:	d50a      	bpl.n	8006cf8 <__pow5mult+0x84>
 8006ce2:	4639      	mov	r1, r7
 8006ce4:	4622      	mov	r2, r4
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f7ff ff1a 	bl	8006b20 <__multiply>
 8006cec:	4639      	mov	r1, r7
 8006cee:	4680      	mov	r8, r0
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f7ff fe49 	bl	8006988 <_Bfree>
 8006cf6:	4647      	mov	r7, r8
 8006cf8:	106d      	asrs	r5, r5, #1
 8006cfa:	d00b      	beq.n	8006d14 <__pow5mult+0xa0>
 8006cfc:	6820      	ldr	r0, [r4, #0]
 8006cfe:	b938      	cbnz	r0, 8006d10 <__pow5mult+0x9c>
 8006d00:	4622      	mov	r2, r4
 8006d02:	4621      	mov	r1, r4
 8006d04:	4630      	mov	r0, r6
 8006d06:	f7ff ff0b 	bl	8006b20 <__multiply>
 8006d0a:	6020      	str	r0, [r4, #0]
 8006d0c:	f8c0 9000 	str.w	r9, [r0]
 8006d10:	4604      	mov	r4, r0
 8006d12:	e7e4      	b.n	8006cde <__pow5mult+0x6a>
 8006d14:	4638      	mov	r0, r7
 8006d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	bf00      	nop
 8006d1c:	08008b10 	.word	0x08008b10
 8006d20:	08008932 	.word	0x08008932
 8006d24:	080089c3 	.word	0x080089c3

08006d28 <__lshift>:
 8006d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	6849      	ldr	r1, [r1, #4]
 8006d30:	6923      	ldr	r3, [r4, #16]
 8006d32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d36:	68a3      	ldr	r3, [r4, #8]
 8006d38:	4607      	mov	r7, r0
 8006d3a:	4691      	mov	r9, r2
 8006d3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d40:	f108 0601 	add.w	r6, r8, #1
 8006d44:	42b3      	cmp	r3, r6
 8006d46:	db0b      	blt.n	8006d60 <__lshift+0x38>
 8006d48:	4638      	mov	r0, r7
 8006d4a:	f7ff fddd 	bl	8006908 <_Balloc>
 8006d4e:	4605      	mov	r5, r0
 8006d50:	b948      	cbnz	r0, 8006d66 <__lshift+0x3e>
 8006d52:	4602      	mov	r2, r0
 8006d54:	4b28      	ldr	r3, [pc, #160]	; (8006df8 <__lshift+0xd0>)
 8006d56:	4829      	ldr	r0, [pc, #164]	; (8006dfc <__lshift+0xd4>)
 8006d58:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006d5c:	f000 fa40 	bl	80071e0 <__assert_func>
 8006d60:	3101      	adds	r1, #1
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	e7ee      	b.n	8006d44 <__lshift+0x1c>
 8006d66:	2300      	movs	r3, #0
 8006d68:	f100 0114 	add.w	r1, r0, #20
 8006d6c:	f100 0210 	add.w	r2, r0, #16
 8006d70:	4618      	mov	r0, r3
 8006d72:	4553      	cmp	r3, sl
 8006d74:	db33      	blt.n	8006dde <__lshift+0xb6>
 8006d76:	6920      	ldr	r0, [r4, #16]
 8006d78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d7c:	f104 0314 	add.w	r3, r4, #20
 8006d80:	f019 091f 	ands.w	r9, r9, #31
 8006d84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d8c:	d02b      	beq.n	8006de6 <__lshift+0xbe>
 8006d8e:	f1c9 0e20 	rsb	lr, r9, #32
 8006d92:	468a      	mov	sl, r1
 8006d94:	2200      	movs	r2, #0
 8006d96:	6818      	ldr	r0, [r3, #0]
 8006d98:	fa00 f009 	lsl.w	r0, r0, r9
 8006d9c:	4310      	orrs	r0, r2
 8006d9e:	f84a 0b04 	str.w	r0, [sl], #4
 8006da2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da6:	459c      	cmp	ip, r3
 8006da8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006dac:	d8f3      	bhi.n	8006d96 <__lshift+0x6e>
 8006dae:	ebac 0304 	sub.w	r3, ip, r4
 8006db2:	3b15      	subs	r3, #21
 8006db4:	f023 0303 	bic.w	r3, r3, #3
 8006db8:	3304      	adds	r3, #4
 8006dba:	f104 0015 	add.w	r0, r4, #21
 8006dbe:	4584      	cmp	ip, r0
 8006dc0:	bf38      	it	cc
 8006dc2:	2304      	movcc	r3, #4
 8006dc4:	50ca      	str	r2, [r1, r3]
 8006dc6:	b10a      	cbz	r2, 8006dcc <__lshift+0xa4>
 8006dc8:	f108 0602 	add.w	r6, r8, #2
 8006dcc:	3e01      	subs	r6, #1
 8006dce:	4638      	mov	r0, r7
 8006dd0:	612e      	str	r6, [r5, #16]
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	f7ff fdd8 	bl	8006988 <_Bfree>
 8006dd8:	4628      	mov	r0, r5
 8006dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dde:	f842 0f04 	str.w	r0, [r2, #4]!
 8006de2:	3301      	adds	r3, #1
 8006de4:	e7c5      	b.n	8006d72 <__lshift+0x4a>
 8006de6:	3904      	subs	r1, #4
 8006de8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dec:	f841 2f04 	str.w	r2, [r1, #4]!
 8006df0:	459c      	cmp	ip, r3
 8006df2:	d8f9      	bhi.n	8006de8 <__lshift+0xc0>
 8006df4:	e7ea      	b.n	8006dcc <__lshift+0xa4>
 8006df6:	bf00      	nop
 8006df8:	080089a1 	.word	0x080089a1
 8006dfc:	080089c3 	.word	0x080089c3

08006e00 <__mcmp>:
 8006e00:	b530      	push	{r4, r5, lr}
 8006e02:	6902      	ldr	r2, [r0, #16]
 8006e04:	690c      	ldr	r4, [r1, #16]
 8006e06:	1b12      	subs	r2, r2, r4
 8006e08:	d10e      	bne.n	8006e28 <__mcmp+0x28>
 8006e0a:	f100 0314 	add.w	r3, r0, #20
 8006e0e:	3114      	adds	r1, #20
 8006e10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e20:	42a5      	cmp	r5, r4
 8006e22:	d003      	beq.n	8006e2c <__mcmp+0x2c>
 8006e24:	d305      	bcc.n	8006e32 <__mcmp+0x32>
 8006e26:	2201      	movs	r2, #1
 8006e28:	4610      	mov	r0, r2
 8006e2a:	bd30      	pop	{r4, r5, pc}
 8006e2c:	4283      	cmp	r3, r0
 8006e2e:	d3f3      	bcc.n	8006e18 <__mcmp+0x18>
 8006e30:	e7fa      	b.n	8006e28 <__mcmp+0x28>
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e36:	e7f7      	b.n	8006e28 <__mcmp+0x28>

08006e38 <__mdiff>:
 8006e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	4606      	mov	r6, r0
 8006e40:	4611      	mov	r1, r2
 8006e42:	4620      	mov	r0, r4
 8006e44:	4690      	mov	r8, r2
 8006e46:	f7ff ffdb 	bl	8006e00 <__mcmp>
 8006e4a:	1e05      	subs	r5, r0, #0
 8006e4c:	d110      	bne.n	8006e70 <__mdiff+0x38>
 8006e4e:	4629      	mov	r1, r5
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7ff fd59 	bl	8006908 <_Balloc>
 8006e56:	b930      	cbnz	r0, 8006e66 <__mdiff+0x2e>
 8006e58:	4b3a      	ldr	r3, [pc, #232]	; (8006f44 <__mdiff+0x10c>)
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	f240 2137 	movw	r1, #567	; 0x237
 8006e60:	4839      	ldr	r0, [pc, #228]	; (8006f48 <__mdiff+0x110>)
 8006e62:	f000 f9bd 	bl	80071e0 <__assert_func>
 8006e66:	2301      	movs	r3, #1
 8006e68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e70:	bfa4      	itt	ge
 8006e72:	4643      	movge	r3, r8
 8006e74:	46a0      	movge	r8, r4
 8006e76:	4630      	mov	r0, r6
 8006e78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e7c:	bfa6      	itte	ge
 8006e7e:	461c      	movge	r4, r3
 8006e80:	2500      	movge	r5, #0
 8006e82:	2501      	movlt	r5, #1
 8006e84:	f7ff fd40 	bl	8006908 <_Balloc>
 8006e88:	b920      	cbnz	r0, 8006e94 <__mdiff+0x5c>
 8006e8a:	4b2e      	ldr	r3, [pc, #184]	; (8006f44 <__mdiff+0x10c>)
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	f240 2145 	movw	r1, #581	; 0x245
 8006e92:	e7e5      	b.n	8006e60 <__mdiff+0x28>
 8006e94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e98:	6926      	ldr	r6, [r4, #16]
 8006e9a:	60c5      	str	r5, [r0, #12]
 8006e9c:	f104 0914 	add.w	r9, r4, #20
 8006ea0:	f108 0514 	add.w	r5, r8, #20
 8006ea4:	f100 0e14 	add.w	lr, r0, #20
 8006ea8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006eac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006eb0:	f108 0210 	add.w	r2, r8, #16
 8006eb4:	46f2      	mov	sl, lr
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ebc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ec0:	fa11 f88b 	uxtah	r8, r1, fp
 8006ec4:	b299      	uxth	r1, r3
 8006ec6:	0c1b      	lsrs	r3, r3, #16
 8006ec8:	eba8 0801 	sub.w	r8, r8, r1
 8006ecc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ed0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ed4:	fa1f f888 	uxth.w	r8, r8
 8006ed8:	1419      	asrs	r1, r3, #16
 8006eda:	454e      	cmp	r6, r9
 8006edc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ee0:	f84a 3b04 	str.w	r3, [sl], #4
 8006ee4:	d8e8      	bhi.n	8006eb8 <__mdiff+0x80>
 8006ee6:	1b33      	subs	r3, r6, r4
 8006ee8:	3b15      	subs	r3, #21
 8006eea:	f023 0303 	bic.w	r3, r3, #3
 8006eee:	3304      	adds	r3, #4
 8006ef0:	3415      	adds	r4, #21
 8006ef2:	42a6      	cmp	r6, r4
 8006ef4:	bf38      	it	cc
 8006ef6:	2304      	movcc	r3, #4
 8006ef8:	441d      	add	r5, r3
 8006efa:	4473      	add	r3, lr
 8006efc:	469e      	mov	lr, r3
 8006efe:	462e      	mov	r6, r5
 8006f00:	4566      	cmp	r6, ip
 8006f02:	d30e      	bcc.n	8006f22 <__mdiff+0xea>
 8006f04:	f10c 0203 	add.w	r2, ip, #3
 8006f08:	1b52      	subs	r2, r2, r5
 8006f0a:	f022 0203 	bic.w	r2, r2, #3
 8006f0e:	3d03      	subs	r5, #3
 8006f10:	45ac      	cmp	ip, r5
 8006f12:	bf38      	it	cc
 8006f14:	2200      	movcc	r2, #0
 8006f16:	4413      	add	r3, r2
 8006f18:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f1c:	b17a      	cbz	r2, 8006f3e <__mdiff+0x106>
 8006f1e:	6107      	str	r7, [r0, #16]
 8006f20:	e7a4      	b.n	8006e6c <__mdiff+0x34>
 8006f22:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f26:	fa11 f288 	uxtah	r2, r1, r8
 8006f2a:	1414      	asrs	r4, r2, #16
 8006f2c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f30:	b292      	uxth	r2, r2
 8006f32:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f36:	f84e 2b04 	str.w	r2, [lr], #4
 8006f3a:	1421      	asrs	r1, r4, #16
 8006f3c:	e7e0      	b.n	8006f00 <__mdiff+0xc8>
 8006f3e:	3f01      	subs	r7, #1
 8006f40:	e7ea      	b.n	8006f18 <__mdiff+0xe0>
 8006f42:	bf00      	nop
 8006f44:	080089a1 	.word	0x080089a1
 8006f48:	080089c3 	.word	0x080089c3

08006f4c <__d2b>:
 8006f4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f50:	460f      	mov	r7, r1
 8006f52:	2101      	movs	r1, #1
 8006f54:	ec59 8b10 	vmov	r8, r9, d0
 8006f58:	4616      	mov	r6, r2
 8006f5a:	f7ff fcd5 	bl	8006908 <_Balloc>
 8006f5e:	4604      	mov	r4, r0
 8006f60:	b930      	cbnz	r0, 8006f70 <__d2b+0x24>
 8006f62:	4602      	mov	r2, r0
 8006f64:	4b24      	ldr	r3, [pc, #144]	; (8006ff8 <__d2b+0xac>)
 8006f66:	4825      	ldr	r0, [pc, #148]	; (8006ffc <__d2b+0xb0>)
 8006f68:	f240 310f 	movw	r1, #783	; 0x30f
 8006f6c:	f000 f938 	bl	80071e0 <__assert_func>
 8006f70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f78:	bb2d      	cbnz	r5, 8006fc6 <__d2b+0x7a>
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	f1b8 0300 	subs.w	r3, r8, #0
 8006f80:	d026      	beq.n	8006fd0 <__d2b+0x84>
 8006f82:	4668      	mov	r0, sp
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	f7ff fd87 	bl	8006a98 <__lo0bits>
 8006f8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f8e:	b1e8      	cbz	r0, 8006fcc <__d2b+0x80>
 8006f90:	f1c0 0320 	rsb	r3, r0, #32
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	40c2      	lsrs	r2, r0
 8006f9c:	6163      	str	r3, [r4, #20]
 8006f9e:	9201      	str	r2, [sp, #4]
 8006fa0:	9b01      	ldr	r3, [sp, #4]
 8006fa2:	61a3      	str	r3, [r4, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bf14      	ite	ne
 8006fa8:	2202      	movne	r2, #2
 8006faa:	2201      	moveq	r2, #1
 8006fac:	6122      	str	r2, [r4, #16]
 8006fae:	b1bd      	cbz	r5, 8006fe0 <__d2b+0x94>
 8006fb0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fb4:	4405      	add	r5, r0
 8006fb6:	603d      	str	r5, [r7, #0]
 8006fb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fbc:	6030      	str	r0, [r6, #0]
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	b003      	add	sp, #12
 8006fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fca:	e7d6      	b.n	8006f7a <__d2b+0x2e>
 8006fcc:	6161      	str	r1, [r4, #20]
 8006fce:	e7e7      	b.n	8006fa0 <__d2b+0x54>
 8006fd0:	a801      	add	r0, sp, #4
 8006fd2:	f7ff fd61 	bl	8006a98 <__lo0bits>
 8006fd6:	9b01      	ldr	r3, [sp, #4]
 8006fd8:	6163      	str	r3, [r4, #20]
 8006fda:	3020      	adds	r0, #32
 8006fdc:	2201      	movs	r2, #1
 8006fde:	e7e5      	b.n	8006fac <__d2b+0x60>
 8006fe0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fe4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fe8:	6038      	str	r0, [r7, #0]
 8006fea:	6918      	ldr	r0, [r3, #16]
 8006fec:	f7ff fd34 	bl	8006a58 <__hi0bits>
 8006ff0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ff4:	e7e2      	b.n	8006fbc <__d2b+0x70>
 8006ff6:	bf00      	nop
 8006ff8:	080089a1 	.word	0x080089a1
 8006ffc:	080089c3 	.word	0x080089c3

08007000 <__sread>:
 8007000:	b510      	push	{r4, lr}
 8007002:	460c      	mov	r4, r1
 8007004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007008:	f000 f8a8 	bl	800715c <_read_r>
 800700c:	2800      	cmp	r0, #0
 800700e:	bfab      	itete	ge
 8007010:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007012:	89a3      	ldrhlt	r3, [r4, #12]
 8007014:	181b      	addge	r3, r3, r0
 8007016:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800701a:	bfac      	ite	ge
 800701c:	6563      	strge	r3, [r4, #84]	; 0x54
 800701e:	81a3      	strhlt	r3, [r4, #12]
 8007020:	bd10      	pop	{r4, pc}

08007022 <__swrite>:
 8007022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007026:	461f      	mov	r7, r3
 8007028:	898b      	ldrh	r3, [r1, #12]
 800702a:	05db      	lsls	r3, r3, #23
 800702c:	4605      	mov	r5, r0
 800702e:	460c      	mov	r4, r1
 8007030:	4616      	mov	r6, r2
 8007032:	d505      	bpl.n	8007040 <__swrite+0x1e>
 8007034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007038:	2302      	movs	r3, #2
 800703a:	2200      	movs	r2, #0
 800703c:	f000 f87c 	bl	8007138 <_lseek_r>
 8007040:	89a3      	ldrh	r3, [r4, #12]
 8007042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007046:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800704a:	81a3      	strh	r3, [r4, #12]
 800704c:	4632      	mov	r2, r6
 800704e:	463b      	mov	r3, r7
 8007050:	4628      	mov	r0, r5
 8007052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	f000 b8a3 	b.w	80071a0 <_write_r>

0800705a <__sseek>:
 800705a:	b510      	push	{r4, lr}
 800705c:	460c      	mov	r4, r1
 800705e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007062:	f000 f869 	bl	8007138 <_lseek_r>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	bf15      	itete	ne
 800706c:	6560      	strne	r0, [r4, #84]	; 0x54
 800706e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007072:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007076:	81a3      	strheq	r3, [r4, #12]
 8007078:	bf18      	it	ne
 800707a:	81a3      	strhne	r3, [r4, #12]
 800707c:	bd10      	pop	{r4, pc}

0800707e <__sclose>:
 800707e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007082:	f000 b849 	b.w	8007118 <_close_r>

08007086 <_realloc_r>:
 8007086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708a:	4680      	mov	r8, r0
 800708c:	4614      	mov	r4, r2
 800708e:	460e      	mov	r6, r1
 8007090:	b921      	cbnz	r1, 800709c <_realloc_r+0x16>
 8007092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007096:	4611      	mov	r1, r2
 8007098:	f7ff bafc 	b.w	8006694 <_malloc_r>
 800709c:	b92a      	cbnz	r2, 80070aa <_realloc_r+0x24>
 800709e:	f000 f8d3 	bl	8007248 <_free_r>
 80070a2:	4625      	mov	r5, r4
 80070a4:	4628      	mov	r0, r5
 80070a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070aa:	f000 f92b 	bl	8007304 <_malloc_usable_size_r>
 80070ae:	4284      	cmp	r4, r0
 80070b0:	4607      	mov	r7, r0
 80070b2:	d802      	bhi.n	80070ba <_realloc_r+0x34>
 80070b4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070b8:	d812      	bhi.n	80070e0 <_realloc_r+0x5a>
 80070ba:	4621      	mov	r1, r4
 80070bc:	4640      	mov	r0, r8
 80070be:	f7ff fae9 	bl	8006694 <_malloc_r>
 80070c2:	4605      	mov	r5, r0
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d0ed      	beq.n	80070a4 <_realloc_r+0x1e>
 80070c8:	42bc      	cmp	r4, r7
 80070ca:	4622      	mov	r2, r4
 80070cc:	4631      	mov	r1, r6
 80070ce:	bf28      	it	cs
 80070d0:	463a      	movcs	r2, r7
 80070d2:	f000 f877 	bl	80071c4 <memcpy>
 80070d6:	4631      	mov	r1, r6
 80070d8:	4640      	mov	r0, r8
 80070da:	f000 f8b5 	bl	8007248 <_free_r>
 80070de:	e7e1      	b.n	80070a4 <_realloc_r+0x1e>
 80070e0:	4635      	mov	r5, r6
 80070e2:	e7df      	b.n	80070a4 <_realloc_r+0x1e>

080070e4 <memmove>:
 80070e4:	4288      	cmp	r0, r1
 80070e6:	b510      	push	{r4, lr}
 80070e8:	eb01 0402 	add.w	r4, r1, r2
 80070ec:	d902      	bls.n	80070f4 <memmove+0x10>
 80070ee:	4284      	cmp	r4, r0
 80070f0:	4623      	mov	r3, r4
 80070f2:	d807      	bhi.n	8007104 <memmove+0x20>
 80070f4:	1e43      	subs	r3, r0, #1
 80070f6:	42a1      	cmp	r1, r4
 80070f8:	d008      	beq.n	800710c <memmove+0x28>
 80070fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007102:	e7f8      	b.n	80070f6 <memmove+0x12>
 8007104:	4402      	add	r2, r0
 8007106:	4601      	mov	r1, r0
 8007108:	428a      	cmp	r2, r1
 800710a:	d100      	bne.n	800710e <memmove+0x2a>
 800710c:	bd10      	pop	{r4, pc}
 800710e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007116:	e7f7      	b.n	8007108 <memmove+0x24>

08007118 <_close_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d06      	ldr	r5, [pc, #24]	; (8007134 <_close_r+0x1c>)
 800711c:	2300      	movs	r3, #0
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	602b      	str	r3, [r5, #0]
 8007124:	f7fb fac9 	bl	80026ba <_close>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_close_r+0x1a>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_close_r+0x1a>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	20000928 	.word	0x20000928

08007138 <_lseek_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4d07      	ldr	r5, [pc, #28]	; (8007158 <_lseek_r+0x20>)
 800713c:	4604      	mov	r4, r0
 800713e:	4608      	mov	r0, r1
 8007140:	4611      	mov	r1, r2
 8007142:	2200      	movs	r2, #0
 8007144:	602a      	str	r2, [r5, #0]
 8007146:	461a      	mov	r2, r3
 8007148:	f7fb fade 	bl	8002708 <_lseek>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <_lseek_r+0x1e>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	b103      	cbz	r3, 8007156 <_lseek_r+0x1e>
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	bd38      	pop	{r3, r4, r5, pc}
 8007158:	20000928 	.word	0x20000928

0800715c <_read_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	4d07      	ldr	r5, [pc, #28]	; (800717c <_read_r+0x20>)
 8007160:	4604      	mov	r4, r0
 8007162:	4608      	mov	r0, r1
 8007164:	4611      	mov	r1, r2
 8007166:	2200      	movs	r2, #0
 8007168:	602a      	str	r2, [r5, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	f7fb fa6c 	bl	8002648 <_read>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_read_r+0x1e>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_read_r+0x1e>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	20000928 	.word	0x20000928

08007180 <_sbrk_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4d06      	ldr	r5, [pc, #24]	; (800719c <_sbrk_r+0x1c>)
 8007184:	2300      	movs	r3, #0
 8007186:	4604      	mov	r4, r0
 8007188:	4608      	mov	r0, r1
 800718a:	602b      	str	r3, [r5, #0]
 800718c:	f7fb faca 	bl	8002724 <_sbrk>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_sbrk_r+0x1a>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_sbrk_r+0x1a>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	20000928 	.word	0x20000928

080071a0 <_write_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d07      	ldr	r5, [pc, #28]	; (80071c0 <_write_r+0x20>)
 80071a4:	4604      	mov	r4, r0
 80071a6:	4608      	mov	r0, r1
 80071a8:	4611      	mov	r1, r2
 80071aa:	2200      	movs	r2, #0
 80071ac:	602a      	str	r2, [r5, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f7fb fa67 	bl	8002682 <_write>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_write_r+0x1e>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_write_r+0x1e>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	20000928 	.word	0x20000928

080071c4 <memcpy>:
 80071c4:	440a      	add	r2, r1
 80071c6:	4291      	cmp	r1, r2
 80071c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80071cc:	d100      	bne.n	80071d0 <memcpy+0xc>
 80071ce:	4770      	bx	lr
 80071d0:	b510      	push	{r4, lr}
 80071d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071da:	4291      	cmp	r1, r2
 80071dc:	d1f9      	bne.n	80071d2 <memcpy+0xe>
 80071de:	bd10      	pop	{r4, pc}

080071e0 <__assert_func>:
 80071e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80071e2:	4614      	mov	r4, r2
 80071e4:	461a      	mov	r2, r3
 80071e6:	4b09      	ldr	r3, [pc, #36]	; (800720c <__assert_func+0x2c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4605      	mov	r5, r0
 80071ec:	68d8      	ldr	r0, [r3, #12]
 80071ee:	b14c      	cbz	r4, 8007204 <__assert_func+0x24>
 80071f0:	4b07      	ldr	r3, [pc, #28]	; (8007210 <__assert_func+0x30>)
 80071f2:	9100      	str	r1, [sp, #0]
 80071f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071f8:	4906      	ldr	r1, [pc, #24]	; (8007214 <__assert_func+0x34>)
 80071fa:	462b      	mov	r3, r5
 80071fc:	f000 f88a 	bl	8007314 <fiprintf>
 8007200:	f000 f8a7 	bl	8007352 <abort>
 8007204:	4b04      	ldr	r3, [pc, #16]	; (8007218 <__assert_func+0x38>)
 8007206:	461c      	mov	r4, r3
 8007208:	e7f3      	b.n	80071f2 <__assert_func+0x12>
 800720a:	bf00      	nop
 800720c:	2000006c 	.word	0x2000006c
 8007210:	08008b26 	.word	0x08008b26
 8007214:	08008b33 	.word	0x08008b33
 8007218:	08008b61 	.word	0x08008b61

0800721c <_calloc_r>:
 800721c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800721e:	fba1 2402 	umull	r2, r4, r1, r2
 8007222:	b94c      	cbnz	r4, 8007238 <_calloc_r+0x1c>
 8007224:	4611      	mov	r1, r2
 8007226:	9201      	str	r2, [sp, #4]
 8007228:	f7ff fa34 	bl	8006694 <_malloc_r>
 800722c:	9a01      	ldr	r2, [sp, #4]
 800722e:	4605      	mov	r5, r0
 8007230:	b930      	cbnz	r0, 8007240 <_calloc_r+0x24>
 8007232:	4628      	mov	r0, r5
 8007234:	b003      	add	sp, #12
 8007236:	bd30      	pop	{r4, r5, pc}
 8007238:	220c      	movs	r2, #12
 800723a:	6002      	str	r2, [r0, #0]
 800723c:	2500      	movs	r5, #0
 800723e:	e7f8      	b.n	8007232 <_calloc_r+0x16>
 8007240:	4621      	mov	r1, r4
 8007242:	f7fe f9f3 	bl	800562c <memset>
 8007246:	e7f4      	b.n	8007232 <_calloc_r+0x16>

08007248 <_free_r>:
 8007248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800724a:	2900      	cmp	r1, #0
 800724c:	d044      	beq.n	80072d8 <_free_r+0x90>
 800724e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007252:	9001      	str	r0, [sp, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f1a1 0404 	sub.w	r4, r1, #4
 800725a:	bfb8      	it	lt
 800725c:	18e4      	addlt	r4, r4, r3
 800725e:	f7ff fb47 	bl	80068f0 <__malloc_lock>
 8007262:	4a1e      	ldr	r2, [pc, #120]	; (80072dc <_free_r+0x94>)
 8007264:	9801      	ldr	r0, [sp, #4]
 8007266:	6813      	ldr	r3, [r2, #0]
 8007268:	b933      	cbnz	r3, 8007278 <_free_r+0x30>
 800726a:	6063      	str	r3, [r4, #4]
 800726c:	6014      	str	r4, [r2, #0]
 800726e:	b003      	add	sp, #12
 8007270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007274:	f7ff bb42 	b.w	80068fc <__malloc_unlock>
 8007278:	42a3      	cmp	r3, r4
 800727a:	d908      	bls.n	800728e <_free_r+0x46>
 800727c:	6825      	ldr	r5, [r4, #0]
 800727e:	1961      	adds	r1, r4, r5
 8007280:	428b      	cmp	r3, r1
 8007282:	bf01      	itttt	eq
 8007284:	6819      	ldreq	r1, [r3, #0]
 8007286:	685b      	ldreq	r3, [r3, #4]
 8007288:	1949      	addeq	r1, r1, r5
 800728a:	6021      	streq	r1, [r4, #0]
 800728c:	e7ed      	b.n	800726a <_free_r+0x22>
 800728e:	461a      	mov	r2, r3
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	b10b      	cbz	r3, 8007298 <_free_r+0x50>
 8007294:	42a3      	cmp	r3, r4
 8007296:	d9fa      	bls.n	800728e <_free_r+0x46>
 8007298:	6811      	ldr	r1, [r2, #0]
 800729a:	1855      	adds	r5, r2, r1
 800729c:	42a5      	cmp	r5, r4
 800729e:	d10b      	bne.n	80072b8 <_free_r+0x70>
 80072a0:	6824      	ldr	r4, [r4, #0]
 80072a2:	4421      	add	r1, r4
 80072a4:	1854      	adds	r4, r2, r1
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	6011      	str	r1, [r2, #0]
 80072aa:	d1e0      	bne.n	800726e <_free_r+0x26>
 80072ac:	681c      	ldr	r4, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	6053      	str	r3, [r2, #4]
 80072b2:	440c      	add	r4, r1
 80072b4:	6014      	str	r4, [r2, #0]
 80072b6:	e7da      	b.n	800726e <_free_r+0x26>
 80072b8:	d902      	bls.n	80072c0 <_free_r+0x78>
 80072ba:	230c      	movs	r3, #12
 80072bc:	6003      	str	r3, [r0, #0]
 80072be:	e7d6      	b.n	800726e <_free_r+0x26>
 80072c0:	6825      	ldr	r5, [r4, #0]
 80072c2:	1961      	adds	r1, r4, r5
 80072c4:	428b      	cmp	r3, r1
 80072c6:	bf04      	itt	eq
 80072c8:	6819      	ldreq	r1, [r3, #0]
 80072ca:	685b      	ldreq	r3, [r3, #4]
 80072cc:	6063      	str	r3, [r4, #4]
 80072ce:	bf04      	itt	eq
 80072d0:	1949      	addeq	r1, r1, r5
 80072d2:	6021      	streq	r1, [r4, #0]
 80072d4:	6054      	str	r4, [r2, #4]
 80072d6:	e7ca      	b.n	800726e <_free_r+0x26>
 80072d8:	b003      	add	sp, #12
 80072da:	bd30      	pop	{r4, r5, pc}
 80072dc:	20000920 	.word	0x20000920

080072e0 <__ascii_mbtowc>:
 80072e0:	b082      	sub	sp, #8
 80072e2:	b901      	cbnz	r1, 80072e6 <__ascii_mbtowc+0x6>
 80072e4:	a901      	add	r1, sp, #4
 80072e6:	b142      	cbz	r2, 80072fa <__ascii_mbtowc+0x1a>
 80072e8:	b14b      	cbz	r3, 80072fe <__ascii_mbtowc+0x1e>
 80072ea:	7813      	ldrb	r3, [r2, #0]
 80072ec:	600b      	str	r3, [r1, #0]
 80072ee:	7812      	ldrb	r2, [r2, #0]
 80072f0:	1e10      	subs	r0, r2, #0
 80072f2:	bf18      	it	ne
 80072f4:	2001      	movne	r0, #1
 80072f6:	b002      	add	sp, #8
 80072f8:	4770      	bx	lr
 80072fa:	4610      	mov	r0, r2
 80072fc:	e7fb      	b.n	80072f6 <__ascii_mbtowc+0x16>
 80072fe:	f06f 0001 	mvn.w	r0, #1
 8007302:	e7f8      	b.n	80072f6 <__ascii_mbtowc+0x16>

08007304 <_malloc_usable_size_r>:
 8007304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007308:	1f18      	subs	r0, r3, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	bfbc      	itt	lt
 800730e:	580b      	ldrlt	r3, [r1, r0]
 8007310:	18c0      	addlt	r0, r0, r3
 8007312:	4770      	bx	lr

08007314 <fiprintf>:
 8007314:	b40e      	push	{r1, r2, r3}
 8007316:	b503      	push	{r0, r1, lr}
 8007318:	4601      	mov	r1, r0
 800731a:	ab03      	add	r3, sp, #12
 800731c:	4805      	ldr	r0, [pc, #20]	; (8007334 <fiprintf+0x20>)
 800731e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007322:	6800      	ldr	r0, [r0, #0]
 8007324:	9301      	str	r3, [sp, #4]
 8007326:	f000 f845 	bl	80073b4 <_vfiprintf_r>
 800732a:	b002      	add	sp, #8
 800732c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007330:	b003      	add	sp, #12
 8007332:	4770      	bx	lr
 8007334:	2000006c 	.word	0x2000006c

08007338 <__ascii_wctomb>:
 8007338:	b149      	cbz	r1, 800734e <__ascii_wctomb+0x16>
 800733a:	2aff      	cmp	r2, #255	; 0xff
 800733c:	bf85      	ittet	hi
 800733e:	238a      	movhi	r3, #138	; 0x8a
 8007340:	6003      	strhi	r3, [r0, #0]
 8007342:	700a      	strbls	r2, [r1, #0]
 8007344:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007348:	bf98      	it	ls
 800734a:	2001      	movls	r0, #1
 800734c:	4770      	bx	lr
 800734e:	4608      	mov	r0, r1
 8007350:	4770      	bx	lr

08007352 <abort>:
 8007352:	b508      	push	{r3, lr}
 8007354:	2006      	movs	r0, #6
 8007356:	f000 fa89 	bl	800786c <raise>
 800735a:	2001      	movs	r0, #1
 800735c:	f7fb f96a 	bl	8002634 <_exit>

08007360 <__sfputc_r>:
 8007360:	6893      	ldr	r3, [r2, #8]
 8007362:	3b01      	subs	r3, #1
 8007364:	2b00      	cmp	r3, #0
 8007366:	b410      	push	{r4}
 8007368:	6093      	str	r3, [r2, #8]
 800736a:	da08      	bge.n	800737e <__sfputc_r+0x1e>
 800736c:	6994      	ldr	r4, [r2, #24]
 800736e:	42a3      	cmp	r3, r4
 8007370:	db01      	blt.n	8007376 <__sfputc_r+0x16>
 8007372:	290a      	cmp	r1, #10
 8007374:	d103      	bne.n	800737e <__sfputc_r+0x1e>
 8007376:	f85d 4b04 	ldr.w	r4, [sp], #4
 800737a:	f000 b935 	b.w	80075e8 <__swbuf_r>
 800737e:	6813      	ldr	r3, [r2, #0]
 8007380:	1c58      	adds	r0, r3, #1
 8007382:	6010      	str	r0, [r2, #0]
 8007384:	7019      	strb	r1, [r3, #0]
 8007386:	4608      	mov	r0, r1
 8007388:	f85d 4b04 	ldr.w	r4, [sp], #4
 800738c:	4770      	bx	lr

0800738e <__sfputs_r>:
 800738e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007390:	4606      	mov	r6, r0
 8007392:	460f      	mov	r7, r1
 8007394:	4614      	mov	r4, r2
 8007396:	18d5      	adds	r5, r2, r3
 8007398:	42ac      	cmp	r4, r5
 800739a:	d101      	bne.n	80073a0 <__sfputs_r+0x12>
 800739c:	2000      	movs	r0, #0
 800739e:	e007      	b.n	80073b0 <__sfputs_r+0x22>
 80073a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073a4:	463a      	mov	r2, r7
 80073a6:	4630      	mov	r0, r6
 80073a8:	f7ff ffda 	bl	8007360 <__sfputc_r>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d1f3      	bne.n	8007398 <__sfputs_r+0xa>
 80073b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073b4 <_vfiprintf_r>:
 80073b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b8:	460d      	mov	r5, r1
 80073ba:	b09d      	sub	sp, #116	; 0x74
 80073bc:	4614      	mov	r4, r2
 80073be:	4698      	mov	r8, r3
 80073c0:	4606      	mov	r6, r0
 80073c2:	b118      	cbz	r0, 80073cc <_vfiprintf_r+0x18>
 80073c4:	6a03      	ldr	r3, [r0, #32]
 80073c6:	b90b      	cbnz	r3, 80073cc <_vfiprintf_r+0x18>
 80073c8:	f7fe f86e 	bl	80054a8 <__sinit>
 80073cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073ce:	07d9      	lsls	r1, r3, #31
 80073d0:	d405      	bmi.n	80073de <_vfiprintf_r+0x2a>
 80073d2:	89ab      	ldrh	r3, [r5, #12]
 80073d4:	059a      	lsls	r2, r3, #22
 80073d6:	d402      	bmi.n	80073de <_vfiprintf_r+0x2a>
 80073d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073da:	f7fe f95e 	bl	800569a <__retarget_lock_acquire_recursive>
 80073de:	89ab      	ldrh	r3, [r5, #12]
 80073e0:	071b      	lsls	r3, r3, #28
 80073e2:	d501      	bpl.n	80073e8 <_vfiprintf_r+0x34>
 80073e4:	692b      	ldr	r3, [r5, #16]
 80073e6:	b99b      	cbnz	r3, 8007410 <_vfiprintf_r+0x5c>
 80073e8:	4629      	mov	r1, r5
 80073ea:	4630      	mov	r0, r6
 80073ec:	f000 f93a 	bl	8007664 <__swsetup_r>
 80073f0:	b170      	cbz	r0, 8007410 <_vfiprintf_r+0x5c>
 80073f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073f4:	07dc      	lsls	r4, r3, #31
 80073f6:	d504      	bpl.n	8007402 <_vfiprintf_r+0x4e>
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073fc:	b01d      	add	sp, #116	; 0x74
 80073fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007402:	89ab      	ldrh	r3, [r5, #12]
 8007404:	0598      	lsls	r0, r3, #22
 8007406:	d4f7      	bmi.n	80073f8 <_vfiprintf_r+0x44>
 8007408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800740a:	f7fe f947 	bl	800569c <__retarget_lock_release_recursive>
 800740e:	e7f3      	b.n	80073f8 <_vfiprintf_r+0x44>
 8007410:	2300      	movs	r3, #0
 8007412:	9309      	str	r3, [sp, #36]	; 0x24
 8007414:	2320      	movs	r3, #32
 8007416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800741a:	f8cd 800c 	str.w	r8, [sp, #12]
 800741e:	2330      	movs	r3, #48	; 0x30
 8007420:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80075d4 <_vfiprintf_r+0x220>
 8007424:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007428:	f04f 0901 	mov.w	r9, #1
 800742c:	4623      	mov	r3, r4
 800742e:	469a      	mov	sl, r3
 8007430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007434:	b10a      	cbz	r2, 800743a <_vfiprintf_r+0x86>
 8007436:	2a25      	cmp	r2, #37	; 0x25
 8007438:	d1f9      	bne.n	800742e <_vfiprintf_r+0x7a>
 800743a:	ebba 0b04 	subs.w	fp, sl, r4
 800743e:	d00b      	beq.n	8007458 <_vfiprintf_r+0xa4>
 8007440:	465b      	mov	r3, fp
 8007442:	4622      	mov	r2, r4
 8007444:	4629      	mov	r1, r5
 8007446:	4630      	mov	r0, r6
 8007448:	f7ff ffa1 	bl	800738e <__sfputs_r>
 800744c:	3001      	adds	r0, #1
 800744e:	f000 80a9 	beq.w	80075a4 <_vfiprintf_r+0x1f0>
 8007452:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007454:	445a      	add	r2, fp
 8007456:	9209      	str	r2, [sp, #36]	; 0x24
 8007458:	f89a 3000 	ldrb.w	r3, [sl]
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 80a1 	beq.w	80075a4 <_vfiprintf_r+0x1f0>
 8007462:	2300      	movs	r3, #0
 8007464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800746c:	f10a 0a01 	add.w	sl, sl, #1
 8007470:	9304      	str	r3, [sp, #16]
 8007472:	9307      	str	r3, [sp, #28]
 8007474:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007478:	931a      	str	r3, [sp, #104]	; 0x68
 800747a:	4654      	mov	r4, sl
 800747c:	2205      	movs	r2, #5
 800747e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007482:	4854      	ldr	r0, [pc, #336]	; (80075d4 <_vfiprintf_r+0x220>)
 8007484:	f7f8 feac 	bl	80001e0 <memchr>
 8007488:	9a04      	ldr	r2, [sp, #16]
 800748a:	b9d8      	cbnz	r0, 80074c4 <_vfiprintf_r+0x110>
 800748c:	06d1      	lsls	r1, r2, #27
 800748e:	bf44      	itt	mi
 8007490:	2320      	movmi	r3, #32
 8007492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007496:	0713      	lsls	r3, r2, #28
 8007498:	bf44      	itt	mi
 800749a:	232b      	movmi	r3, #43	; 0x2b
 800749c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074a0:	f89a 3000 	ldrb.w	r3, [sl]
 80074a4:	2b2a      	cmp	r3, #42	; 0x2a
 80074a6:	d015      	beq.n	80074d4 <_vfiprintf_r+0x120>
 80074a8:	9a07      	ldr	r2, [sp, #28]
 80074aa:	4654      	mov	r4, sl
 80074ac:	2000      	movs	r0, #0
 80074ae:	f04f 0c0a 	mov.w	ip, #10
 80074b2:	4621      	mov	r1, r4
 80074b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074b8:	3b30      	subs	r3, #48	; 0x30
 80074ba:	2b09      	cmp	r3, #9
 80074bc:	d94d      	bls.n	800755a <_vfiprintf_r+0x1a6>
 80074be:	b1b0      	cbz	r0, 80074ee <_vfiprintf_r+0x13a>
 80074c0:	9207      	str	r2, [sp, #28]
 80074c2:	e014      	b.n	80074ee <_vfiprintf_r+0x13a>
 80074c4:	eba0 0308 	sub.w	r3, r0, r8
 80074c8:	fa09 f303 	lsl.w	r3, r9, r3
 80074cc:	4313      	orrs	r3, r2
 80074ce:	9304      	str	r3, [sp, #16]
 80074d0:	46a2      	mov	sl, r4
 80074d2:	e7d2      	b.n	800747a <_vfiprintf_r+0xc6>
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	1d19      	adds	r1, r3, #4
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	9103      	str	r1, [sp, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bfbb      	ittet	lt
 80074e0:	425b      	neglt	r3, r3
 80074e2:	f042 0202 	orrlt.w	r2, r2, #2
 80074e6:	9307      	strge	r3, [sp, #28]
 80074e8:	9307      	strlt	r3, [sp, #28]
 80074ea:	bfb8      	it	lt
 80074ec:	9204      	strlt	r2, [sp, #16]
 80074ee:	7823      	ldrb	r3, [r4, #0]
 80074f0:	2b2e      	cmp	r3, #46	; 0x2e
 80074f2:	d10c      	bne.n	800750e <_vfiprintf_r+0x15a>
 80074f4:	7863      	ldrb	r3, [r4, #1]
 80074f6:	2b2a      	cmp	r3, #42	; 0x2a
 80074f8:	d134      	bne.n	8007564 <_vfiprintf_r+0x1b0>
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	9203      	str	r2, [sp, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	bfb8      	it	lt
 8007506:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800750a:	3402      	adds	r4, #2
 800750c:	9305      	str	r3, [sp, #20]
 800750e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80075e4 <_vfiprintf_r+0x230>
 8007512:	7821      	ldrb	r1, [r4, #0]
 8007514:	2203      	movs	r2, #3
 8007516:	4650      	mov	r0, sl
 8007518:	f7f8 fe62 	bl	80001e0 <memchr>
 800751c:	b138      	cbz	r0, 800752e <_vfiprintf_r+0x17a>
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	eba0 000a 	sub.w	r0, r0, sl
 8007524:	2240      	movs	r2, #64	; 0x40
 8007526:	4082      	lsls	r2, r0
 8007528:	4313      	orrs	r3, r2
 800752a:	3401      	adds	r4, #1
 800752c:	9304      	str	r3, [sp, #16]
 800752e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007532:	4829      	ldr	r0, [pc, #164]	; (80075d8 <_vfiprintf_r+0x224>)
 8007534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007538:	2206      	movs	r2, #6
 800753a:	f7f8 fe51 	bl	80001e0 <memchr>
 800753e:	2800      	cmp	r0, #0
 8007540:	d03f      	beq.n	80075c2 <_vfiprintf_r+0x20e>
 8007542:	4b26      	ldr	r3, [pc, #152]	; (80075dc <_vfiprintf_r+0x228>)
 8007544:	bb1b      	cbnz	r3, 800758e <_vfiprintf_r+0x1da>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	3307      	adds	r3, #7
 800754a:	f023 0307 	bic.w	r3, r3, #7
 800754e:	3308      	adds	r3, #8
 8007550:	9303      	str	r3, [sp, #12]
 8007552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007554:	443b      	add	r3, r7
 8007556:	9309      	str	r3, [sp, #36]	; 0x24
 8007558:	e768      	b.n	800742c <_vfiprintf_r+0x78>
 800755a:	fb0c 3202 	mla	r2, ip, r2, r3
 800755e:	460c      	mov	r4, r1
 8007560:	2001      	movs	r0, #1
 8007562:	e7a6      	b.n	80074b2 <_vfiprintf_r+0xfe>
 8007564:	2300      	movs	r3, #0
 8007566:	3401      	adds	r4, #1
 8007568:	9305      	str	r3, [sp, #20]
 800756a:	4619      	mov	r1, r3
 800756c:	f04f 0c0a 	mov.w	ip, #10
 8007570:	4620      	mov	r0, r4
 8007572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007576:	3a30      	subs	r2, #48	; 0x30
 8007578:	2a09      	cmp	r2, #9
 800757a:	d903      	bls.n	8007584 <_vfiprintf_r+0x1d0>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0c6      	beq.n	800750e <_vfiprintf_r+0x15a>
 8007580:	9105      	str	r1, [sp, #20]
 8007582:	e7c4      	b.n	800750e <_vfiprintf_r+0x15a>
 8007584:	fb0c 2101 	mla	r1, ip, r1, r2
 8007588:	4604      	mov	r4, r0
 800758a:	2301      	movs	r3, #1
 800758c:	e7f0      	b.n	8007570 <_vfiprintf_r+0x1bc>
 800758e:	ab03      	add	r3, sp, #12
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	462a      	mov	r2, r5
 8007594:	4b12      	ldr	r3, [pc, #72]	; (80075e0 <_vfiprintf_r+0x22c>)
 8007596:	a904      	add	r1, sp, #16
 8007598:	4630      	mov	r0, r6
 800759a:	f7fd fb13 	bl	8004bc4 <_printf_float>
 800759e:	4607      	mov	r7, r0
 80075a0:	1c78      	adds	r0, r7, #1
 80075a2:	d1d6      	bne.n	8007552 <_vfiprintf_r+0x19e>
 80075a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075a6:	07d9      	lsls	r1, r3, #31
 80075a8:	d405      	bmi.n	80075b6 <_vfiprintf_r+0x202>
 80075aa:	89ab      	ldrh	r3, [r5, #12]
 80075ac:	059a      	lsls	r2, r3, #22
 80075ae:	d402      	bmi.n	80075b6 <_vfiprintf_r+0x202>
 80075b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075b2:	f7fe f873 	bl	800569c <__retarget_lock_release_recursive>
 80075b6:	89ab      	ldrh	r3, [r5, #12]
 80075b8:	065b      	lsls	r3, r3, #25
 80075ba:	f53f af1d 	bmi.w	80073f8 <_vfiprintf_r+0x44>
 80075be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075c0:	e71c      	b.n	80073fc <_vfiprintf_r+0x48>
 80075c2:	ab03      	add	r3, sp, #12
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	462a      	mov	r2, r5
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <_vfiprintf_r+0x22c>)
 80075ca:	a904      	add	r1, sp, #16
 80075cc:	4630      	mov	r0, r6
 80075ce:	f7fd fd9d 	bl	800510c <_printf_i>
 80075d2:	e7e4      	b.n	800759e <_vfiprintf_r+0x1ea>
 80075d4:	080089b2 	.word	0x080089b2
 80075d8:	080089bc 	.word	0x080089bc
 80075dc:	08004bc5 	.word	0x08004bc5
 80075e0:	0800738f 	.word	0x0800738f
 80075e4:	080089b8 	.word	0x080089b8

080075e8 <__swbuf_r>:
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ea:	460e      	mov	r6, r1
 80075ec:	4614      	mov	r4, r2
 80075ee:	4605      	mov	r5, r0
 80075f0:	b118      	cbz	r0, 80075fa <__swbuf_r+0x12>
 80075f2:	6a03      	ldr	r3, [r0, #32]
 80075f4:	b90b      	cbnz	r3, 80075fa <__swbuf_r+0x12>
 80075f6:	f7fd ff57 	bl	80054a8 <__sinit>
 80075fa:	69a3      	ldr	r3, [r4, #24]
 80075fc:	60a3      	str	r3, [r4, #8]
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	071a      	lsls	r2, r3, #28
 8007602:	d525      	bpl.n	8007650 <__swbuf_r+0x68>
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	b31b      	cbz	r3, 8007650 <__swbuf_r+0x68>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	6922      	ldr	r2, [r4, #16]
 800760c:	1a98      	subs	r0, r3, r2
 800760e:	6963      	ldr	r3, [r4, #20]
 8007610:	b2f6      	uxtb	r6, r6
 8007612:	4283      	cmp	r3, r0
 8007614:	4637      	mov	r7, r6
 8007616:	dc04      	bgt.n	8007622 <__swbuf_r+0x3a>
 8007618:	4621      	mov	r1, r4
 800761a:	4628      	mov	r0, r5
 800761c:	f7ff f940 	bl	80068a0 <_fflush_r>
 8007620:	b9e0      	cbnz	r0, 800765c <__swbuf_r+0x74>
 8007622:	68a3      	ldr	r3, [r4, #8]
 8007624:	3b01      	subs	r3, #1
 8007626:	60a3      	str	r3, [r4, #8]
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	6022      	str	r2, [r4, #0]
 800762e:	701e      	strb	r6, [r3, #0]
 8007630:	6962      	ldr	r2, [r4, #20]
 8007632:	1c43      	adds	r3, r0, #1
 8007634:	429a      	cmp	r2, r3
 8007636:	d004      	beq.n	8007642 <__swbuf_r+0x5a>
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	07db      	lsls	r3, r3, #31
 800763c:	d506      	bpl.n	800764c <__swbuf_r+0x64>
 800763e:	2e0a      	cmp	r6, #10
 8007640:	d104      	bne.n	800764c <__swbuf_r+0x64>
 8007642:	4621      	mov	r1, r4
 8007644:	4628      	mov	r0, r5
 8007646:	f7ff f92b 	bl	80068a0 <_fflush_r>
 800764a:	b938      	cbnz	r0, 800765c <__swbuf_r+0x74>
 800764c:	4638      	mov	r0, r7
 800764e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007650:	4621      	mov	r1, r4
 8007652:	4628      	mov	r0, r5
 8007654:	f000 f806 	bl	8007664 <__swsetup_r>
 8007658:	2800      	cmp	r0, #0
 800765a:	d0d5      	beq.n	8007608 <__swbuf_r+0x20>
 800765c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007660:	e7f4      	b.n	800764c <__swbuf_r+0x64>
	...

08007664 <__swsetup_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4b2a      	ldr	r3, [pc, #168]	; (8007710 <__swsetup_r+0xac>)
 8007668:	4605      	mov	r5, r0
 800766a:	6818      	ldr	r0, [r3, #0]
 800766c:	460c      	mov	r4, r1
 800766e:	b118      	cbz	r0, 8007678 <__swsetup_r+0x14>
 8007670:	6a03      	ldr	r3, [r0, #32]
 8007672:	b90b      	cbnz	r3, 8007678 <__swsetup_r+0x14>
 8007674:	f7fd ff18 	bl	80054a8 <__sinit>
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800767e:	0718      	lsls	r0, r3, #28
 8007680:	d422      	bmi.n	80076c8 <__swsetup_r+0x64>
 8007682:	06d9      	lsls	r1, r3, #27
 8007684:	d407      	bmi.n	8007696 <__swsetup_r+0x32>
 8007686:	2309      	movs	r3, #9
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800768e:	81a3      	strh	r3, [r4, #12]
 8007690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007694:	e034      	b.n	8007700 <__swsetup_r+0x9c>
 8007696:	0758      	lsls	r0, r3, #29
 8007698:	d512      	bpl.n	80076c0 <__swsetup_r+0x5c>
 800769a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800769c:	b141      	cbz	r1, 80076b0 <__swsetup_r+0x4c>
 800769e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076a2:	4299      	cmp	r1, r3
 80076a4:	d002      	beq.n	80076ac <__swsetup_r+0x48>
 80076a6:	4628      	mov	r0, r5
 80076a8:	f7ff fdce 	bl	8007248 <_free_r>
 80076ac:	2300      	movs	r3, #0
 80076ae:	6363      	str	r3, [r4, #52]	; 0x34
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	2300      	movs	r3, #0
 80076ba:	6063      	str	r3, [r4, #4]
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	6023      	str	r3, [r4, #0]
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	f043 0308 	orr.w	r3, r3, #8
 80076c6:	81a3      	strh	r3, [r4, #12]
 80076c8:	6923      	ldr	r3, [r4, #16]
 80076ca:	b94b      	cbnz	r3, 80076e0 <__swsetup_r+0x7c>
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d6:	d003      	beq.n	80076e0 <__swsetup_r+0x7c>
 80076d8:	4621      	mov	r1, r4
 80076da:	4628      	mov	r0, r5
 80076dc:	f000 f840 	bl	8007760 <__smakebuf_r>
 80076e0:	89a0      	ldrh	r0, [r4, #12]
 80076e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076e6:	f010 0301 	ands.w	r3, r0, #1
 80076ea:	d00a      	beq.n	8007702 <__swsetup_r+0x9e>
 80076ec:	2300      	movs	r3, #0
 80076ee:	60a3      	str	r3, [r4, #8]
 80076f0:	6963      	ldr	r3, [r4, #20]
 80076f2:	425b      	negs	r3, r3
 80076f4:	61a3      	str	r3, [r4, #24]
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	b943      	cbnz	r3, 800770c <__swsetup_r+0xa8>
 80076fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076fe:	d1c4      	bne.n	800768a <__swsetup_r+0x26>
 8007700:	bd38      	pop	{r3, r4, r5, pc}
 8007702:	0781      	lsls	r1, r0, #30
 8007704:	bf58      	it	pl
 8007706:	6963      	ldrpl	r3, [r4, #20]
 8007708:	60a3      	str	r3, [r4, #8]
 800770a:	e7f4      	b.n	80076f6 <__swsetup_r+0x92>
 800770c:	2000      	movs	r0, #0
 800770e:	e7f7      	b.n	8007700 <__swsetup_r+0x9c>
 8007710:	2000006c 	.word	0x2000006c

08007714 <__swhatbuf_r>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	460c      	mov	r4, r1
 8007718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800771c:	2900      	cmp	r1, #0
 800771e:	b096      	sub	sp, #88	; 0x58
 8007720:	4615      	mov	r5, r2
 8007722:	461e      	mov	r6, r3
 8007724:	da0d      	bge.n	8007742 <__swhatbuf_r+0x2e>
 8007726:	89a3      	ldrh	r3, [r4, #12]
 8007728:	f013 0f80 	tst.w	r3, #128	; 0x80
 800772c:	f04f 0100 	mov.w	r1, #0
 8007730:	bf0c      	ite	eq
 8007732:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007736:	2340      	movne	r3, #64	; 0x40
 8007738:	2000      	movs	r0, #0
 800773a:	6031      	str	r1, [r6, #0]
 800773c:	602b      	str	r3, [r5, #0]
 800773e:	b016      	add	sp, #88	; 0x58
 8007740:	bd70      	pop	{r4, r5, r6, pc}
 8007742:	466a      	mov	r2, sp
 8007744:	f000 f848 	bl	80077d8 <_fstat_r>
 8007748:	2800      	cmp	r0, #0
 800774a:	dbec      	blt.n	8007726 <__swhatbuf_r+0x12>
 800774c:	9901      	ldr	r1, [sp, #4]
 800774e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007752:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007756:	4259      	negs	r1, r3
 8007758:	4159      	adcs	r1, r3
 800775a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800775e:	e7eb      	b.n	8007738 <__swhatbuf_r+0x24>

08007760 <__smakebuf_r>:
 8007760:	898b      	ldrh	r3, [r1, #12]
 8007762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007764:	079d      	lsls	r5, r3, #30
 8007766:	4606      	mov	r6, r0
 8007768:	460c      	mov	r4, r1
 800776a:	d507      	bpl.n	800777c <__smakebuf_r+0x1c>
 800776c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007770:	6023      	str	r3, [r4, #0]
 8007772:	6123      	str	r3, [r4, #16]
 8007774:	2301      	movs	r3, #1
 8007776:	6163      	str	r3, [r4, #20]
 8007778:	b002      	add	sp, #8
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	ab01      	add	r3, sp, #4
 800777e:	466a      	mov	r2, sp
 8007780:	f7ff ffc8 	bl	8007714 <__swhatbuf_r>
 8007784:	9900      	ldr	r1, [sp, #0]
 8007786:	4605      	mov	r5, r0
 8007788:	4630      	mov	r0, r6
 800778a:	f7fe ff83 	bl	8006694 <_malloc_r>
 800778e:	b948      	cbnz	r0, 80077a4 <__smakebuf_r+0x44>
 8007790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007794:	059a      	lsls	r2, r3, #22
 8007796:	d4ef      	bmi.n	8007778 <__smakebuf_r+0x18>
 8007798:	f023 0303 	bic.w	r3, r3, #3
 800779c:	f043 0302 	orr.w	r3, r3, #2
 80077a0:	81a3      	strh	r3, [r4, #12]
 80077a2:	e7e3      	b.n	800776c <__smakebuf_r+0xc>
 80077a4:	89a3      	ldrh	r3, [r4, #12]
 80077a6:	6020      	str	r0, [r4, #0]
 80077a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ac:	81a3      	strh	r3, [r4, #12]
 80077ae:	9b00      	ldr	r3, [sp, #0]
 80077b0:	6163      	str	r3, [r4, #20]
 80077b2:	9b01      	ldr	r3, [sp, #4]
 80077b4:	6120      	str	r0, [r4, #16]
 80077b6:	b15b      	cbz	r3, 80077d0 <__smakebuf_r+0x70>
 80077b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077bc:	4630      	mov	r0, r6
 80077be:	f000 f81d 	bl	80077fc <_isatty_r>
 80077c2:	b128      	cbz	r0, 80077d0 <__smakebuf_r+0x70>
 80077c4:	89a3      	ldrh	r3, [r4, #12]
 80077c6:	f023 0303 	bic.w	r3, r3, #3
 80077ca:	f043 0301 	orr.w	r3, r3, #1
 80077ce:	81a3      	strh	r3, [r4, #12]
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	431d      	orrs	r5, r3
 80077d4:	81a5      	strh	r5, [r4, #12]
 80077d6:	e7cf      	b.n	8007778 <__smakebuf_r+0x18>

080077d8 <_fstat_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d07      	ldr	r5, [pc, #28]	; (80077f8 <_fstat_r+0x20>)
 80077dc:	2300      	movs	r3, #0
 80077de:	4604      	mov	r4, r0
 80077e0:	4608      	mov	r0, r1
 80077e2:	4611      	mov	r1, r2
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	f7fa ff74 	bl	80026d2 <_fstat>
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	d102      	bne.n	80077f4 <_fstat_r+0x1c>
 80077ee:	682b      	ldr	r3, [r5, #0]
 80077f0:	b103      	cbz	r3, 80077f4 <_fstat_r+0x1c>
 80077f2:	6023      	str	r3, [r4, #0]
 80077f4:	bd38      	pop	{r3, r4, r5, pc}
 80077f6:	bf00      	nop
 80077f8:	20000928 	.word	0x20000928

080077fc <_isatty_r>:
 80077fc:	b538      	push	{r3, r4, r5, lr}
 80077fe:	4d06      	ldr	r5, [pc, #24]	; (8007818 <_isatty_r+0x1c>)
 8007800:	2300      	movs	r3, #0
 8007802:	4604      	mov	r4, r0
 8007804:	4608      	mov	r0, r1
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	f7fa ff73 	bl	80026f2 <_isatty>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_isatty_r+0x1a>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_isatty_r+0x1a>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	20000928 	.word	0x20000928

0800781c <_raise_r>:
 800781c:	291f      	cmp	r1, #31
 800781e:	b538      	push	{r3, r4, r5, lr}
 8007820:	4604      	mov	r4, r0
 8007822:	460d      	mov	r5, r1
 8007824:	d904      	bls.n	8007830 <_raise_r+0x14>
 8007826:	2316      	movs	r3, #22
 8007828:	6003      	str	r3, [r0, #0]
 800782a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007832:	b112      	cbz	r2, 800783a <_raise_r+0x1e>
 8007834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007838:	b94b      	cbnz	r3, 800784e <_raise_r+0x32>
 800783a:	4620      	mov	r0, r4
 800783c:	f000 f830 	bl	80078a0 <_getpid_r>
 8007840:	462a      	mov	r2, r5
 8007842:	4601      	mov	r1, r0
 8007844:	4620      	mov	r0, r4
 8007846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800784a:	f000 b817 	b.w	800787c <_kill_r>
 800784e:	2b01      	cmp	r3, #1
 8007850:	d00a      	beq.n	8007868 <_raise_r+0x4c>
 8007852:	1c59      	adds	r1, r3, #1
 8007854:	d103      	bne.n	800785e <_raise_r+0x42>
 8007856:	2316      	movs	r3, #22
 8007858:	6003      	str	r3, [r0, #0]
 800785a:	2001      	movs	r0, #1
 800785c:	e7e7      	b.n	800782e <_raise_r+0x12>
 800785e:	2400      	movs	r4, #0
 8007860:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007864:	4628      	mov	r0, r5
 8007866:	4798      	blx	r3
 8007868:	2000      	movs	r0, #0
 800786a:	e7e0      	b.n	800782e <_raise_r+0x12>

0800786c <raise>:
 800786c:	4b02      	ldr	r3, [pc, #8]	; (8007878 <raise+0xc>)
 800786e:	4601      	mov	r1, r0
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	f7ff bfd3 	b.w	800781c <_raise_r>
 8007876:	bf00      	nop
 8007878:	2000006c 	.word	0x2000006c

0800787c <_kill_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4d07      	ldr	r5, [pc, #28]	; (800789c <_kill_r+0x20>)
 8007880:	2300      	movs	r3, #0
 8007882:	4604      	mov	r4, r0
 8007884:	4608      	mov	r0, r1
 8007886:	4611      	mov	r1, r2
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	f7fa fec3 	bl	8002614 <_kill>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	d102      	bne.n	8007898 <_kill_r+0x1c>
 8007892:	682b      	ldr	r3, [r5, #0]
 8007894:	b103      	cbz	r3, 8007898 <_kill_r+0x1c>
 8007896:	6023      	str	r3, [r4, #0]
 8007898:	bd38      	pop	{r3, r4, r5, pc}
 800789a:	bf00      	nop
 800789c:	20000928 	.word	0x20000928

080078a0 <_getpid_r>:
 80078a0:	f7fa beb0 	b.w	8002604 <_getpid>

080078a4 <pow>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	ed2d 8b02 	vpush	{d8}
 80078aa:	eeb0 8a40 	vmov.f32	s16, s0
 80078ae:	eef0 8a60 	vmov.f32	s17, s1
 80078b2:	ec55 4b11 	vmov	r4, r5, d1
 80078b6:	f000 f873 	bl	80079a0 <__ieee754_pow>
 80078ba:	4622      	mov	r2, r4
 80078bc:	462b      	mov	r3, r5
 80078be:	4620      	mov	r0, r4
 80078c0:	4629      	mov	r1, r5
 80078c2:	ec57 6b10 	vmov	r6, r7, d0
 80078c6:	f7f9 f939 	bl	8000b3c <__aeabi_dcmpun>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d13b      	bne.n	8007946 <pow+0xa2>
 80078ce:	ec51 0b18 	vmov	r0, r1, d8
 80078d2:	2200      	movs	r2, #0
 80078d4:	2300      	movs	r3, #0
 80078d6:	f7f9 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80078da:	b1b8      	cbz	r0, 800790c <pow+0x68>
 80078dc:	2200      	movs	r2, #0
 80078de:	2300      	movs	r3, #0
 80078e0:	4620      	mov	r0, r4
 80078e2:	4629      	mov	r1, r5
 80078e4:	f7f9 f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d146      	bne.n	800797a <pow+0xd6>
 80078ec:	ec45 4b10 	vmov	d0, r4, r5
 80078f0:	f000 f848 	bl	8007984 <finite>
 80078f4:	b338      	cbz	r0, 8007946 <pow+0xa2>
 80078f6:	2200      	movs	r2, #0
 80078f8:	2300      	movs	r3, #0
 80078fa:	4620      	mov	r0, r4
 80078fc:	4629      	mov	r1, r5
 80078fe:	f7f9 f8f5 	bl	8000aec <__aeabi_dcmplt>
 8007902:	b300      	cbz	r0, 8007946 <pow+0xa2>
 8007904:	f7fd fe9e 	bl	8005644 <__errno>
 8007908:	2322      	movs	r3, #34	; 0x22
 800790a:	e01b      	b.n	8007944 <pow+0xa0>
 800790c:	ec47 6b10 	vmov	d0, r6, r7
 8007910:	f000 f838 	bl	8007984 <finite>
 8007914:	b9e0      	cbnz	r0, 8007950 <pow+0xac>
 8007916:	eeb0 0a48 	vmov.f32	s0, s16
 800791a:	eef0 0a68 	vmov.f32	s1, s17
 800791e:	f000 f831 	bl	8007984 <finite>
 8007922:	b1a8      	cbz	r0, 8007950 <pow+0xac>
 8007924:	ec45 4b10 	vmov	d0, r4, r5
 8007928:	f000 f82c 	bl	8007984 <finite>
 800792c:	b180      	cbz	r0, 8007950 <pow+0xac>
 800792e:	4632      	mov	r2, r6
 8007930:	463b      	mov	r3, r7
 8007932:	4630      	mov	r0, r6
 8007934:	4639      	mov	r1, r7
 8007936:	f7f9 f901 	bl	8000b3c <__aeabi_dcmpun>
 800793a:	2800      	cmp	r0, #0
 800793c:	d0e2      	beq.n	8007904 <pow+0x60>
 800793e:	f7fd fe81 	bl	8005644 <__errno>
 8007942:	2321      	movs	r3, #33	; 0x21
 8007944:	6003      	str	r3, [r0, #0]
 8007946:	ecbd 8b02 	vpop	{d8}
 800794a:	ec47 6b10 	vmov	d0, r6, r7
 800794e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007950:	2200      	movs	r2, #0
 8007952:	2300      	movs	r3, #0
 8007954:	4630      	mov	r0, r6
 8007956:	4639      	mov	r1, r7
 8007958:	f7f9 f8be 	bl	8000ad8 <__aeabi_dcmpeq>
 800795c:	2800      	cmp	r0, #0
 800795e:	d0f2      	beq.n	8007946 <pow+0xa2>
 8007960:	eeb0 0a48 	vmov.f32	s0, s16
 8007964:	eef0 0a68 	vmov.f32	s1, s17
 8007968:	f000 f80c 	bl	8007984 <finite>
 800796c:	2800      	cmp	r0, #0
 800796e:	d0ea      	beq.n	8007946 <pow+0xa2>
 8007970:	ec45 4b10 	vmov	d0, r4, r5
 8007974:	f000 f806 	bl	8007984 <finite>
 8007978:	e7c3      	b.n	8007902 <pow+0x5e>
 800797a:	4f01      	ldr	r7, [pc, #4]	; (8007980 <pow+0xdc>)
 800797c:	2600      	movs	r6, #0
 800797e:	e7e2      	b.n	8007946 <pow+0xa2>
 8007980:	3ff00000 	.word	0x3ff00000

08007984 <finite>:
 8007984:	b082      	sub	sp, #8
 8007986:	ed8d 0b00 	vstr	d0, [sp]
 800798a:	9801      	ldr	r0, [sp, #4]
 800798c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007990:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007994:	0fc0      	lsrs	r0, r0, #31
 8007996:	b002      	add	sp, #8
 8007998:	4770      	bx	lr
 800799a:	0000      	movs	r0, r0
 800799c:	0000      	movs	r0, r0
	...

080079a0 <__ieee754_pow>:
 80079a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	ed2d 8b06 	vpush	{d8-d10}
 80079a8:	b089      	sub	sp, #36	; 0x24
 80079aa:	ed8d 1b00 	vstr	d1, [sp]
 80079ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80079b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80079b6:	ea58 0102 	orrs.w	r1, r8, r2
 80079ba:	ec57 6b10 	vmov	r6, r7, d0
 80079be:	d115      	bne.n	80079ec <__ieee754_pow+0x4c>
 80079c0:	19b3      	adds	r3, r6, r6
 80079c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80079c6:	4152      	adcs	r2, r2
 80079c8:	4299      	cmp	r1, r3
 80079ca:	4b89      	ldr	r3, [pc, #548]	; (8007bf0 <__ieee754_pow+0x250>)
 80079cc:	4193      	sbcs	r3, r2
 80079ce:	f080 84d1 	bcs.w	8008374 <__ieee754_pow+0x9d4>
 80079d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079d6:	4630      	mov	r0, r6
 80079d8:	4639      	mov	r1, r7
 80079da:	f7f8 fc5f 	bl	800029c <__adddf3>
 80079de:	ec41 0b10 	vmov	d0, r0, r1
 80079e2:	b009      	add	sp, #36	; 0x24
 80079e4:	ecbd 8b06 	vpop	{d8-d10}
 80079e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ec:	4b81      	ldr	r3, [pc, #516]	; (8007bf4 <__ieee754_pow+0x254>)
 80079ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80079f2:	429c      	cmp	r4, r3
 80079f4:	ee10 aa10 	vmov	sl, s0
 80079f8:	463d      	mov	r5, r7
 80079fa:	dc06      	bgt.n	8007a0a <__ieee754_pow+0x6a>
 80079fc:	d101      	bne.n	8007a02 <__ieee754_pow+0x62>
 80079fe:	2e00      	cmp	r6, #0
 8007a00:	d1e7      	bne.n	80079d2 <__ieee754_pow+0x32>
 8007a02:	4598      	cmp	r8, r3
 8007a04:	dc01      	bgt.n	8007a0a <__ieee754_pow+0x6a>
 8007a06:	d10f      	bne.n	8007a28 <__ieee754_pow+0x88>
 8007a08:	b172      	cbz	r2, 8007a28 <__ieee754_pow+0x88>
 8007a0a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007a0e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007a12:	ea55 050a 	orrs.w	r5, r5, sl
 8007a16:	d1dc      	bne.n	80079d2 <__ieee754_pow+0x32>
 8007a18:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007a1c:	18db      	adds	r3, r3, r3
 8007a1e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007a22:	4152      	adcs	r2, r2
 8007a24:	429d      	cmp	r5, r3
 8007a26:	e7d0      	b.n	80079ca <__ieee754_pow+0x2a>
 8007a28:	2d00      	cmp	r5, #0
 8007a2a:	da3b      	bge.n	8007aa4 <__ieee754_pow+0x104>
 8007a2c:	4b72      	ldr	r3, [pc, #456]	; (8007bf8 <__ieee754_pow+0x258>)
 8007a2e:	4598      	cmp	r8, r3
 8007a30:	dc51      	bgt.n	8007ad6 <__ieee754_pow+0x136>
 8007a32:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007a36:	4598      	cmp	r8, r3
 8007a38:	f340 84ab 	ble.w	8008392 <__ieee754_pow+0x9f2>
 8007a3c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007a40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007a44:	2b14      	cmp	r3, #20
 8007a46:	dd0f      	ble.n	8007a68 <__ieee754_pow+0xc8>
 8007a48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007a4c:	fa22 f103 	lsr.w	r1, r2, r3
 8007a50:	fa01 f303 	lsl.w	r3, r1, r3
 8007a54:	4293      	cmp	r3, r2
 8007a56:	f040 849c 	bne.w	8008392 <__ieee754_pow+0x9f2>
 8007a5a:	f001 0101 	and.w	r1, r1, #1
 8007a5e:	f1c1 0302 	rsb	r3, r1, #2
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	b182      	cbz	r2, 8007a88 <__ieee754_pow+0xe8>
 8007a66:	e05f      	b.n	8007b28 <__ieee754_pow+0x188>
 8007a68:	2a00      	cmp	r2, #0
 8007a6a:	d15b      	bne.n	8007b24 <__ieee754_pow+0x184>
 8007a6c:	f1c3 0314 	rsb	r3, r3, #20
 8007a70:	fa48 f103 	asr.w	r1, r8, r3
 8007a74:	fa01 f303 	lsl.w	r3, r1, r3
 8007a78:	4543      	cmp	r3, r8
 8007a7a:	f040 8487 	bne.w	800838c <__ieee754_pow+0x9ec>
 8007a7e:	f001 0101 	and.w	r1, r1, #1
 8007a82:	f1c1 0302 	rsb	r3, r1, #2
 8007a86:	9304      	str	r3, [sp, #16]
 8007a88:	4b5c      	ldr	r3, [pc, #368]	; (8007bfc <__ieee754_pow+0x25c>)
 8007a8a:	4598      	cmp	r8, r3
 8007a8c:	d132      	bne.n	8007af4 <__ieee754_pow+0x154>
 8007a8e:	f1b9 0f00 	cmp.w	r9, #0
 8007a92:	f280 8477 	bge.w	8008384 <__ieee754_pow+0x9e4>
 8007a96:	4959      	ldr	r1, [pc, #356]	; (8007bfc <__ieee754_pow+0x25c>)
 8007a98:	4632      	mov	r2, r6
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f7f8 fedd 	bl	800085c <__aeabi_ddiv>
 8007aa2:	e79c      	b.n	80079de <__ieee754_pow+0x3e>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9304      	str	r3, [sp, #16]
 8007aa8:	2a00      	cmp	r2, #0
 8007aaa:	d13d      	bne.n	8007b28 <__ieee754_pow+0x188>
 8007aac:	4b51      	ldr	r3, [pc, #324]	; (8007bf4 <__ieee754_pow+0x254>)
 8007aae:	4598      	cmp	r8, r3
 8007ab0:	d1ea      	bne.n	8007a88 <__ieee754_pow+0xe8>
 8007ab2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007ab6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007aba:	ea53 030a 	orrs.w	r3, r3, sl
 8007abe:	f000 8459 	beq.w	8008374 <__ieee754_pow+0x9d4>
 8007ac2:	4b4f      	ldr	r3, [pc, #316]	; (8007c00 <__ieee754_pow+0x260>)
 8007ac4:	429c      	cmp	r4, r3
 8007ac6:	dd08      	ble.n	8007ada <__ieee754_pow+0x13a>
 8007ac8:	f1b9 0f00 	cmp.w	r9, #0
 8007acc:	f2c0 8456 	blt.w	800837c <__ieee754_pow+0x9dc>
 8007ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ad4:	e783      	b.n	80079de <__ieee754_pow+0x3e>
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	e7e5      	b.n	8007aa6 <__ieee754_pow+0x106>
 8007ada:	f1b9 0f00 	cmp.w	r9, #0
 8007ade:	f04f 0000 	mov.w	r0, #0
 8007ae2:	f04f 0100 	mov.w	r1, #0
 8007ae6:	f6bf af7a 	bge.w	80079de <__ieee754_pow+0x3e>
 8007aea:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007aee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007af2:	e774      	b.n	80079de <__ieee754_pow+0x3e>
 8007af4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007af8:	d106      	bne.n	8007b08 <__ieee754_pow+0x168>
 8007afa:	4632      	mov	r2, r6
 8007afc:	463b      	mov	r3, r7
 8007afe:	4630      	mov	r0, r6
 8007b00:	4639      	mov	r1, r7
 8007b02:	f7f8 fd81 	bl	8000608 <__aeabi_dmul>
 8007b06:	e76a      	b.n	80079de <__ieee754_pow+0x3e>
 8007b08:	4b3e      	ldr	r3, [pc, #248]	; (8007c04 <__ieee754_pow+0x264>)
 8007b0a:	4599      	cmp	r9, r3
 8007b0c:	d10c      	bne.n	8007b28 <__ieee754_pow+0x188>
 8007b0e:	2d00      	cmp	r5, #0
 8007b10:	db0a      	blt.n	8007b28 <__ieee754_pow+0x188>
 8007b12:	ec47 6b10 	vmov	d0, r6, r7
 8007b16:	b009      	add	sp, #36	; 0x24
 8007b18:	ecbd 8b06 	vpop	{d8-d10}
 8007b1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b20:	f000 bd20 	b.w	8008564 <__ieee754_sqrt>
 8007b24:	2300      	movs	r3, #0
 8007b26:	9304      	str	r3, [sp, #16]
 8007b28:	ec47 6b10 	vmov	d0, r6, r7
 8007b2c:	f000 fc92 	bl	8008454 <fabs>
 8007b30:	ec51 0b10 	vmov	r0, r1, d0
 8007b34:	f1ba 0f00 	cmp.w	sl, #0
 8007b38:	d129      	bne.n	8007b8e <__ieee754_pow+0x1ee>
 8007b3a:	b124      	cbz	r4, 8007b46 <__ieee754_pow+0x1a6>
 8007b3c:	4b2f      	ldr	r3, [pc, #188]	; (8007bfc <__ieee754_pow+0x25c>)
 8007b3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d123      	bne.n	8007b8e <__ieee754_pow+0x1ee>
 8007b46:	f1b9 0f00 	cmp.w	r9, #0
 8007b4a:	da05      	bge.n	8007b58 <__ieee754_pow+0x1b8>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	460b      	mov	r3, r1
 8007b50:	2000      	movs	r0, #0
 8007b52:	492a      	ldr	r1, [pc, #168]	; (8007bfc <__ieee754_pow+0x25c>)
 8007b54:	f7f8 fe82 	bl	800085c <__aeabi_ddiv>
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	f6bf af40 	bge.w	80079de <__ieee754_pow+0x3e>
 8007b5e:	9b04      	ldr	r3, [sp, #16]
 8007b60:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007b64:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007b68:	431c      	orrs	r4, r3
 8007b6a:	d108      	bne.n	8007b7e <__ieee754_pow+0x1de>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4610      	mov	r0, r2
 8007b72:	4619      	mov	r1, r3
 8007b74:	f7f8 fb90 	bl	8000298 <__aeabi_dsub>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	e78f      	b.n	8007a9e <__ieee754_pow+0xfe>
 8007b7e:	9b04      	ldr	r3, [sp, #16]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	f47f af2c 	bne.w	80079de <__ieee754_pow+0x3e>
 8007b86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	e727      	b.n	80079de <__ieee754_pow+0x3e>
 8007b8e:	0feb      	lsrs	r3, r5, #31
 8007b90:	3b01      	subs	r3, #1
 8007b92:	9306      	str	r3, [sp, #24]
 8007b94:	9a06      	ldr	r2, [sp, #24]
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	d102      	bne.n	8007ba2 <__ieee754_pow+0x202>
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	e7e6      	b.n	8007b70 <__ieee754_pow+0x1d0>
 8007ba2:	4b19      	ldr	r3, [pc, #100]	; (8007c08 <__ieee754_pow+0x268>)
 8007ba4:	4598      	cmp	r8, r3
 8007ba6:	f340 80fb 	ble.w	8007da0 <__ieee754_pow+0x400>
 8007baa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007bae:	4598      	cmp	r8, r3
 8007bb0:	4b13      	ldr	r3, [pc, #76]	; (8007c00 <__ieee754_pow+0x260>)
 8007bb2:	dd0c      	ble.n	8007bce <__ieee754_pow+0x22e>
 8007bb4:	429c      	cmp	r4, r3
 8007bb6:	dc0f      	bgt.n	8007bd8 <__ieee754_pow+0x238>
 8007bb8:	f1b9 0f00 	cmp.w	r9, #0
 8007bbc:	da0f      	bge.n	8007bde <__ieee754_pow+0x23e>
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	b009      	add	sp, #36	; 0x24
 8007bc2:	ecbd 8b06 	vpop	{d8-d10}
 8007bc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	f000 bc3a 	b.w	8008442 <__math_oflow>
 8007bce:	429c      	cmp	r4, r3
 8007bd0:	dbf2      	blt.n	8007bb8 <__ieee754_pow+0x218>
 8007bd2:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <__ieee754_pow+0x25c>)
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	dd19      	ble.n	8007c0c <__ieee754_pow+0x26c>
 8007bd8:	f1b9 0f00 	cmp.w	r9, #0
 8007bdc:	dcef      	bgt.n	8007bbe <__ieee754_pow+0x21e>
 8007bde:	2000      	movs	r0, #0
 8007be0:	b009      	add	sp, #36	; 0x24
 8007be2:	ecbd 8b06 	vpop	{d8-d10}
 8007be6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bea:	f000 bc21 	b.w	8008430 <__math_uflow>
 8007bee:	bf00      	nop
 8007bf0:	fff00000 	.word	0xfff00000
 8007bf4:	7ff00000 	.word	0x7ff00000
 8007bf8:	433fffff 	.word	0x433fffff
 8007bfc:	3ff00000 	.word	0x3ff00000
 8007c00:	3fefffff 	.word	0x3fefffff
 8007c04:	3fe00000 	.word	0x3fe00000
 8007c08:	41e00000 	.word	0x41e00000
 8007c0c:	4b60      	ldr	r3, [pc, #384]	; (8007d90 <__ieee754_pow+0x3f0>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f7f8 fb42 	bl	8000298 <__aeabi_dsub>
 8007c14:	a354      	add	r3, pc, #336	; (adr r3, 8007d68 <__ieee754_pow+0x3c8>)
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	460d      	mov	r5, r1
 8007c1e:	f7f8 fcf3 	bl	8000608 <__aeabi_dmul>
 8007c22:	a353      	add	r3, pc, #332	; (adr r3, 8007d70 <__ieee754_pow+0x3d0>)
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	4606      	mov	r6, r0
 8007c2a:	460f      	mov	r7, r1
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	4629      	mov	r1, r5
 8007c30:	f7f8 fcea 	bl	8000608 <__aeabi_dmul>
 8007c34:	4b57      	ldr	r3, [pc, #348]	; (8007d94 <__ieee754_pow+0x3f4>)
 8007c36:	4682      	mov	sl, r0
 8007c38:	468b      	mov	fp, r1
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	4629      	mov	r1, r5
 8007c40:	f7f8 fce2 	bl	8000608 <__aeabi_dmul>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	a14b      	add	r1, pc, #300	; (adr r1, 8007d78 <__ieee754_pow+0x3d8>)
 8007c4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c4e:	f7f8 fb23 	bl	8000298 <__aeabi_dsub>
 8007c52:	4622      	mov	r2, r4
 8007c54:	462b      	mov	r3, r5
 8007c56:	f7f8 fcd7 	bl	8000608 <__aeabi_dmul>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	2000      	movs	r0, #0
 8007c60:	494d      	ldr	r1, [pc, #308]	; (8007d98 <__ieee754_pow+0x3f8>)
 8007c62:	f7f8 fb19 	bl	8000298 <__aeabi_dsub>
 8007c66:	4622      	mov	r2, r4
 8007c68:	4680      	mov	r8, r0
 8007c6a:	4689      	mov	r9, r1
 8007c6c:	462b      	mov	r3, r5
 8007c6e:	4620      	mov	r0, r4
 8007c70:	4629      	mov	r1, r5
 8007c72:	f7f8 fcc9 	bl	8000608 <__aeabi_dmul>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	f7f8 fcc3 	bl	8000608 <__aeabi_dmul>
 8007c82:	a33f      	add	r3, pc, #252	; (adr r3, 8007d80 <__ieee754_pow+0x3e0>)
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f7f8 fcbe 	bl	8000608 <__aeabi_dmul>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4650      	mov	r0, sl
 8007c92:	4659      	mov	r1, fp
 8007c94:	f7f8 fb00 	bl	8000298 <__aeabi_dsub>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	4689      	mov	r9, r1
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	f7f8 fafa 	bl	800029c <__adddf3>
 8007ca8:	2000      	movs	r0, #0
 8007caa:	4632      	mov	r2, r6
 8007cac:	463b      	mov	r3, r7
 8007cae:	4604      	mov	r4, r0
 8007cb0:	460d      	mov	r5, r1
 8007cb2:	f7f8 faf1 	bl	8000298 <__aeabi_dsub>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	4640      	mov	r0, r8
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	f7f8 faeb 	bl	8000298 <__aeabi_dsub>
 8007cc2:	9b04      	ldr	r3, [sp, #16]
 8007cc4:	9a06      	ldr	r2, [sp, #24]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	4682      	mov	sl, r0
 8007ccc:	468b      	mov	fp, r1
 8007cce:	f040 81e7 	bne.w	80080a0 <__ieee754_pow+0x700>
 8007cd2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007d88 <__ieee754_pow+0x3e8>
 8007cd6:	eeb0 8a47 	vmov.f32	s16, s14
 8007cda:	eef0 8a67 	vmov.f32	s17, s15
 8007cde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ce2:	2600      	movs	r6, #0
 8007ce4:	4632      	mov	r2, r6
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cec:	f7f8 fad4 	bl	8000298 <__aeabi_dsub>
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	462b      	mov	r3, r5
 8007cf4:	f7f8 fc88 	bl	8000608 <__aeabi_dmul>
 8007cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	4689      	mov	r9, r1
 8007d00:	4650      	mov	r0, sl
 8007d02:	4659      	mov	r1, fp
 8007d04:	f7f8 fc80 	bl	8000608 <__aeabi_dmul>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	4649      	mov	r1, r9
 8007d10:	f7f8 fac4 	bl	800029c <__adddf3>
 8007d14:	4632      	mov	r2, r6
 8007d16:	463b      	mov	r3, r7
 8007d18:	4680      	mov	r8, r0
 8007d1a:	4689      	mov	r9, r1
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	4629      	mov	r1, r5
 8007d20:	f7f8 fc72 	bl	8000608 <__aeabi_dmul>
 8007d24:	460b      	mov	r3, r1
 8007d26:	4604      	mov	r4, r0
 8007d28:	460d      	mov	r5, r1
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	4649      	mov	r1, r9
 8007d2e:	4640      	mov	r0, r8
 8007d30:	f7f8 fab4 	bl	800029c <__adddf3>
 8007d34:	4b19      	ldr	r3, [pc, #100]	; (8007d9c <__ieee754_pow+0x3fc>)
 8007d36:	4299      	cmp	r1, r3
 8007d38:	ec45 4b19 	vmov	d9, r4, r5
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	460f      	mov	r7, r1
 8007d40:	468b      	mov	fp, r1
 8007d42:	f340 82f0 	ble.w	8008326 <__ieee754_pow+0x986>
 8007d46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007d4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007d4e:	4303      	orrs	r3, r0
 8007d50:	f000 81e4 	beq.w	800811c <__ieee754_pow+0x77c>
 8007d54:	ec51 0b18 	vmov	r0, r1, d8
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f7f8 fec6 	bl	8000aec <__aeabi_dcmplt>
 8007d60:	3800      	subs	r0, #0
 8007d62:	bf18      	it	ne
 8007d64:	2001      	movne	r0, #1
 8007d66:	e72b      	b.n	8007bc0 <__ieee754_pow+0x220>
 8007d68:	60000000 	.word	0x60000000
 8007d6c:	3ff71547 	.word	0x3ff71547
 8007d70:	f85ddf44 	.word	0xf85ddf44
 8007d74:	3e54ae0b 	.word	0x3e54ae0b
 8007d78:	55555555 	.word	0x55555555
 8007d7c:	3fd55555 	.word	0x3fd55555
 8007d80:	652b82fe 	.word	0x652b82fe
 8007d84:	3ff71547 	.word	0x3ff71547
 8007d88:	00000000 	.word	0x00000000
 8007d8c:	bff00000 	.word	0xbff00000
 8007d90:	3ff00000 	.word	0x3ff00000
 8007d94:	3fd00000 	.word	0x3fd00000
 8007d98:	3fe00000 	.word	0x3fe00000
 8007d9c:	408fffff 	.word	0x408fffff
 8007da0:	4bd5      	ldr	r3, [pc, #852]	; (80080f8 <__ieee754_pow+0x758>)
 8007da2:	402b      	ands	r3, r5
 8007da4:	2200      	movs	r2, #0
 8007da6:	b92b      	cbnz	r3, 8007db4 <__ieee754_pow+0x414>
 8007da8:	4bd4      	ldr	r3, [pc, #848]	; (80080fc <__ieee754_pow+0x75c>)
 8007daa:	f7f8 fc2d 	bl	8000608 <__aeabi_dmul>
 8007dae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007db2:	460c      	mov	r4, r1
 8007db4:	1523      	asrs	r3, r4, #20
 8007db6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007dba:	4413      	add	r3, r2
 8007dbc:	9305      	str	r3, [sp, #20]
 8007dbe:	4bd0      	ldr	r3, [pc, #832]	; (8008100 <__ieee754_pow+0x760>)
 8007dc0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007dc4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007dce:	dd08      	ble.n	8007de2 <__ieee754_pow+0x442>
 8007dd0:	4bcc      	ldr	r3, [pc, #816]	; (8008104 <__ieee754_pow+0x764>)
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	f340 8162 	ble.w	800809c <__ieee754_pow+0x6fc>
 8007dd8:	9b05      	ldr	r3, [sp, #20]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	9305      	str	r3, [sp, #20]
 8007dde:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007de2:	2400      	movs	r4, #0
 8007de4:	00e3      	lsls	r3, r4, #3
 8007de6:	9307      	str	r3, [sp, #28]
 8007de8:	4bc7      	ldr	r3, [pc, #796]	; (8008108 <__ieee754_pow+0x768>)
 8007dea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007dee:	ed93 7b00 	vldr	d7, [r3]
 8007df2:	4629      	mov	r1, r5
 8007df4:	ec53 2b17 	vmov	r2, r3, d7
 8007df8:	eeb0 9a47 	vmov.f32	s18, s14
 8007dfc:	eef0 9a67 	vmov.f32	s19, s15
 8007e00:	4682      	mov	sl, r0
 8007e02:	f7f8 fa49 	bl	8000298 <__aeabi_dsub>
 8007e06:	4652      	mov	r2, sl
 8007e08:	4606      	mov	r6, r0
 8007e0a:	460f      	mov	r7, r1
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	ec51 0b19 	vmov	r0, r1, d9
 8007e12:	f7f8 fa43 	bl	800029c <__adddf3>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	49bb      	ldr	r1, [pc, #748]	; (800810c <__ieee754_pow+0x76c>)
 8007e1e:	f7f8 fd1d 	bl	800085c <__aeabi_ddiv>
 8007e22:	ec41 0b1a 	vmov	d10, r0, r1
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	f7f8 fbeb 	bl	8000608 <__aeabi_dmul>
 8007e32:	2300      	movs	r3, #0
 8007e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e38:	9302      	str	r3, [sp, #8]
 8007e3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e3e:	46ab      	mov	fp, r5
 8007e40:	106d      	asrs	r5, r5, #1
 8007e42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007e46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007e4a:	ec41 0b18 	vmov	d8, r0, r1
 8007e4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007e52:	2200      	movs	r2, #0
 8007e54:	4640      	mov	r0, r8
 8007e56:	4649      	mov	r1, r9
 8007e58:	4614      	mov	r4, r2
 8007e5a:	461d      	mov	r5, r3
 8007e5c:	f7f8 fbd4 	bl	8000608 <__aeabi_dmul>
 8007e60:	4602      	mov	r2, r0
 8007e62:	460b      	mov	r3, r1
 8007e64:	4630      	mov	r0, r6
 8007e66:	4639      	mov	r1, r7
 8007e68:	f7f8 fa16 	bl	8000298 <__aeabi_dsub>
 8007e6c:	ec53 2b19 	vmov	r2, r3, d9
 8007e70:	4606      	mov	r6, r0
 8007e72:	460f      	mov	r7, r1
 8007e74:	4620      	mov	r0, r4
 8007e76:	4629      	mov	r1, r5
 8007e78:	f7f8 fa0e 	bl	8000298 <__aeabi_dsub>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4650      	mov	r0, sl
 8007e82:	4659      	mov	r1, fp
 8007e84:	f7f8 fa08 	bl	8000298 <__aeabi_dsub>
 8007e88:	4642      	mov	r2, r8
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	f7f8 fbbc 	bl	8000608 <__aeabi_dmul>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4630      	mov	r0, r6
 8007e96:	4639      	mov	r1, r7
 8007e98:	f7f8 f9fe 	bl	8000298 <__aeabi_dsub>
 8007e9c:	ec53 2b1a 	vmov	r2, r3, d10
 8007ea0:	f7f8 fbb2 	bl	8000608 <__aeabi_dmul>
 8007ea4:	ec53 2b18 	vmov	r2, r3, d8
 8007ea8:	ec41 0b19 	vmov	d9, r0, r1
 8007eac:	ec51 0b18 	vmov	r0, r1, d8
 8007eb0:	f7f8 fbaa 	bl	8000608 <__aeabi_dmul>
 8007eb4:	a37c      	add	r3, pc, #496	; (adr r3, 80080a8 <__ieee754_pow+0x708>)
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	4604      	mov	r4, r0
 8007ebc:	460d      	mov	r5, r1
 8007ebe:	f7f8 fba3 	bl	8000608 <__aeabi_dmul>
 8007ec2:	a37b      	add	r3, pc, #492	; (adr r3, 80080b0 <__ieee754_pow+0x710>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 f9e8 	bl	800029c <__adddf3>
 8007ecc:	4622      	mov	r2, r4
 8007ece:	462b      	mov	r3, r5
 8007ed0:	f7f8 fb9a 	bl	8000608 <__aeabi_dmul>
 8007ed4:	a378      	add	r3, pc, #480	; (adr r3, 80080b8 <__ieee754_pow+0x718>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 f9df 	bl	800029c <__adddf3>
 8007ede:	4622      	mov	r2, r4
 8007ee0:	462b      	mov	r3, r5
 8007ee2:	f7f8 fb91 	bl	8000608 <__aeabi_dmul>
 8007ee6:	a376      	add	r3, pc, #472	; (adr r3, 80080c0 <__ieee754_pow+0x720>)
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	f7f8 f9d6 	bl	800029c <__adddf3>
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	462b      	mov	r3, r5
 8007ef4:	f7f8 fb88 	bl	8000608 <__aeabi_dmul>
 8007ef8:	a373      	add	r3, pc, #460	; (adr r3, 80080c8 <__ieee754_pow+0x728>)
 8007efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efe:	f7f8 f9cd 	bl	800029c <__adddf3>
 8007f02:	4622      	mov	r2, r4
 8007f04:	462b      	mov	r3, r5
 8007f06:	f7f8 fb7f 	bl	8000608 <__aeabi_dmul>
 8007f0a:	a371      	add	r3, pc, #452	; (adr r3, 80080d0 <__ieee754_pow+0x730>)
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	f7f8 f9c4 	bl	800029c <__adddf3>
 8007f14:	4622      	mov	r2, r4
 8007f16:	4606      	mov	r6, r0
 8007f18:	460f      	mov	r7, r1
 8007f1a:	462b      	mov	r3, r5
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f7f8 fb72 	bl	8000608 <__aeabi_dmul>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4630      	mov	r0, r6
 8007f2a:	4639      	mov	r1, r7
 8007f2c:	f7f8 fb6c 	bl	8000608 <__aeabi_dmul>
 8007f30:	4642      	mov	r2, r8
 8007f32:	4604      	mov	r4, r0
 8007f34:	460d      	mov	r5, r1
 8007f36:	464b      	mov	r3, r9
 8007f38:	ec51 0b18 	vmov	r0, r1, d8
 8007f3c:	f7f8 f9ae 	bl	800029c <__adddf3>
 8007f40:	ec53 2b19 	vmov	r2, r3, d9
 8007f44:	f7f8 fb60 	bl	8000608 <__aeabi_dmul>
 8007f48:	4622      	mov	r2, r4
 8007f4a:	462b      	mov	r3, r5
 8007f4c:	f7f8 f9a6 	bl	800029c <__adddf3>
 8007f50:	4642      	mov	r2, r8
 8007f52:	4682      	mov	sl, r0
 8007f54:	468b      	mov	fp, r1
 8007f56:	464b      	mov	r3, r9
 8007f58:	4640      	mov	r0, r8
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	f7f8 fb54 	bl	8000608 <__aeabi_dmul>
 8007f60:	4b6b      	ldr	r3, [pc, #428]	; (8008110 <__ieee754_pow+0x770>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	4606      	mov	r6, r0
 8007f66:	460f      	mov	r7, r1
 8007f68:	f7f8 f998 	bl	800029c <__adddf3>
 8007f6c:	4652      	mov	r2, sl
 8007f6e:	465b      	mov	r3, fp
 8007f70:	f7f8 f994 	bl	800029c <__adddf3>
 8007f74:	2000      	movs	r0, #0
 8007f76:	4604      	mov	r4, r0
 8007f78:	460d      	mov	r5, r1
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4640      	mov	r0, r8
 8007f80:	4649      	mov	r1, r9
 8007f82:	f7f8 fb41 	bl	8000608 <__aeabi_dmul>
 8007f86:	4b62      	ldr	r3, [pc, #392]	; (8008110 <__ieee754_pow+0x770>)
 8007f88:	4680      	mov	r8, r0
 8007f8a:	4689      	mov	r9, r1
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4620      	mov	r0, r4
 8007f90:	4629      	mov	r1, r5
 8007f92:	f7f8 f981 	bl	8000298 <__aeabi_dsub>
 8007f96:	4632      	mov	r2, r6
 8007f98:	463b      	mov	r3, r7
 8007f9a:	f7f8 f97d 	bl	8000298 <__aeabi_dsub>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	4659      	mov	r1, fp
 8007fa6:	f7f8 f977 	bl	8000298 <__aeabi_dsub>
 8007faa:	ec53 2b18 	vmov	r2, r3, d8
 8007fae:	f7f8 fb2b 	bl	8000608 <__aeabi_dmul>
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	460f      	mov	r7, r1
 8007fb8:	462b      	mov	r3, r5
 8007fba:	ec51 0b19 	vmov	r0, r1, d9
 8007fbe:	f7f8 fb23 	bl	8000608 <__aeabi_dmul>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 f967 	bl	800029c <__adddf3>
 8007fce:	4606      	mov	r6, r0
 8007fd0:	460f      	mov	r7, r1
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	4649      	mov	r1, r9
 8007fda:	f7f8 f95f 	bl	800029c <__adddf3>
 8007fde:	a33e      	add	r3, pc, #248	; (adr r3, 80080d8 <__ieee754_pow+0x738>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	460d      	mov	r5, r1
 8007fea:	f7f8 fb0d 	bl	8000608 <__aeabi_dmul>
 8007fee:	4642      	mov	r2, r8
 8007ff0:	ec41 0b18 	vmov	d8, r0, r1
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f7f8 f94d 	bl	8000298 <__aeabi_dsub>
 8007ffe:	4602      	mov	r2, r0
 8008000:	460b      	mov	r3, r1
 8008002:	4630      	mov	r0, r6
 8008004:	4639      	mov	r1, r7
 8008006:	f7f8 f947 	bl	8000298 <__aeabi_dsub>
 800800a:	a335      	add	r3, pc, #212	; (adr r3, 80080e0 <__ieee754_pow+0x740>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f7f8 fafa 	bl	8000608 <__aeabi_dmul>
 8008014:	a334      	add	r3, pc, #208	; (adr r3, 80080e8 <__ieee754_pow+0x748>)
 8008016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801a:	4606      	mov	r6, r0
 800801c:	460f      	mov	r7, r1
 800801e:	4620      	mov	r0, r4
 8008020:	4629      	mov	r1, r5
 8008022:	f7f8 faf1 	bl	8000608 <__aeabi_dmul>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4630      	mov	r0, r6
 800802c:	4639      	mov	r1, r7
 800802e:	f7f8 f935 	bl	800029c <__adddf3>
 8008032:	9a07      	ldr	r2, [sp, #28]
 8008034:	4b37      	ldr	r3, [pc, #220]	; (8008114 <__ieee754_pow+0x774>)
 8008036:	4413      	add	r3, r2
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f7f8 f92e 	bl	800029c <__adddf3>
 8008040:	4682      	mov	sl, r0
 8008042:	9805      	ldr	r0, [sp, #20]
 8008044:	468b      	mov	fp, r1
 8008046:	f7f8 fa75 	bl	8000534 <__aeabi_i2d>
 800804a:	9a07      	ldr	r2, [sp, #28]
 800804c:	4b32      	ldr	r3, [pc, #200]	; (8008118 <__ieee754_pow+0x778>)
 800804e:	4413      	add	r3, r2
 8008050:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008054:	4606      	mov	r6, r0
 8008056:	460f      	mov	r7, r1
 8008058:	4652      	mov	r2, sl
 800805a:	465b      	mov	r3, fp
 800805c:	ec51 0b18 	vmov	r0, r1, d8
 8008060:	f7f8 f91c 	bl	800029c <__adddf3>
 8008064:	4642      	mov	r2, r8
 8008066:	464b      	mov	r3, r9
 8008068:	f7f8 f918 	bl	800029c <__adddf3>
 800806c:	4632      	mov	r2, r6
 800806e:	463b      	mov	r3, r7
 8008070:	f7f8 f914 	bl	800029c <__adddf3>
 8008074:	2000      	movs	r0, #0
 8008076:	4632      	mov	r2, r6
 8008078:	463b      	mov	r3, r7
 800807a:	4604      	mov	r4, r0
 800807c:	460d      	mov	r5, r1
 800807e:	f7f8 f90b 	bl	8000298 <__aeabi_dsub>
 8008082:	4642      	mov	r2, r8
 8008084:	464b      	mov	r3, r9
 8008086:	f7f8 f907 	bl	8000298 <__aeabi_dsub>
 800808a:	ec53 2b18 	vmov	r2, r3, d8
 800808e:	f7f8 f903 	bl	8000298 <__aeabi_dsub>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4650      	mov	r0, sl
 8008098:	4659      	mov	r1, fp
 800809a:	e610      	b.n	8007cbe <__ieee754_pow+0x31e>
 800809c:	2401      	movs	r4, #1
 800809e:	e6a1      	b.n	8007de4 <__ieee754_pow+0x444>
 80080a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80080f0 <__ieee754_pow+0x750>
 80080a4:	e617      	b.n	8007cd6 <__ieee754_pow+0x336>
 80080a6:	bf00      	nop
 80080a8:	4a454eef 	.word	0x4a454eef
 80080ac:	3fca7e28 	.word	0x3fca7e28
 80080b0:	93c9db65 	.word	0x93c9db65
 80080b4:	3fcd864a 	.word	0x3fcd864a
 80080b8:	a91d4101 	.word	0xa91d4101
 80080bc:	3fd17460 	.word	0x3fd17460
 80080c0:	518f264d 	.word	0x518f264d
 80080c4:	3fd55555 	.word	0x3fd55555
 80080c8:	db6fabff 	.word	0xdb6fabff
 80080cc:	3fdb6db6 	.word	0x3fdb6db6
 80080d0:	33333303 	.word	0x33333303
 80080d4:	3fe33333 	.word	0x3fe33333
 80080d8:	e0000000 	.word	0xe0000000
 80080dc:	3feec709 	.word	0x3feec709
 80080e0:	dc3a03fd 	.word	0xdc3a03fd
 80080e4:	3feec709 	.word	0x3feec709
 80080e8:	145b01f5 	.word	0x145b01f5
 80080ec:	be3e2fe0 	.word	0xbe3e2fe0
 80080f0:	00000000 	.word	0x00000000
 80080f4:	3ff00000 	.word	0x3ff00000
 80080f8:	7ff00000 	.word	0x7ff00000
 80080fc:	43400000 	.word	0x43400000
 8008100:	0003988e 	.word	0x0003988e
 8008104:	000bb679 	.word	0x000bb679
 8008108:	08008b68 	.word	0x08008b68
 800810c:	3ff00000 	.word	0x3ff00000
 8008110:	40080000 	.word	0x40080000
 8008114:	08008b88 	.word	0x08008b88
 8008118:	08008b78 	.word	0x08008b78
 800811c:	a3b3      	add	r3, pc, #716	; (adr r3, 80083ec <__ieee754_pow+0xa4c>)
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	4640      	mov	r0, r8
 8008124:	4649      	mov	r1, r9
 8008126:	f7f8 f8b9 	bl	800029c <__adddf3>
 800812a:	4622      	mov	r2, r4
 800812c:	ec41 0b1a 	vmov	d10, r0, r1
 8008130:	462b      	mov	r3, r5
 8008132:	4630      	mov	r0, r6
 8008134:	4639      	mov	r1, r7
 8008136:	f7f8 f8af 	bl	8000298 <__aeabi_dsub>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	ec51 0b1a 	vmov	r0, r1, d10
 8008142:	f7f8 fcf1 	bl	8000b28 <__aeabi_dcmpgt>
 8008146:	2800      	cmp	r0, #0
 8008148:	f47f ae04 	bne.w	8007d54 <__ieee754_pow+0x3b4>
 800814c:	4aa2      	ldr	r2, [pc, #648]	; (80083d8 <__ieee754_pow+0xa38>)
 800814e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008152:	4293      	cmp	r3, r2
 8008154:	f340 8107 	ble.w	8008366 <__ieee754_pow+0x9c6>
 8008158:	151b      	asrs	r3, r3, #20
 800815a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800815e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008162:	fa4a fa03 	asr.w	sl, sl, r3
 8008166:	44da      	add	sl, fp
 8008168:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800816c:	489b      	ldr	r0, [pc, #620]	; (80083dc <__ieee754_pow+0xa3c>)
 800816e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008172:	4108      	asrs	r0, r1
 8008174:	ea00 030a 	and.w	r3, r0, sl
 8008178:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800817c:	f1c1 0114 	rsb	r1, r1, #20
 8008180:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008184:	fa4a fa01 	asr.w	sl, sl, r1
 8008188:	f1bb 0f00 	cmp.w	fp, #0
 800818c:	f04f 0200 	mov.w	r2, #0
 8008190:	4620      	mov	r0, r4
 8008192:	4629      	mov	r1, r5
 8008194:	bfb8      	it	lt
 8008196:	f1ca 0a00 	rsblt	sl, sl, #0
 800819a:	f7f8 f87d 	bl	8000298 <__aeabi_dsub>
 800819e:	ec41 0b19 	vmov	d9, r0, r1
 80081a2:	4642      	mov	r2, r8
 80081a4:	464b      	mov	r3, r9
 80081a6:	ec51 0b19 	vmov	r0, r1, d9
 80081aa:	f7f8 f877 	bl	800029c <__adddf3>
 80081ae:	a37a      	add	r3, pc, #488	; (adr r3, 8008398 <__ieee754_pow+0x9f8>)
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	2000      	movs	r0, #0
 80081b6:	4604      	mov	r4, r0
 80081b8:	460d      	mov	r5, r1
 80081ba:	f7f8 fa25 	bl	8000608 <__aeabi_dmul>
 80081be:	ec53 2b19 	vmov	r2, r3, d9
 80081c2:	4606      	mov	r6, r0
 80081c4:	460f      	mov	r7, r1
 80081c6:	4620      	mov	r0, r4
 80081c8:	4629      	mov	r1, r5
 80081ca:	f7f8 f865 	bl	8000298 <__aeabi_dsub>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4640      	mov	r0, r8
 80081d4:	4649      	mov	r1, r9
 80081d6:	f7f8 f85f 	bl	8000298 <__aeabi_dsub>
 80081da:	a371      	add	r3, pc, #452	; (adr r3, 80083a0 <__ieee754_pow+0xa00>)
 80081dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e0:	f7f8 fa12 	bl	8000608 <__aeabi_dmul>
 80081e4:	a370      	add	r3, pc, #448	; (adr r3, 80083a8 <__ieee754_pow+0xa08>)
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	4680      	mov	r8, r0
 80081ec:	4689      	mov	r9, r1
 80081ee:	4620      	mov	r0, r4
 80081f0:	4629      	mov	r1, r5
 80081f2:	f7f8 fa09 	bl	8000608 <__aeabi_dmul>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4640      	mov	r0, r8
 80081fc:	4649      	mov	r1, r9
 80081fe:	f7f8 f84d 	bl	800029c <__adddf3>
 8008202:	4604      	mov	r4, r0
 8008204:	460d      	mov	r5, r1
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	4630      	mov	r0, r6
 800820c:	4639      	mov	r1, r7
 800820e:	f7f8 f845 	bl	800029c <__adddf3>
 8008212:	4632      	mov	r2, r6
 8008214:	463b      	mov	r3, r7
 8008216:	4680      	mov	r8, r0
 8008218:	4689      	mov	r9, r1
 800821a:	f7f8 f83d 	bl	8000298 <__aeabi_dsub>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4620      	mov	r0, r4
 8008224:	4629      	mov	r1, r5
 8008226:	f7f8 f837 	bl	8000298 <__aeabi_dsub>
 800822a:	4642      	mov	r2, r8
 800822c:	4606      	mov	r6, r0
 800822e:	460f      	mov	r7, r1
 8008230:	464b      	mov	r3, r9
 8008232:	4640      	mov	r0, r8
 8008234:	4649      	mov	r1, r9
 8008236:	f7f8 f9e7 	bl	8000608 <__aeabi_dmul>
 800823a:	a35d      	add	r3, pc, #372	; (adr r3, 80083b0 <__ieee754_pow+0xa10>)
 800823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008240:	4604      	mov	r4, r0
 8008242:	460d      	mov	r5, r1
 8008244:	f7f8 f9e0 	bl	8000608 <__aeabi_dmul>
 8008248:	a35b      	add	r3, pc, #364	; (adr r3, 80083b8 <__ieee754_pow+0xa18>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f7f8 f823 	bl	8000298 <__aeabi_dsub>
 8008252:	4622      	mov	r2, r4
 8008254:	462b      	mov	r3, r5
 8008256:	f7f8 f9d7 	bl	8000608 <__aeabi_dmul>
 800825a:	a359      	add	r3, pc, #356	; (adr r3, 80083c0 <__ieee754_pow+0xa20>)
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f7f8 f81c 	bl	800029c <__adddf3>
 8008264:	4622      	mov	r2, r4
 8008266:	462b      	mov	r3, r5
 8008268:	f7f8 f9ce 	bl	8000608 <__aeabi_dmul>
 800826c:	a356      	add	r3, pc, #344	; (adr r3, 80083c8 <__ieee754_pow+0xa28>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	f7f8 f811 	bl	8000298 <__aeabi_dsub>
 8008276:	4622      	mov	r2, r4
 8008278:	462b      	mov	r3, r5
 800827a:	f7f8 f9c5 	bl	8000608 <__aeabi_dmul>
 800827e:	a354      	add	r3, pc, #336	; (adr r3, 80083d0 <__ieee754_pow+0xa30>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f7f8 f80a 	bl	800029c <__adddf3>
 8008288:	4622      	mov	r2, r4
 800828a:	462b      	mov	r3, r5
 800828c:	f7f8 f9bc 	bl	8000608 <__aeabi_dmul>
 8008290:	4602      	mov	r2, r0
 8008292:	460b      	mov	r3, r1
 8008294:	4640      	mov	r0, r8
 8008296:	4649      	mov	r1, r9
 8008298:	f7f7 fffe 	bl	8000298 <__aeabi_dsub>
 800829c:	4604      	mov	r4, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4640      	mov	r0, r8
 80082a6:	4649      	mov	r1, r9
 80082a8:	f7f8 f9ae 	bl	8000608 <__aeabi_dmul>
 80082ac:	2200      	movs	r2, #0
 80082ae:	ec41 0b19 	vmov	d9, r0, r1
 80082b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80082b6:	4620      	mov	r0, r4
 80082b8:	4629      	mov	r1, r5
 80082ba:	f7f7 ffed 	bl	8000298 <__aeabi_dsub>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	ec51 0b19 	vmov	r0, r1, d9
 80082c6:	f7f8 fac9 	bl	800085c <__aeabi_ddiv>
 80082ca:	4632      	mov	r2, r6
 80082cc:	4604      	mov	r4, r0
 80082ce:	460d      	mov	r5, r1
 80082d0:	463b      	mov	r3, r7
 80082d2:	4640      	mov	r0, r8
 80082d4:	4649      	mov	r1, r9
 80082d6:	f7f8 f997 	bl	8000608 <__aeabi_dmul>
 80082da:	4632      	mov	r2, r6
 80082dc:	463b      	mov	r3, r7
 80082de:	f7f7 ffdd 	bl	800029c <__adddf3>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	4620      	mov	r0, r4
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f7 ffd5 	bl	8000298 <__aeabi_dsub>
 80082ee:	4642      	mov	r2, r8
 80082f0:	464b      	mov	r3, r9
 80082f2:	f7f7 ffd1 	bl	8000298 <__aeabi_dsub>
 80082f6:	460b      	mov	r3, r1
 80082f8:	4602      	mov	r2, r0
 80082fa:	4939      	ldr	r1, [pc, #228]	; (80083e0 <__ieee754_pow+0xa40>)
 80082fc:	2000      	movs	r0, #0
 80082fe:	f7f7 ffcb 	bl	8000298 <__aeabi_dsub>
 8008302:	ec41 0b10 	vmov	d0, r0, r1
 8008306:	ee10 3a90 	vmov	r3, s1
 800830a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800830e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008312:	da2b      	bge.n	800836c <__ieee754_pow+0x9cc>
 8008314:	4650      	mov	r0, sl
 8008316:	f000 f8a7 	bl	8008468 <scalbn>
 800831a:	ec51 0b10 	vmov	r0, r1, d0
 800831e:	ec53 2b18 	vmov	r2, r3, d8
 8008322:	f7ff bbee 	b.w	8007b02 <__ieee754_pow+0x162>
 8008326:	4b2f      	ldr	r3, [pc, #188]	; (80083e4 <__ieee754_pow+0xa44>)
 8008328:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800832c:	429e      	cmp	r6, r3
 800832e:	f77f af0d 	ble.w	800814c <__ieee754_pow+0x7ac>
 8008332:	4b2d      	ldr	r3, [pc, #180]	; (80083e8 <__ieee754_pow+0xa48>)
 8008334:	440b      	add	r3, r1
 8008336:	4303      	orrs	r3, r0
 8008338:	d009      	beq.n	800834e <__ieee754_pow+0x9ae>
 800833a:	ec51 0b18 	vmov	r0, r1, d8
 800833e:	2200      	movs	r2, #0
 8008340:	2300      	movs	r3, #0
 8008342:	f7f8 fbd3 	bl	8000aec <__aeabi_dcmplt>
 8008346:	3800      	subs	r0, #0
 8008348:	bf18      	it	ne
 800834a:	2001      	movne	r0, #1
 800834c:	e448      	b.n	8007be0 <__ieee754_pow+0x240>
 800834e:	4622      	mov	r2, r4
 8008350:	462b      	mov	r3, r5
 8008352:	f7f7 ffa1 	bl	8000298 <__aeabi_dsub>
 8008356:	4642      	mov	r2, r8
 8008358:	464b      	mov	r3, r9
 800835a:	f7f8 fbdb 	bl	8000b14 <__aeabi_dcmpge>
 800835e:	2800      	cmp	r0, #0
 8008360:	f43f aef4 	beq.w	800814c <__ieee754_pow+0x7ac>
 8008364:	e7e9      	b.n	800833a <__ieee754_pow+0x99a>
 8008366:	f04f 0a00 	mov.w	sl, #0
 800836a:	e71a      	b.n	80081a2 <__ieee754_pow+0x802>
 800836c:	ec51 0b10 	vmov	r0, r1, d0
 8008370:	4619      	mov	r1, r3
 8008372:	e7d4      	b.n	800831e <__ieee754_pow+0x97e>
 8008374:	491a      	ldr	r1, [pc, #104]	; (80083e0 <__ieee754_pow+0xa40>)
 8008376:	2000      	movs	r0, #0
 8008378:	f7ff bb31 	b.w	80079de <__ieee754_pow+0x3e>
 800837c:	2000      	movs	r0, #0
 800837e:	2100      	movs	r1, #0
 8008380:	f7ff bb2d 	b.w	80079de <__ieee754_pow+0x3e>
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7ff bb29 	b.w	80079de <__ieee754_pow+0x3e>
 800838c:	9204      	str	r2, [sp, #16]
 800838e:	f7ff bb7b 	b.w	8007a88 <__ieee754_pow+0xe8>
 8008392:	2300      	movs	r3, #0
 8008394:	f7ff bb65 	b.w	8007a62 <__ieee754_pow+0xc2>
 8008398:	00000000 	.word	0x00000000
 800839c:	3fe62e43 	.word	0x3fe62e43
 80083a0:	fefa39ef 	.word	0xfefa39ef
 80083a4:	3fe62e42 	.word	0x3fe62e42
 80083a8:	0ca86c39 	.word	0x0ca86c39
 80083ac:	be205c61 	.word	0xbe205c61
 80083b0:	72bea4d0 	.word	0x72bea4d0
 80083b4:	3e663769 	.word	0x3e663769
 80083b8:	c5d26bf1 	.word	0xc5d26bf1
 80083bc:	3ebbbd41 	.word	0x3ebbbd41
 80083c0:	af25de2c 	.word	0xaf25de2c
 80083c4:	3f11566a 	.word	0x3f11566a
 80083c8:	16bebd93 	.word	0x16bebd93
 80083cc:	3f66c16c 	.word	0x3f66c16c
 80083d0:	5555553e 	.word	0x5555553e
 80083d4:	3fc55555 	.word	0x3fc55555
 80083d8:	3fe00000 	.word	0x3fe00000
 80083dc:	fff00000 	.word	0xfff00000
 80083e0:	3ff00000 	.word	0x3ff00000
 80083e4:	4090cbff 	.word	0x4090cbff
 80083e8:	3f6f3400 	.word	0x3f6f3400
 80083ec:	652b82fe 	.word	0x652b82fe
 80083f0:	3c971547 	.word	0x3c971547

080083f4 <with_errno>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	4604      	mov	r4, r0
 80083f8:	460d      	mov	r5, r1
 80083fa:	4616      	mov	r6, r2
 80083fc:	f7fd f922 	bl	8005644 <__errno>
 8008400:	4629      	mov	r1, r5
 8008402:	6006      	str	r6, [r0, #0]
 8008404:	4620      	mov	r0, r4
 8008406:	bd70      	pop	{r4, r5, r6, pc}

08008408 <xflow>:
 8008408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800840a:	4614      	mov	r4, r2
 800840c:	461d      	mov	r5, r3
 800840e:	b108      	cbz	r0, 8008414 <xflow+0xc>
 8008410:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008414:	e9cd 2300 	strd	r2, r3, [sp]
 8008418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800841c:	4620      	mov	r0, r4
 800841e:	4629      	mov	r1, r5
 8008420:	f7f8 f8f2 	bl	8000608 <__aeabi_dmul>
 8008424:	2222      	movs	r2, #34	; 0x22
 8008426:	b003      	add	sp, #12
 8008428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800842c:	f7ff bfe2 	b.w	80083f4 <with_errno>

08008430 <__math_uflow>:
 8008430:	b508      	push	{r3, lr}
 8008432:	2200      	movs	r2, #0
 8008434:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008438:	f7ff ffe6 	bl	8008408 <xflow>
 800843c:	ec41 0b10 	vmov	d0, r0, r1
 8008440:	bd08      	pop	{r3, pc}

08008442 <__math_oflow>:
 8008442:	b508      	push	{r3, lr}
 8008444:	2200      	movs	r2, #0
 8008446:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800844a:	f7ff ffdd 	bl	8008408 <xflow>
 800844e:	ec41 0b10 	vmov	d0, r0, r1
 8008452:	bd08      	pop	{r3, pc}

08008454 <fabs>:
 8008454:	ec51 0b10 	vmov	r0, r1, d0
 8008458:	ee10 2a10 	vmov	r2, s0
 800845c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008460:	ec43 2b10 	vmov	d0, r2, r3
 8008464:	4770      	bx	lr
	...

08008468 <scalbn>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	ec55 4b10 	vmov	r4, r5, d0
 800846e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008472:	4606      	mov	r6, r0
 8008474:	462b      	mov	r3, r5
 8008476:	b999      	cbnz	r1, 80084a0 <scalbn+0x38>
 8008478:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800847c:	4323      	orrs	r3, r4
 800847e:	d03f      	beq.n	8008500 <scalbn+0x98>
 8008480:	4b35      	ldr	r3, [pc, #212]	; (8008558 <scalbn+0xf0>)
 8008482:	4629      	mov	r1, r5
 8008484:	ee10 0a10 	vmov	r0, s0
 8008488:	2200      	movs	r2, #0
 800848a:	f7f8 f8bd 	bl	8000608 <__aeabi_dmul>
 800848e:	4b33      	ldr	r3, [pc, #204]	; (800855c <scalbn+0xf4>)
 8008490:	429e      	cmp	r6, r3
 8008492:	4604      	mov	r4, r0
 8008494:	460d      	mov	r5, r1
 8008496:	da10      	bge.n	80084ba <scalbn+0x52>
 8008498:	a327      	add	r3, pc, #156	; (adr r3, 8008538 <scalbn+0xd0>)
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	e01f      	b.n	80084e0 <scalbn+0x78>
 80084a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80084a4:	4291      	cmp	r1, r2
 80084a6:	d10c      	bne.n	80084c2 <scalbn+0x5a>
 80084a8:	ee10 2a10 	vmov	r2, s0
 80084ac:	4620      	mov	r0, r4
 80084ae:	4629      	mov	r1, r5
 80084b0:	f7f7 fef4 	bl	800029c <__adddf3>
 80084b4:	4604      	mov	r4, r0
 80084b6:	460d      	mov	r5, r1
 80084b8:	e022      	b.n	8008500 <scalbn+0x98>
 80084ba:	460b      	mov	r3, r1
 80084bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80084c0:	3936      	subs	r1, #54	; 0x36
 80084c2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80084c6:	4296      	cmp	r6, r2
 80084c8:	dd0d      	ble.n	80084e6 <scalbn+0x7e>
 80084ca:	2d00      	cmp	r5, #0
 80084cc:	a11c      	add	r1, pc, #112	; (adr r1, 8008540 <scalbn+0xd8>)
 80084ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084d2:	da02      	bge.n	80084da <scalbn+0x72>
 80084d4:	a11c      	add	r1, pc, #112	; (adr r1, 8008548 <scalbn+0xe0>)
 80084d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084da:	a319      	add	r3, pc, #100	; (adr r3, 8008540 <scalbn+0xd8>)
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	f7f8 f892 	bl	8000608 <__aeabi_dmul>
 80084e4:	e7e6      	b.n	80084b4 <scalbn+0x4c>
 80084e6:	1872      	adds	r2, r6, r1
 80084e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80084ec:	428a      	cmp	r2, r1
 80084ee:	dcec      	bgt.n	80084ca <scalbn+0x62>
 80084f0:	2a00      	cmp	r2, #0
 80084f2:	dd08      	ble.n	8008506 <scalbn+0x9e>
 80084f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80084f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80084fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008500:	ec45 4b10 	vmov	d0, r4, r5
 8008504:	bd70      	pop	{r4, r5, r6, pc}
 8008506:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800850a:	da08      	bge.n	800851e <scalbn+0xb6>
 800850c:	2d00      	cmp	r5, #0
 800850e:	a10a      	add	r1, pc, #40	; (adr r1, 8008538 <scalbn+0xd0>)
 8008510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008514:	dac0      	bge.n	8008498 <scalbn+0x30>
 8008516:	a10e      	add	r1, pc, #56	; (adr r1, 8008550 <scalbn+0xe8>)
 8008518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800851c:	e7bc      	b.n	8008498 <scalbn+0x30>
 800851e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008522:	3236      	adds	r2, #54	; 0x36
 8008524:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008528:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800852c:	4620      	mov	r0, r4
 800852e:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <scalbn+0xf8>)
 8008530:	2200      	movs	r2, #0
 8008532:	e7d5      	b.n	80084e0 <scalbn+0x78>
 8008534:	f3af 8000 	nop.w
 8008538:	c2f8f359 	.word	0xc2f8f359
 800853c:	01a56e1f 	.word	0x01a56e1f
 8008540:	8800759c 	.word	0x8800759c
 8008544:	7e37e43c 	.word	0x7e37e43c
 8008548:	8800759c 	.word	0x8800759c
 800854c:	fe37e43c 	.word	0xfe37e43c
 8008550:	c2f8f359 	.word	0xc2f8f359
 8008554:	81a56e1f 	.word	0x81a56e1f
 8008558:	43500000 	.word	0x43500000
 800855c:	ffff3cb0 	.word	0xffff3cb0
 8008560:	3c900000 	.word	0x3c900000

08008564 <__ieee754_sqrt>:
 8008564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	ec55 4b10 	vmov	r4, r5, d0
 800856c:	4e67      	ldr	r6, [pc, #412]	; (800870c <__ieee754_sqrt+0x1a8>)
 800856e:	43ae      	bics	r6, r5
 8008570:	ee10 0a10 	vmov	r0, s0
 8008574:	ee10 2a10 	vmov	r2, s0
 8008578:	4629      	mov	r1, r5
 800857a:	462b      	mov	r3, r5
 800857c:	d10d      	bne.n	800859a <__ieee754_sqrt+0x36>
 800857e:	f7f8 f843 	bl	8000608 <__aeabi_dmul>
 8008582:	4602      	mov	r2, r0
 8008584:	460b      	mov	r3, r1
 8008586:	4620      	mov	r0, r4
 8008588:	4629      	mov	r1, r5
 800858a:	f7f7 fe87 	bl	800029c <__adddf3>
 800858e:	4604      	mov	r4, r0
 8008590:	460d      	mov	r5, r1
 8008592:	ec45 4b10 	vmov	d0, r4, r5
 8008596:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859a:	2d00      	cmp	r5, #0
 800859c:	dc0b      	bgt.n	80085b6 <__ieee754_sqrt+0x52>
 800859e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80085a2:	4326      	orrs	r6, r4
 80085a4:	d0f5      	beq.n	8008592 <__ieee754_sqrt+0x2e>
 80085a6:	b135      	cbz	r5, 80085b6 <__ieee754_sqrt+0x52>
 80085a8:	f7f7 fe76 	bl	8000298 <__aeabi_dsub>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	f7f8 f954 	bl	800085c <__aeabi_ddiv>
 80085b4:	e7eb      	b.n	800858e <__ieee754_sqrt+0x2a>
 80085b6:	1509      	asrs	r1, r1, #20
 80085b8:	f000 808d 	beq.w	80086d6 <__ieee754_sqrt+0x172>
 80085bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085c0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80085c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085c8:	07c9      	lsls	r1, r1, #31
 80085ca:	bf5c      	itt	pl
 80085cc:	005b      	lslpl	r3, r3, #1
 80085ce:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80085d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80085d6:	bf58      	it	pl
 80085d8:	0052      	lslpl	r2, r2, #1
 80085da:	2500      	movs	r5, #0
 80085dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80085e0:	1076      	asrs	r6, r6, #1
 80085e2:	0052      	lsls	r2, r2, #1
 80085e4:	f04f 0e16 	mov.w	lr, #22
 80085e8:	46ac      	mov	ip, r5
 80085ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085ee:	eb0c 0001 	add.w	r0, ip, r1
 80085f2:	4298      	cmp	r0, r3
 80085f4:	bfde      	ittt	le
 80085f6:	1a1b      	suble	r3, r3, r0
 80085f8:	eb00 0c01 	addle.w	ip, r0, r1
 80085fc:	186d      	addle	r5, r5, r1
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	f1be 0e01 	subs.w	lr, lr, #1
 8008604:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008608:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800860c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008610:	d1ed      	bne.n	80085ee <__ieee754_sqrt+0x8a>
 8008612:	4674      	mov	r4, lr
 8008614:	2720      	movs	r7, #32
 8008616:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800861a:	4563      	cmp	r3, ip
 800861c:	eb01 000e 	add.w	r0, r1, lr
 8008620:	dc02      	bgt.n	8008628 <__ieee754_sqrt+0xc4>
 8008622:	d113      	bne.n	800864c <__ieee754_sqrt+0xe8>
 8008624:	4290      	cmp	r0, r2
 8008626:	d811      	bhi.n	800864c <__ieee754_sqrt+0xe8>
 8008628:	2800      	cmp	r0, #0
 800862a:	eb00 0e01 	add.w	lr, r0, r1
 800862e:	da57      	bge.n	80086e0 <__ieee754_sqrt+0x17c>
 8008630:	f1be 0f00 	cmp.w	lr, #0
 8008634:	db54      	blt.n	80086e0 <__ieee754_sqrt+0x17c>
 8008636:	f10c 0801 	add.w	r8, ip, #1
 800863a:	eba3 030c 	sub.w	r3, r3, ip
 800863e:	4290      	cmp	r0, r2
 8008640:	bf88      	it	hi
 8008642:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8008646:	1a12      	subs	r2, r2, r0
 8008648:	440c      	add	r4, r1
 800864a:	46c4      	mov	ip, r8
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	3f01      	subs	r7, #1
 8008650:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008654:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008658:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800865c:	d1dd      	bne.n	800861a <__ieee754_sqrt+0xb6>
 800865e:	4313      	orrs	r3, r2
 8008660:	d01b      	beq.n	800869a <__ieee754_sqrt+0x136>
 8008662:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008710 <__ieee754_sqrt+0x1ac>
 8008666:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008714 <__ieee754_sqrt+0x1b0>
 800866a:	e9da 0100 	ldrd	r0, r1, [sl]
 800866e:	e9db 2300 	ldrd	r2, r3, [fp]
 8008672:	f7f7 fe11 	bl	8000298 <__aeabi_dsub>
 8008676:	e9da 8900 	ldrd	r8, r9, [sl]
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	4640      	mov	r0, r8
 8008680:	4649      	mov	r1, r9
 8008682:	f7f8 fa3d 	bl	8000b00 <__aeabi_dcmple>
 8008686:	b140      	cbz	r0, 800869a <__ieee754_sqrt+0x136>
 8008688:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800868c:	e9da 0100 	ldrd	r0, r1, [sl]
 8008690:	e9db 2300 	ldrd	r2, r3, [fp]
 8008694:	d126      	bne.n	80086e4 <__ieee754_sqrt+0x180>
 8008696:	3501      	adds	r5, #1
 8008698:	463c      	mov	r4, r7
 800869a:	106a      	asrs	r2, r5, #1
 800869c:	0863      	lsrs	r3, r4, #1
 800869e:	07e9      	lsls	r1, r5, #31
 80086a0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80086a4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80086a8:	bf48      	it	mi
 80086aa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80086ae:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80086b2:	461c      	mov	r4, r3
 80086b4:	e76d      	b.n	8008592 <__ieee754_sqrt+0x2e>
 80086b6:	0ad3      	lsrs	r3, r2, #11
 80086b8:	3815      	subs	r0, #21
 80086ba:	0552      	lsls	r2, r2, #21
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0fa      	beq.n	80086b6 <__ieee754_sqrt+0x152>
 80086c0:	02dc      	lsls	r4, r3, #11
 80086c2:	d50a      	bpl.n	80086da <__ieee754_sqrt+0x176>
 80086c4:	f1c1 0420 	rsb	r4, r1, #32
 80086c8:	fa22 f404 	lsr.w	r4, r2, r4
 80086cc:	1e4d      	subs	r5, r1, #1
 80086ce:	408a      	lsls	r2, r1
 80086d0:	4323      	orrs	r3, r4
 80086d2:	1b41      	subs	r1, r0, r5
 80086d4:	e772      	b.n	80085bc <__ieee754_sqrt+0x58>
 80086d6:	4608      	mov	r0, r1
 80086d8:	e7f0      	b.n	80086bc <__ieee754_sqrt+0x158>
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	3101      	adds	r1, #1
 80086de:	e7ef      	b.n	80086c0 <__ieee754_sqrt+0x15c>
 80086e0:	46e0      	mov	r8, ip
 80086e2:	e7aa      	b.n	800863a <__ieee754_sqrt+0xd6>
 80086e4:	f7f7 fdda 	bl	800029c <__adddf3>
 80086e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4640      	mov	r0, r8
 80086f2:	4649      	mov	r1, r9
 80086f4:	f7f8 f9fa 	bl	8000aec <__aeabi_dcmplt>
 80086f8:	b120      	cbz	r0, 8008704 <__ieee754_sqrt+0x1a0>
 80086fa:	1ca0      	adds	r0, r4, #2
 80086fc:	bf08      	it	eq
 80086fe:	3501      	addeq	r5, #1
 8008700:	3402      	adds	r4, #2
 8008702:	e7ca      	b.n	800869a <__ieee754_sqrt+0x136>
 8008704:	3401      	adds	r4, #1
 8008706:	f024 0401 	bic.w	r4, r4, #1
 800870a:	e7c6      	b.n	800869a <__ieee754_sqrt+0x136>
 800870c:	7ff00000 	.word	0x7ff00000
 8008710:	200001e0 	.word	0x200001e0
 8008714:	200001e8 	.word	0x200001e8

08008718 <_init>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr

08008724 <_fini>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	bf00      	nop
 8008728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872a:	bc08      	pop	{r3}
 800872c:	469e      	mov	lr, r3
 800872e:	4770      	bx	lr
